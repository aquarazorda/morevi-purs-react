// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"gtw6U":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"39hwX"}],"39hwX":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"d0LFS"}],"d0LFS":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"jN7un":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "42036d7a98ade5a7";
module.bundle.HMR_BUNDLE_ID = "d58e0f56b7daeae0";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"jvaAX":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$d5eb = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$d5eb.prelude(module);

try {
// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
    $PS["Control.Alt"] = $PS["Control.Alt"] || {};
    var exports = $PS["Control.Alt"];
    var alt = function(dict) {
        return dict.alt;
    };
    exports["alt"] = alt;
})(PS);
(function($PS) {
    $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
    var exports = $PS["Control.Semigroupoid"];
    var semigroupoidFn = {
        compose: function(f) {
            return function(g) {
                return function(x) {
                    return f(g(x));
                };
            };
        }
    };
    exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
    $PS["Control.Category"] = $PS["Control.Category"] || {};
    var exports = $PS["Control.Category"];
    var Control_Semigroupoid = $PS["Control.Semigroupoid"];
    var identity = function(dict) {
        return dict.identity;
    };
    var categoryFn = {
        identity: function(x) {
            return x;
        },
        Semigroupoid0: function() {
            return Control_Semigroupoid.semigroupoidFn;
        }
    };
    exports["identity"] = identity;
    exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
    $PS["Data.Function"] = $PS["Data.Function"] || {};
    var exports = $PS["Data.Function"];
    var flip = function(f) {
        return function(b) {
            return function(a) {
                return f(a)(b);
            };
        };
    };
    var $$const = function(a) {
        return function(v) {
            return a;
        };
    };
    exports["flip"] = flip;
    exports["const"] = $$const;
})(PS);
(function(exports) {
    exports.arrayMap = function(f) {
        return function(arr) {
            var l = arr.length;
            var result = new Array(l);
            for(var i = 0; i < l; i++)result[i] = f(arr[i]);
            return result;
        };
    };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
    $PS["Data.Unit"] = $PS["Data.Unit"] || {};
    var exports = $PS["Data.Unit"];
    var $foreign = $PS["Data.Unit"];
    exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
    $PS["Data.Functor"] = $PS["Data.Functor"] || {};
    var exports = $PS["Data.Functor"];
    var $foreign = $PS["Data.Functor"];
    var Data_Function = $PS["Data.Function"];
    var Data_Unit = $PS["Data.Unit"];
    var map = function(dict) {
        return dict.map;
    };
    var $$void = function(dictFunctor) {
        return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
    };
    var voidRight = function(dictFunctor) {
        return function(x) {
            return map(dictFunctor)(Data_Function["const"](x));
        };
    };
    var functorArray = {
        map: $foreign.arrayMap
    };
    exports["map"] = map;
    exports["void"] = $$void;
    exports["voidRight"] = voidRight;
    exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
    $PS["Control.Apply"] = $PS["Control.Apply"] || {};
    var exports = $PS["Control.Apply"];
    var Control_Category = $PS["Control.Category"];
    var Data_Function = $PS["Data.Function"];
    var Data_Functor = $PS["Data.Functor"];
    var apply = function(dict) {
        return dict.apply;
    };
    var applySecond = function(dictApply) {
        return function(a) {
            return function(b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
            };
        };
    };
    exports["apply"] = apply;
    exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
    $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
    var exports = $PS["Control.Applicative"];
    var Control_Apply = $PS["Control.Apply"];
    var pure = function(dict) {
        return dict.pure;
    };
    var liftA1 = function(dictApplicative) {
        return function(f) {
            return function(a) {
                return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
            };
        };
    };
    exports["pure"] = pure;
    exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
    $PS["Control.Bind"] = $PS["Control.Bind"] || {};
    var exports = $PS["Control.Bind"];
    var Data_Function = $PS["Data.Function"];
    var bind = function(dict) {
        return dict.bind;
    };
    var bindFlipped = function(dictBind) {
        return Data_Function.flip(bind(dictBind));
    };
    exports["bind"] = bind;
    exports["bindFlipped"] = bindFlipped;
})(PS);
(function($PS) {
    $PS["Control.Bind.Indexed"] = $PS["Control.Bind.Indexed"] || {};
    var exports = $PS["Control.Bind.Indexed"];
    var ibind = function(dict) {
        return dict.ibind;
    };
    exports["ibind"] = ibind;
})(PS);
(function($PS) {
    $PS["Control.Monad"] = $PS["Control.Monad"] || {};
    var exports = $PS["Control.Monad"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var ap = function(dictMonad) {
        return function(f) {
            return function(a) {
                return Control_Bind.bind(dictMonad.Bind1())(f)(function(f$prime) {
                    return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                    });
                });
            };
        };
    };
    exports["ap"] = ap;
})(PS);
(function($PS) {
    $PS["Data.Either"] = $PS["Data.Either"] || {};
    var exports = $PS["Data.Either"];
    var Left1 = function() {
        function Left(value0) {
            this.value0 = value0;
        }
        Left.create = function(value0) {
            return new Left(value0);
        };
        return Left;
    }();
    var Right1 = function() {
        function Right(value0) {
            this.value0 = value0;
        }
        Right.create = function(value0) {
            return new Right(value0);
        };
        return Right;
    }();
    var functorEither = {
        map: function(f) {
            return function(m) {
                if (m instanceof Left1) return new Left1(m.value0);
                if (m instanceof Right1) return new Right1(f(m.value0));
                throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [
                    m.constructor.name
                ]);
            };
        }
    };
    var either = function(v) {
        return function(v1) {
            return function(v2) {
                if (v2 instanceof Left1) return v(v2.value0);
                if (v2 instanceof Right1) return v1(v2.value0);
                throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [
                    v.constructor.name,
                    v1.constructor.name,
                    v2.constructor.name
                ]);
            };
        };
    };
    exports["Left"] = Left1;
    exports["Right"] = Right1;
    exports["either"] = either;
    exports["functorEither"] = functorEither;
})(PS);
(function(exports) {
    exports.pureE = function(a) {
        return function() {
            return a;
        };
    };
    exports.bindE = function(a) {
        return function(f) {
            return function() {
                return f(a())();
            };
        };
    };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
    $PS["Effect"] = $PS["Effect"] || {};
    var exports = $PS["Effect"];
    var $foreign = $PS["Effect"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Monad = $PS["Control.Monad"];
    var monadEffect = {
        Applicative0: function() {
            return applicativeEffect;
        },
        Bind1: function() {
            return bindEffect;
        }
    };
    var bindEffect = {
        bind: $foreign.bindE,
        Apply0: function() {
            return applyEffect;
        }
    };
    var applyEffect = {
        apply: Control_Monad.ap(monadEffect),
        Functor0: function() {
            return functorEffect;
        }
    };
    var applicativeEffect = {
        pure: $foreign.pureE,
        Apply0: function() {
            return applyEffect;
        }
    };
    var functorEffect = {
        map: Control_Applicative.liftA1(applicativeEffect)
    };
    exports["functorEffect"] = functorEffect;
    exports["applyEffect"] = applyEffect;
    exports["applicativeEffect"] = applicativeEffect;
    exports["bindEffect"] = bindEffect;
    exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
    exports.error = function(msg) {
        return new Error(msg);
    };
    exports.throwException = function(e) {
        return function() {
            throw e;
        };
    };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
    $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
    var exports = $PS["Effect.Exception"];
    var $foreign = $PS["Effect.Exception"];
    exports["error"] = $foreign.error;
    exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
    $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
    var exports = $PS["Control.Monad.Error.Class"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Data_Either = $PS["Data.Either"];
    var Data_Functor = $PS["Data.Functor"];
    var Effect = $PS["Effect"];
    var Effect_Exception = $PS["Effect.Exception"];
    var throwError = function(dict) {
        return dict.throwError;
    };
    var monadThrowEffect = {
        throwError: Effect_Exception.throwException,
        Monad0: function() {
            return Effect.monadEffect;
        }
    };
    var catchError = function(dict) {
        return dict.catchError;
    };
    var $$try = function(dictMonadError) {
        return function(a) {
            return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function() {
                var $21 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
                return function($22) {
                    return $21(Data_Either.Left.create($22));
                };
            }());
        };
    };
    exports["throwError"] = throwError;
    exports["try"] = $$try;
    exports["monadThrowEffect"] = monadThrowEffect;
})(PS);
(function($PS) {
    $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
    var exports = $PS["Data.Semigroup"];
    var append = function(dict) {
        return dict.append;
    };
    exports["append"] = append;
})(PS);
(function($PS) {
    $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
    var exports = $PS["Control.Monad.Except.Trans"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var Control_Monad = $PS["Control.Monad"];
    var Data_Either = $PS["Data.Either"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Semigroup = $PS["Data.Semigroup"];
    var ExceptT = function(x) {
        return x;
    };
    var runExceptT = function(v) {
        return v;
    };
    var mapExceptT = function(f) {
        return function(v) {
            return f(v);
        };
    };
    var functorExceptT = function(dictFunctor) {
        return {
            map: function(f) {
                return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
            }
        };
    };
    var monadExceptT = function(dictMonad) {
        return {
            Applicative0: function() {
                return applicativeExceptT(dictMonad);
            },
            Bind1: function() {
                return bindExceptT(dictMonad);
            }
        };
    };
    var bindExceptT = function(dictMonad) {
        return {
            bind: function(v) {
                return function(k) {
                    return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function() {
                        var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                        return function($92) {
                            return $91(Data_Either.Left.create($92));
                        };
                    }())(function(a) {
                        var v1 = k(a);
                        return v1;
                    }));
                };
            },
            Apply0: function() {
                return applyExceptT(dictMonad);
            }
        };
    };
    var applyExceptT = function(dictMonad) {
        return {
            apply: Control_Monad.ap(monadExceptT(dictMonad)),
            Functor0: function() {
                return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
            }
        };
    };
    var applicativeExceptT = function(dictMonad) {
        return {
            pure: function() {
                var $93 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($94) {
                    return ExceptT($93(Data_Either.Right.create($94)));
                };
            }(),
            Apply0: function() {
                return applyExceptT(dictMonad);
            }
        };
    };
    var monadThrowExceptT = function(dictMonad) {
        return {
            throwError: function() {
                var $103 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($104) {
                    return ExceptT($103(Data_Either.Left.create($104)));
                };
            }(),
            Monad0: function() {
                return monadExceptT(dictMonad);
            }
        };
    };
    var altExceptT = function(dictSemigroup) {
        return function(dictMonad) {
            return {
                alt: function(v) {
                    return function(v1) {
                        return Control_Bind.bind(dictMonad.Bind1())(v)(function(rm) {
                            if (rm instanceof Data_Either.Right) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                            if (rm instanceof Data_Either.Left) return Control_Bind.bind(dictMonad.Bind1())(v1)(function(rn) {
                                if (rn instanceof Data_Either.Right) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                if (rn instanceof Data_Either.Left) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [
                                    rn.constructor.name
                                ]);
                            });
                            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [
                                rm.constructor.name
                            ]);
                        });
                    };
                },
                Functor0: function() {
                    return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
                }
            };
        };
    };
    exports["runExceptT"] = runExceptT;
    exports["functorExceptT"] = functorExceptT;
    exports["applicativeExceptT"] = applicativeExceptT;
    exports["altExceptT"] = altExceptT;
    exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
    // module Unsafe.Coerce
    exports.unsafeCoerce = function(x) {
        return x;
    };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
    $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
    var exports = $PS["Unsafe.Coerce"];
    var $foreign = $PS["Unsafe.Coerce"];
    exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
    $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
    var exports = $PS["Safe.Coerce"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var coerce = function() {
        return Unsafe_Coerce.unsafeCoerce;
    };
    exports["coerce"] = coerce;
})(PS);
(function($PS) {
    $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
    var exports = $PS["Data.Newtype"];
    var Safe_Coerce = $PS["Safe.Coerce"];
    var unwrap = Safe_Coerce.coerce;
    exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
    $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
    var exports = $PS["Control.Monad.Except"];
    var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
    var Data_Newtype = $PS["Data.Newtype"];
    var runExcept = function() {
        var $0 = Data_Newtype.unwrap();
        return function($1) {
            return $0(Control_Monad_Except_Trans.runExceptT($1));
        };
    }();
    exports["runExcept"] = runExcept;
})(PS);
(function($PS) {
    $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
    var exports = $PS["Control.Parallel.Class"];
    var sequential = function(dict) {
        return dict.sequential;
    };
    var parallel = function(dict) {
        return dict.parallel;
    };
    exports["parallel"] = parallel;
    exports["sequential"] = sequential;
})(PS);
(function(exports) {
    exports.foldrArray = function(f) {
        return function(init) {
            return function(xs) {
                var acc = init;
                var len = xs.length;
                for(var i = len - 1; i >= 0; i--)acc = f(xs[i])(acc);
                return acc;
            };
        };
    };
    exports.foldlArray = function(f) {
        return function(init) {
            return function(xs) {
                var acc = init;
                var len = xs.length;
                for(var i = 0; i < len; i++)acc = f(acc)(xs[i]);
                return acc;
            };
        };
    };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
    $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
    var exports = $PS["Data.Monoid"];
    var mempty = function(dict) {
        return dict.mempty;
    };
    exports["mempty"] = mempty;
})(PS);
(function($PS) {
    $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
    var exports = $PS["Data.Foldable"];
    var $foreign = $PS["Data.Foldable"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Apply = $PS["Control.Apply"];
    var Data_Monoid = $PS["Data.Monoid"];
    var Data_Semigroup = $PS["Data.Semigroup"];
    var Data_Unit = $PS["Data.Unit"];
    var foldr = function(dict) {
        return dict.foldr;
    };
    var traverse_ = function(dictApplicative) {
        return function(dictFoldable) {
            return function(f) {
                return foldr(dictFoldable)(function() {
                    var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function($317) {
                        return $316(f($317));
                    };
                }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
    var foldl = function(dict) {
        return dict.foldl;
    };
    var foldMapDefaultR = function(dictFoldable) {
        return function(dictMonoid) {
            return function(f) {
                return foldr(dictFoldable)(function(x) {
                    return function(acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
    var foldableArray = {
        foldr: $foreign.foldrArray,
        foldl: $foreign.foldlArray,
        foldMap: function(dictMonoid) {
            return foldMapDefaultR(foldableArray)(dictMonoid);
        }
    };
    exports["foldr"] = foldr;
    exports["foldl"] = foldl;
    exports["traverse_"] = traverse_;
    exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
    $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
    var exports = $PS["Control.Parallel"];
    var Control_Category = $PS["Control.Category"];
    var Control_Parallel_Class = $PS["Control.Parallel.Class"];
    var Data_Foldable = $PS["Data.Foldable"];
    var parTraverse_ = function(dictParallel) {
        return function(dictFoldable) {
            return function(f) {
                var $17 = Control_Parallel_Class.sequential(dictParallel);
                var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function() {
                    var $20 = Control_Parallel_Class.parallel(dictParallel);
                    return function($21) {
                        return $20(f($21));
                    };
                }());
                return function($19) {
                    return $17($18($19));
                };
            };
        };
    };
    var parSequence_ = function(dictParallel) {
        return function(dictFoldable) {
            return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
    exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
    $PS["Control.Plus"] = $PS["Control.Plus"] || {};
    var exports = $PS["Control.Plus"];
    var empty = function(dict) {
        return dict.empty;
    };
    exports["empty"] = empty;
})(PS);
(function(exports) {
    exports.thenImpl = function(promise) {
        return function(errCB) {
            return function(succCB) {
                return function() {
                    promise.then(succCB, errCB);
                };
            };
        };
    };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
    $PS["Data.Identity"] = $PS["Data.Identity"] || {};
    var exports = $PS["Data.Identity"];
    var Identity = function(x) {
        return x;
    };
    var functorIdentity = {
        map: function(f) {
            return function(m) {
                return f(m);
            };
        }
    };
    var applyIdentity = {
        apply: function(v) {
            return function(v1) {
                return v(v1);
            };
        },
        Functor0: function() {
            return functorIdentity;
        }
    };
    var bindIdentity = {
        bind: function(v) {
            return function(f) {
                return f(v);
            };
        },
        Apply0: function() {
            return applyIdentity;
        }
    };
    var applicativeIdentity = {
        pure: Identity,
        Apply0: function() {
            return applyIdentity;
        }
    };
    var monadIdentity = {
        Applicative0: function() {
            return applicativeIdentity;
        },
        Bind1: function() {
            return bindIdentity;
        }
    };
    exports["functorIdentity"] = functorIdentity;
    exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
    $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
    var exports = $PS["Data.NonEmpty"];
    var Control_Plus = $PS["Control.Plus"];
    var NonEmpty1 = function() {
        function NonEmpty(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        }
        NonEmpty.create = function(value0) {
            return function(value1) {
                return new NonEmpty(value0, value1);
            };
        };
        return NonEmpty;
    }();
    var singleton = function(dictPlus) {
        return function(a) {
            return new NonEmpty1(a, Control_Plus.empty(dictPlus));
        };
    };
    exports["NonEmpty"] = NonEmpty1;
    exports["singleton"] = singleton;
})(PS);
(function($PS) {
    $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
    var exports = $PS["Data.List.Types"];
    var Data_Foldable = $PS["Data.Foldable"];
    var Data_Function = $PS["Data.Function"];
    var Data_Monoid = $PS["Data.Monoid"];
    var Data_NonEmpty = $PS["Data.NonEmpty"];
    var Data_Semigroup = $PS["Data.Semigroup"];
    var Nil1 = function() {
        function Nil() {}
        Nil.value = new Nil();
        return Nil;
    }();
    var Cons1 = function() {
        function Cons(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        }
        Cons.create = function(value0) {
            return function(value1) {
                return new Cons(value0, value1);
            };
        };
        return Cons;
    }();
    var NonEmptyList = function(x) {
        return x;
    };
    var toList = function(v) {
        return new Cons1(v.value0, v.value1);
    };
    var listMap = function(f) {
        var chunkedRevMap = function($copy_chunksAcc) {
            return function($copy_v) {
                var $tco_var_chunksAcc = $copy_chunksAcc;
                var $tco_done = false;
                var $tco_result1;
                function $tco_loop1(chunksAcc, v) {
                    if (v instanceof Cons1 && v.value1 instanceof Cons1 && v.value1.value1 instanceof Cons1) {
                        $tco_var_chunksAcc = new Cons1(v, chunksAcc);
                        $copy_v = v.value1.value1.value1;
                        return;
                    }
                    var unrolledMap = function(v1) {
                        if (v1 instanceof Cons1 && v1.value1 instanceof Cons1 && v1.value1.value1 instanceof Nil1) return new Cons1(f(v1.value0), new Cons1(f(v1.value1.value0), Nil1.value));
                        if (v1 instanceof Cons1 && v1.value1 instanceof Nil1) return new Cons1(f(v1.value0), Nil1.value);
                        return Nil1.value;
                    };
                    var reverseUnrolledMap = function($copy_v1) {
                        return function($copy_acc) {
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done1 = false;
                            var $tco_result;
                            function $tco_loop(v1, acc) {
                                if (v1 instanceof Cons1 && v1.value0 instanceof Cons1 && v1.value0.value1 instanceof Cons1 && v1.value0.value1.value1 instanceof Cons1) {
                                    $tco_var_v1 = v1.value1;
                                    $copy_acc = new Cons1(f(v1.value0.value0), new Cons1(f(v1.value0.value1.value0), new Cons1(f(v1.value0.value1.value1.value0), acc)));
                                    return;
                                }
                                $tco_done1 = true;
                                return acc;
                            }
                            while(!$tco_done1)$tco_result = $tco_loop($tco_var_v1, $copy_acc);
                            return $tco_result;
                        };
                    };
                    $tco_done = true;
                    return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
                }
                while(!$tco_done)$tco_result1 = $tco_loop1($tco_var_chunksAcc, $copy_v);
                return $tco_result1;
            };
        };
        return chunkedRevMap(Nil1.value);
    };
    var functorList = {
        map: listMap
    };
    var foldableList = {
        foldr: function(f) {
            return function(b) {
                var rev = function() {
                    var go = function($copy_acc) {
                        return function($copy_v) {
                            var $tco_var_acc = $copy_acc;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(acc, v) {
                                if (v instanceof Nil1) {
                                    $tco_done = true;
                                    return acc;
                                }
                                if (v instanceof Cons1) {
                                    $tco_var_acc = new Cons1(v.value0, acc);
                                    $copy_v = v.value1;
                                    return;
                                }
                                throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [
                                    acc.constructor.name,
                                    v.constructor.name
                                ]);
                            }
                            while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $copy_v);
                            return $tco_result;
                        };
                    };
                    return go(Nil1.value);
                }();
                var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
                return function($206) {
                    return $205(rev($206));
                };
            };
        },
        foldl: function(f) {
            var go = function($copy_b) {
                return function($copy_v) {
                    var $tco_var_b = $copy_b;
                    var $tco_done1 = false;
                    var $tco_result;
                    function $tco_loop(b, v) {
                        if (v instanceof Nil1) {
                            $tco_done1 = true;
                            return b;
                        }
                        if (v instanceof Cons1) {
                            $tco_var_b = f(b)(v.value0);
                            $copy_v = v.value1;
                            return;
                        }
                        throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [
                            v.constructor.name
                        ]);
                    }
                    while(!$tco_done1)$tco_result = $tco_loop($tco_var_b, $copy_v);
                    return $tco_result;
                };
            };
            return go;
        },
        foldMap: function(dictMonoid) {
            return function(f) {
                return Data_Foldable.foldl(foldableList)(function(acc) {
                    var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                    return function($208) {
                        return $207(f($208));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        }
    };
    var semigroupList = {
        append: function(xs) {
            return function(ys) {
                return Data_Foldable.foldr(foldableList)(Cons1.create)(ys)(xs);
            };
        }
    };
    var semigroupNonEmptyList = {
        append: function(v) {
            return function(as$prime) {
                return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
            };
        }
    };
    var altList = {
        alt: Data_Semigroup.append(semigroupList),
        Functor0: function() {
            return functorList;
        }
    };
    var plusList = {
        empty: Nil1.value,
        Alt0: function() {
            return altList;
        }
    };
    exports["NonEmptyList"] = NonEmptyList;
    exports["plusList"] = plusList;
    exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function(exports) {
    var Aff1 = function() {
        // A unique value for empty.
        var EMPTY = {};
        /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */ var PURE = "Pure";
        var THROW = "Throw";
        var CATCH = "Catch";
        var SYNC = "Sync";
        var ASYNC = "Async";
        var BIND = "Bind";
        var BRACKET = "Bracket";
        var FORK = "Fork";
        var SEQ = "Sequential";
        /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */ var MAP = "Map";
        var APPLY = "Apply";
        var ALT = "Alt";
        // Various constructors used in interpretation
        var CONS = "Cons"; // Cons-list, for stacks
        var RESUME = "Resume"; // Continue indiscriminately
        var RELEASE = "Release"; // Continue with bracket finalizers
        var FINALIZER = "Finalizer"; // A non-interruptible effect
        var FINALIZED = "Finalized"; // Marker for finalization
        var FORKED = "Forked"; // Reference to a forked fiber, with resumption stack
        var FIBER = "Fiber"; // Actual fiber reference
        var THUNK = "Thunk"; // Primed effect, ready to invoke
        function Aff(tag, _1, _2, _3) {
            this.tag = tag;
            this._1 = _1;
            this._2 = _2;
            this._3 = _3;
        }
        function AffCtr(tag) {
            var fn = function(_1, _2, _3) {
                return new Aff(tag, _1, _2, _3);
            };
            fn.tag = tag;
            return fn;
        }
        function nonCanceler(error) {
            return new Aff(PURE, void 0);
        }
        function runEff(eff) {
            try {
                eff();
            } catch (error) {
                setTimeout(function() {
                    throw error;
                }, 0);
            }
        }
        function runSync(left, right, eff) {
            try {
                return right(eff());
            } catch (error) {
                return left(error);
            }
        }
        function runAsync(left, eff, k) {
            try {
                return eff(k)();
            } catch (error) {
                k(left(error))();
                return nonCanceler;
            }
        }
        var Scheduler = function() {
            var limit = 1024;
            var size = 0;
            var ix = 0;
            var queue = new Array(limit);
            var draining = false;
            function drain() {
                var thunk;
                draining = true;
                while(size !== 0){
                    size--;
                    thunk = queue[ix];
                    queue[ix] = void 0;
                    ix = (ix + 1) % limit;
                    thunk();
                }
                draining = false;
            }
            return {
                isDraining: function() {
                    return draining;
                },
                enqueue: function(cb) {
                    var i, tmp;
                    if (size === limit) {
                        tmp = draining;
                        drain();
                        draining = tmp;
                    }
                    queue[(ix + size) % limit] = cb;
                    size++;
                    if (!draining) drain();
                }
            };
        }();
        function Supervisor(util) {
            var fibers = {};
            var fiberId = 0;
            var count = 0;
            return {
                register: function(fiber) {
                    var fid = fiberId++;
                    fiber.onComplete({
                        rethrow: true,
                        handler: function(result) {
                            return function() {
                                count--;
                                delete fibers[fid];
                            };
                        }
                    })();
                    fibers[fid] = fiber;
                    count++;
                },
                isEmpty: function() {
                    return count === 0;
                },
                killAll: function(killError, cb) {
                    return function() {
                        if (count === 0) return cb();
                        var killCount = 0;
                        var kills = {};
                        function kill(fid) {
                            kills[fid] = fibers[fid].kill(killError, function(result) {
                                return function() {
                                    delete kills[fid];
                                    killCount--;
                                    if (util.isLeft(result) && util.fromLeft(result)) setTimeout(function() {
                                        throw util.fromLeft(result);
                                    }, 0);
                                    if (killCount === 0) cb();
                                };
                            })();
                        }
                        for(var k1 in fibers)if (fibers.hasOwnProperty(k1)) {
                            killCount++;
                            kill(k1);
                        }
                        fibers = {};
                        fiberId = 0;
                        count = 0;
                        return function(error) {
                            return new Aff(SYNC, function() {
                                for(var k in kills)if (kills.hasOwnProperty(k)) kills[k]();
                            });
                        };
                    };
                }
            };
        }
        // Fiber state machine
        var SUSPENDED = 0; // Suspended, pending a join.
        var CONTINUE = 1; // Interpret the next instruction.
        var STEP_BIND = 2; // Apply the next bind.
        var STEP_RESULT = 3; // Handle potential failure from a result.
        var PENDING = 4; // An async effect is running.
        var RETURN = 5; // The current stack has returned.
        var COMPLETED = 6; // The entire fiber has completed.
        function Fiber(util, supervisor, aff) {
            // Monotonically increasing tick, increased on each asynchronous turn.
            var runTick = 0;
            // The current branch of the state machine.
            var status = SUSPENDED;
            // The current point of interest for the state machine branch.
            var step = aff; // Successful step
            var fail = null; // Failure step
            var interrupt = null; // Asynchronous interrupt
            // Stack of continuations for the current fiber.
            var bhead = null;
            var btail = null;
            // Stack of attempts and finalizers for error recovery. Every `Cons` is also
            // tagged with current `interrupt` state. We use this to track which items
            // should be ignored or evaluated as a result of a kill.
            var attempts = null;
            // A special state is needed for Bracket, because it cannot be killed. When
            // we enter a bracket acquisition or finalizer, we increment the counter,
            // and then decrement once complete.
            var bracketCount = 0;
            // Each join gets a new id so they can be revoked.
            var joinId = 0;
            var joins = null;
            var rethrow = true;
            // Each invocation of `run` requires a tick. When an asynchronous effect is
            // resolved, we must check that the local tick coincides with the fiber
            // tick before resuming. This prevents multiple async continuations from
            // accidentally resuming the same fiber. A common example may be invoking
            // the provided callback in `makeAff` more than once, but it may also be an
            // async effect resuming after the fiber was already cancelled.
            function run(localRunTick) {
                var tmp, result1, attempt;
                while(true){
                    tmp = null;
                    result1 = null;
                    attempt = null;
                    switch(status){
                        case STEP_BIND:
                            status = CONTINUE;
                            try {
                                step = bhead(step);
                                if (btail === null) bhead = null;
                                else {
                                    bhead = btail._1;
                                    btail = btail._2;
                                }
                            } catch (e) {
                                status = RETURN;
                                fail = util.left(e);
                                step = null;
                            }
                            break;
                        case STEP_RESULT:
                            if (util.isLeft(step)) {
                                status = RETURN;
                                fail = step;
                                step = null;
                            } else if (bhead === null) status = RETURN;
                            else {
                                status = STEP_BIND;
                                step = util.fromRight(step);
                            }
                            break;
                        case CONTINUE:
                            switch(step.tag){
                                case BIND:
                                    if (bhead) btail = new Aff(CONS, bhead, btail);
                                    bhead = step._2;
                                    status = CONTINUE;
                                    step = step._1;
                                    break;
                                case PURE:
                                    if (bhead === null) {
                                        status = RETURN;
                                        step = util.right(step._1);
                                    } else {
                                        status = STEP_BIND;
                                        step = step._1;
                                    }
                                    break;
                                case SYNC:
                                    status = STEP_RESULT;
                                    step = runSync(util.left, util.right, step._1);
                                    break;
                                case ASYNC:
                                    status = PENDING;
                                    step = runAsync(util.left, step._1, function(result) {
                                        return function() {
                                            if (runTick !== localRunTick) return;
                                            runTick++;
                                            Scheduler.enqueue(function() {
                                                // It's possible to interrupt the fiber between enqueuing and
                                                // resuming, so we need to check that the runTick is still
                                                // valid.
                                                if (runTick !== localRunTick + 1) return;
                                                status = STEP_RESULT;
                                                step = result;
                                                run(runTick);
                                            });
                                        };
                                    });
                                    return;
                                case THROW:
                                    status = RETURN;
                                    fail = util.left(step._1);
                                    step = null;
                                    break;
                                // Enqueue the Catch so that we can call the error handler later on
                                // in case of an exception.
                                case CATCH:
                                    if (bhead === null) attempts = new Aff(CONS, step, attempts, interrupt);
                                    else attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                                    bhead = null;
                                    btail = null;
                                    status = CONTINUE;
                                    step = step._1;
                                    break;
                                // Enqueue the Bracket so that we can call the appropriate handlers
                                // after resource acquisition.
                                case BRACKET:
                                    bracketCount++;
                                    if (bhead === null) attempts = new Aff(CONS, step, attempts, interrupt);
                                    else attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                                    bhead = null;
                                    btail = null;
                                    status = CONTINUE;
                                    step = step._1;
                                    break;
                                case FORK:
                                    status = STEP_RESULT;
                                    tmp = Fiber(util, supervisor, step._2);
                                    if (supervisor) supervisor.register(tmp);
                                    if (step._1) tmp.run();
                                    step = util.right(tmp);
                                    break;
                                case SEQ:
                                    status = CONTINUE;
                                    step = sequential(util, supervisor, step._1);
                                    break;
                            }
                            break;
                        case RETURN:
                            bhead = null;
                            btail = null;
                            // If the current stack has returned, and we have no other stacks to
                            // resume or finalizers to run, the fiber has halted and we can
                            // invoke all join callbacks. Otherwise we need to resume.
                            if (attempts === null) {
                                status = COMPLETED;
                                step = interrupt || fail || step;
                            } else {
                                // The interrupt status for the enqueued item.
                                tmp = attempts._3;
                                attempt = attempts._1;
                                attempts = attempts._2;
                                switch(attempt.tag){
                                    // We cannot recover from an unmasked interrupt. Otherwise we should
                                    // continue stepping, or run the exception handler if an exception
                                    // was raised.
                                    case CATCH:
                                        // We should compare the interrupt status as well because we
                                        // only want it to apply if there has been an interrupt since
                                        // enqueuing the catch.
                                        if (interrupt && interrupt !== tmp && bracketCount === 0) status = RETURN;
                                        else if (fail) {
                                            status = CONTINUE;
                                            step = attempt._2(util.fromLeft(fail));
                                            fail = null;
                                        }
                                        break;
                                    // We cannot resume from an unmasked interrupt or exception.
                                    case RESUME:
                                        // As with Catch, we only want to ignore in the case of an
                                        // interrupt since enqueing the item.
                                        if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) status = RETURN;
                                        else {
                                            bhead = attempt._1;
                                            btail = attempt._2;
                                            status = STEP_BIND;
                                            step = util.fromRight(step);
                                        }
                                        break;
                                    // If we have a bracket, we should enqueue the handlers,
                                    // and continue with the success branch only if the fiber has
                                    // not been interrupted. If the bracket acquisition failed, we
                                    // should not run either.
                                    case BRACKET:
                                        bracketCount--;
                                        if (fail === null) {
                                            result1 = util.fromRight(step);
                                            // We need to enqueue the Release with the same interrupt
                                            // status as the Bracket that is initiating it.
                                            attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result1), attempts, tmp);
                                            // We should only coninue as long as the interrupt status has not changed or
                                            // we are currently within a non-interruptable finalizer.
                                            if (interrupt === tmp || bracketCount > 0) {
                                                status = CONTINUE;
                                                step = attempt._3(result1);
                                            }
                                        }
                                        break;
                                    // Enqueue the appropriate handler. We increase the bracket count
                                    // because it should not be cancelled.
                                    case RELEASE:
                                        attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                                        status = CONTINUE;
                                        // It has only been killed if the interrupt status has changed
                                        // since we enqueued the item, and the bracket count is 0. If the
                                        // bracket count is non-zero then we are in a masked state so it's
                                        // impossible to be killed.
                                        if (interrupt && interrupt !== tmp && bracketCount === 0) step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                                        else if (fail) step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                                        else step = attempt._1.completed(util.fromRight(step))(attempt._2);
                                        fail = null;
                                        bracketCount++;
                                        break;
                                    case FINALIZER:
                                        bracketCount++;
                                        attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                                        status = CONTINUE;
                                        step = attempt._1;
                                        break;
                                    case FINALIZED:
                                        bracketCount--;
                                        status = RETURN;
                                        step = attempt._1;
                                        fail = attempt._2;
                                        break;
                                }
                            }
                            break;
                        case COMPLETED:
                            for(var k in joins)if (joins.hasOwnProperty(k)) {
                                rethrow = rethrow && joins[k].rethrow;
                                runEff(joins[k].handler(step));
                            }
                            joins = null;
                            // If we have an interrupt and a fail, then the thread threw while
                            // running finalizers. This should always rethrow in a fresh stack.
                            if (interrupt && fail) setTimeout(function() {
                                throw util.fromLeft(fail);
                            }, 0);
                            else if (util.isLeft(step) && rethrow) setTimeout(function() {
                                // Guard on reathrow because a completely synchronous fiber can
                                // still have an observer which was added after-the-fact.
                                if (rethrow) throw util.fromLeft(step);
                            }, 0);
                            return;
                        case SUSPENDED:
                            status = CONTINUE;
                            break;
                        case PENDING:
                            return;
                    }
                }
            }
            function onComplete(join) {
                return function() {
                    if (status === COMPLETED) {
                        rethrow = rethrow && join.rethrow;
                        join.handler(step)();
                        return function() {};
                    }
                    var jid = joinId++;
                    joins = joins || {};
                    joins[jid] = join;
                    return function() {
                        if (joins !== null) delete joins[jid];
                    };
                };
            }
            function kill(error, cb) {
                return function() {
                    if (status === COMPLETED) {
                        cb(util.right(void 0))();
                        return function() {};
                    }
                    var canceler = onComplete({
                        rethrow: false,
                        handler: function() {
                            return cb(util.right(void 0));
                        }
                    })();
                    switch(status){
                        case SUSPENDED:
                            interrupt = util.left(error);
                            status = COMPLETED;
                            step = interrupt;
                            run(runTick);
                            break;
                        case PENDING:
                            if (interrupt === null) interrupt = util.left(error);
                            if (bracketCount === 0) {
                                if (status === PENDING) attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
                                status = RETURN;
                                step = null;
                                fail = null;
                                run(++runTick);
                            }
                            break;
                        default:
                            if (interrupt === null) interrupt = util.left(error);
                            if (bracketCount === 0) {
                                status = RETURN;
                                step = null;
                                fail = null;
                            }
                    }
                    return canceler;
                };
            }
            function join1(cb) {
                return function() {
                    var canceler = onComplete({
                        rethrow: false,
                        handler: cb
                    })();
                    if (status === SUSPENDED) run(runTick);
                    return canceler;
                };
            }
            return {
                kill: kill,
                join: join1,
                onComplete: onComplete,
                isSuspended: function() {
                    return status === SUSPENDED;
                },
                run: function() {
                    if (status === SUSPENDED) {
                        if (!Scheduler.isDraining()) Scheduler.enqueue(function() {
                            run(runTick);
                        });
                        else run(runTick);
                    }
                }
            };
        }
        function runPar(util, supervisor, par1, cb1) {
            // Table of all forked fibers.
            var fiberId = 0;
            var fibers = {};
            // Table of currently running cancelers, as a product of `Alt` behavior.
            var killId = 0;
            var kills1 = {};
            // Error used for early cancelation on Alt branches.
            var early = new Error("[ParAff] Early exit");
            // Error used to kill the entire tree.
            var interrupt = null;
            // The root pointer of the tree.
            var root = EMPTY;
            // Walks a tree, invoking all the cancelers. Returns the table of pending
            // cancellation fibers.
            function kill(error, par, cb) {
                var step = par;
                var head = null;
                var tail = null;
                var count = 0;
                var kills = {};
                var tmp, kid;
                loop: while(true){
                    tmp = null;
                    switch(step.tag){
                        case FORKED:
                            if (step._3 === EMPTY) {
                                tmp = fibers[step._1];
                                kills[count++] = tmp.kill(error, function(result) {
                                    return function() {
                                        count--;
                                        if (count === 0) cb(result)();
                                    };
                                });
                            }
                            // Terminal case.
                            if (head === null) break loop;
                            // Go down the right side of the tree.
                            step = head._2;
                            if (tail === null) head = null;
                            else {
                                head = tail._1;
                                tail = tail._2;
                            }
                            break;
                        case MAP:
                            step = step._2;
                            break;
                        case APPLY:
                        case ALT:
                            if (head) tail = new Aff(CONS, head, tail);
                            head = step;
                            step = step._1;
                            break;
                    }
                }
                if (count === 0) cb(util.right(void 0))();
                else {
                    // Run the cancelation effects. We alias `count` because it's mutable.
                    kid = 0;
                    tmp = count;
                    for(; kid < tmp; kid++)kills[kid] = kills[kid]();
                }
                return kills;
            }
            // When a fiber resolves, we need to bubble back up the tree with the
            // result, computing the applicative nodes.
            function join(result, head, tail) {
                var fail, step, lhs, rhs, tmp, kid;
                if (util.isLeft(result)) {
                    fail = result;
                    step = null;
                } else {
                    step = result;
                    fail = null;
                }
                loop: while(true){
                    lhs = null;
                    rhs = null;
                    tmp = null;
                    kid = null;
                    // We should never continue if the entire tree has been interrupted.
                    if (interrupt !== null) return;
                    // We've made it all the way to the root of the tree, which means
                    // the tree has fully evaluated.
                    if (head === null) {
                        cb1(fail || step)();
                        return;
                    }
                    // The tree has already been computed, so we shouldn't try to do it
                    // again. This should never happen.
                    // TODO: Remove this?
                    if (head._3 !== EMPTY) return;
                    switch(head.tag){
                        case MAP:
                            if (fail === null) {
                                head._3 = util.right(head._1(util.fromRight(step)));
                                step = head._3;
                            } else head._3 = fail;
                            break;
                        case APPLY:
                            lhs = head._1._3;
                            rhs = head._2._3;
                            // If we have a failure we should kill the other side because we
                            // can't possible yield a result anymore.
                            if (fail) {
                                head._3 = fail;
                                tmp = true;
                                kid = killId++;
                                kills1[kid] = kill(early, fail === lhs ? head._2 : head._1, function() {
                                    return function() {
                                        delete kills1[kid];
                                        if (tmp) tmp = false;
                                        else if (tail === null) join(fail, null, null);
                                        else join(fail, tail._1, tail._2);
                                    };
                                });
                                if (tmp) {
                                    tmp = false;
                                    return;
                                }
                            } else if (lhs === EMPTY || rhs === EMPTY) // We can only proceed if both sides have resolved.
                            return;
                            else {
                                step = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                                head._3 = step;
                            }
                            break;
                        case ALT:
                            lhs = head._1._3;
                            rhs = head._2._3;
                            // We can only proceed if both have resolved or we have a success
                            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) return;
                            // If both sides resolve with an error, we should continue with the
                            // first error
                            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                                fail = step === lhs ? rhs : lhs;
                                step = null;
                                head._3 = fail;
                            } else {
                                head._3 = step;
                                tmp = true;
                                kid = killId++;
                                // Once a side has resolved, we need to cancel the side that is still
                                // pending before we can continue.
                                kills1[kid] = kill(early, step === lhs ? head._2 : head._1, function() {
                                    return function() {
                                        delete kills1[kid];
                                        if (tmp) tmp = false;
                                        else if (tail === null) join(step, null, null);
                                        else join(step, tail._1, tail._2);
                                    };
                                });
                                if (tmp) {
                                    tmp = false;
                                    return;
                                }
                            }
                            break;
                    }
                    if (tail === null) head = null;
                    else {
                        head = tail._1;
                        tail = tail._2;
                    }
                }
            }
            function resolve(fiber) {
                return function(result) {
                    return function() {
                        delete fibers[fiber._1];
                        fiber._3 = result;
                        join(result, fiber._2._1, fiber._2._2);
                    };
                };
            }
            // Walks the applicative tree, substituting non-applicative nodes with
            // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
            // as a mutable slot for memoization. In an unresolved state, the `_3`
            // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
            // the left side first, because both operations are left-associative. As
            // we `RETURN` from those branches, we then walk the right side.
            function run() {
                var status = CONTINUE;
                var step = par1;
                var head = null;
                var tail = null;
                var tmp, fid;
                loop: while(true){
                    tmp = null;
                    fid = null;
                    switch(status){
                        case CONTINUE:
                            switch(step.tag){
                                case MAP:
                                    if (head) tail = new Aff(CONS, head, tail);
                                    head = new Aff(MAP, step._1, EMPTY, EMPTY);
                                    step = step._2;
                                    break;
                                case APPLY:
                                    if (head) tail = new Aff(CONS, head, tail);
                                    head = new Aff(APPLY, EMPTY, step._2, EMPTY);
                                    step = step._1;
                                    break;
                                case ALT:
                                    if (head) tail = new Aff(CONS, head, tail);
                                    head = new Aff(ALT, EMPTY, step._2, EMPTY);
                                    step = step._1;
                                    break;
                                default:
                                    // When we hit a leaf value, we suspend the stack in the `FORKED`.
                                    // When the fiber resolves, it can bubble back up the tree.
                                    fid = fiberId++;
                                    status = RETURN;
                                    tmp = step;
                                    step = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
                                    tmp = Fiber(util, supervisor, tmp);
                                    tmp.onComplete({
                                        rethrow: false,
                                        handler: resolve(step)
                                    })();
                                    fibers[fid] = tmp;
                                    if (supervisor) supervisor.register(tmp);
                            }
                            break;
                        case RETURN:
                            // Terminal case, we are back at the root.
                            if (head === null) break loop;
                            // If we are done with the right side, we need to continue down the
                            // left. Otherwise we should continue up the stack.
                            if (head._1 === EMPTY) {
                                head._1 = step;
                                status = CONTINUE;
                                step = head._2;
                                head._2 = EMPTY;
                            } else {
                                head._2 = step;
                                step = head;
                                if (tail === null) head = null;
                                else {
                                    head = tail._1;
                                    tail = tail._2;
                                }
                            }
                    }
                }
                // Keep a reference to the tree root so it can be cancelled.
                root = step;
                for(fid = 0; fid < fiberId; fid++)fibers[fid].run();
            }
            // Cancels the entire tree. If there are already subtrees being canceled,
            // we need to first cancel those joins. We will then add fresh joins for
            // all pending branches including those that were in the process of being
            // canceled.
            function cancel(error, cb) {
                interrupt = util.left(error);
                var innerKills;
                for(var kid1 in kills1)if (kills1.hasOwnProperty(kid1)) {
                    innerKills = kills1[kid1];
                    for(kid1 in innerKills)if (innerKills.hasOwnProperty(kid1)) innerKills[kid1]();
                }
                kills1 = null;
                var newKills = kill(error, root, cb);
                return function(killError) {
                    return new Aff(ASYNC, function(killCb) {
                        return function() {
                            for(var kid in newKills)if (newKills.hasOwnProperty(kid)) newKills[kid]();
                            return nonCanceler;
                        };
                    });
                };
            }
            run();
            return function(killError) {
                return new Aff(ASYNC, function(killCb) {
                    return function() {
                        return cancel(killError, killCb);
                    };
                });
            };
        }
        function sequential(util, supervisor, par) {
            return new Aff(ASYNC, function(cb) {
                return function() {
                    return runPar(util, supervisor, par, cb);
                };
            });
        }
        Aff.EMPTY = EMPTY;
        Aff.Pure = AffCtr(PURE);
        Aff.Throw = AffCtr(THROW);
        Aff.Catch = AffCtr(CATCH);
        Aff.Sync = AffCtr(SYNC);
        Aff.Async = AffCtr(ASYNC);
        Aff.Bind = AffCtr(BIND);
        Aff.Bracket = AffCtr(BRACKET);
        Aff.Fork = AffCtr(FORK);
        Aff.Seq = AffCtr(SEQ);
        Aff.ParMap = AffCtr(MAP);
        Aff.ParApply = AffCtr(APPLY);
        Aff.ParAlt = AffCtr(ALT);
        Aff.Fiber = Fiber;
        Aff.Supervisor = Supervisor;
        Aff.Scheduler = Scheduler;
        Aff.nonCanceler = nonCanceler;
        return Aff;
    }();
    exports._pure = Aff1.Pure;
    exports._throwError = Aff1.Throw;
    exports._catchError = function(aff) {
        return function(k) {
            return Aff1.Catch(aff, k);
        };
    };
    exports._map = function(f) {
        return function(aff) {
            if (aff.tag === Aff1.Pure.tag) return Aff1.Pure(f(aff._1));
            else return Aff1.Bind(aff, function(value) {
                return Aff1.Pure(f(value));
            });
        };
    };
    exports._bind = function(aff) {
        return function(k) {
            return Aff1.Bind(aff, k);
        };
    };
    exports._liftEffect = Aff1.Sync;
    exports._parAffMap = function(f) {
        return function(aff) {
            return Aff1.ParMap(f, aff);
        };
    };
    exports._parAffApply = function(aff1) {
        return function(aff2) {
            return Aff1.ParApply(aff1, aff2);
        };
    };
    exports.makeAff = Aff1.Async;
    exports._makeFiber = function(util, aff) {
        return function() {
            return Aff1.Fiber(util, null, aff);
        };
    };
    exports._sequential = Aff1.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
    $PS["Effect.Class"] = $PS["Effect.Class"] || {};
    var exports = $PS["Effect.Class"];
    var Control_Category = $PS["Control.Category"];
    var Effect = $PS["Effect"];
    var monadEffectEffect = {
        liftEffect: Control_Category.identity(Control_Category.categoryFn),
        Monad0: function() {
            return Effect.monadEffect;
        }
    };
    var liftEffect = function(dict) {
        return dict.liftEffect;
    };
    exports["liftEffect"] = liftEffect;
    exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
    // module Partial.Unsafe
    exports._unsafePartial = function(f) {
        return f();
    };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    // module Partial
    exports._crashWith = function(msg) {
        throw new Error(msg);
    };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
    $PS["Partial"] = $PS["Partial"] || {};
    var exports = $PS["Partial"];
    var $foreign = $PS["Partial"];
    var crashWith = function() {
        return $foreign["_crashWith"];
    };
    exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
    $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
    var exports = $PS["Partial.Unsafe"];
    var $foreign = $PS["Partial.Unsafe"];
    var Partial = $PS["Partial"];
    var unsafePartial = $foreign["_unsafePartial"];
    var unsafeCrashWith = function(msg) {
        return unsafePartial(function() {
            return Partial.crashWith()(msg);
        });
    };
    exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
    $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
    var exports = $PS["Effect.Aff"];
    var $foreign = $PS["Effect.Aff"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var Control_Monad = $PS["Control.Monad"];
    var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
    var Control_Parallel = $PS["Control.Parallel"];
    var Control_Parallel_Class = $PS["Control.Parallel.Class"];
    var Data_Either = $PS["Data.Either"];
    var Data_Foldable = $PS["Data.Foldable"];
    var Data_Function = $PS["Data.Function"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Unit = $PS["Data.Unit"];
    var Effect = $PS["Effect"];
    var Effect_Class = $PS["Effect.Class"];
    var Partial_Unsafe = $PS["Partial.Unsafe"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var Canceler = function(x) {
        return x;
    };
    var functorParAff = {
        map: $foreign["_parAffMap"]
    };
    var functorAff = {
        map: $foreign["_map"]
    };
    var ffiUtil = function() {
        var unsafeFromRight = function(v) {
            if (v instanceof Data_Either.Right) return v.value0;
            if (v instanceof Data_Either.Left) return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
            throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [
                v.constructor.name
            ]);
        };
        var unsafeFromLeft = function(v) {
            if (v instanceof Data_Either.Left) return v.value0;
            if (v instanceof Data_Either.Right) return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
            throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [
                v.constructor.name
            ]);
        };
        var isLeft = function(v) {
            if (v instanceof Data_Either.Left) return true;
            if (v instanceof Data_Either.Right) return false;
            throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [
                v.constructor.name
            ]);
        };
        return {
            isLeft: isLeft,
            fromLeft: unsafeFromLeft,
            fromRight: unsafeFromRight,
            left: Data_Either.Left.create,
            right: Data_Either.Right.create
        };
    }();
    var makeFiber = function(aff) {
        return $foreign["_makeFiber"](ffiUtil, aff);
    };
    var launchAff = function(aff) {
        return function __do() {
            var fiber = makeFiber(aff)();
            fiber.run();
            return fiber;
        };
    };
    var launchAff_ = function() {
        var $40 = Data_Functor["void"](Effect.functorEffect);
        return function($41) {
            return $40(launchAff($41));
        };
    }();
    var applyParAff = {
        apply: $foreign["_parAffApply"],
        Functor0: function() {
            return functorParAff;
        }
    };
    var monadAff = {
        Applicative0: function() {
            return applicativeAff;
        },
        Bind1: function() {
            return bindAff;
        }
    };
    var bindAff = {
        bind: $foreign["_bind"],
        Apply0: function() {
            return applyAff;
        }
    };
    var applyAff = {
        apply: Control_Monad.ap(monadAff),
        Functor0: function() {
            return functorAff;
        }
    };
    var applicativeAff = {
        pure: $foreign["_pure"],
        Apply0: function() {
            return applyAff;
        }
    };
    var monadEffectAff = {
        liftEffect: $foreign["_liftEffect"],
        Monad0: function() {
            return monadAff;
        }
    };
    var effectCanceler = function() {
        var $42 = Effect_Class.liftEffect(monadEffectAff);
        return function($43) {
            return Canceler(Data_Function["const"]($42($43)));
        };
    }();
    var killFiber = function(e) {
        return function(v) {
            return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function(v1) {
                if (v1) return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
                return $foreign.makeAff(function(k) {
                    return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
                });
            });
        };
    };
    var monadThrowAff = {
        throwError: $foreign["_throwError"],
        Monad0: function() {
            return monadAff;
        }
    };
    var monadErrorAff = {
        catchError: $foreign["_catchError"],
        MonadThrow0: function() {
            return monadThrowAff;
        }
    };
    var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
    var parallelAff = {
        parallel: Unsafe_Coerce.unsafeCoerce,
        sequential: $foreign["_sequential"],
        Monad0: function() {
            return monadAff;
        },
        Applicative1: function() {
            return applicativeParAff;
        }
    };
    var applicativeParAff = {
        pure: function() {
            var $50 = Control_Parallel_Class.parallel(parallelAff);
            var $51 = Control_Applicative.pure(applicativeAff);
            return function($52) {
                return $50($51($52));
            };
        }(),
        Apply0: function() {
            return applyParAff;
        }
    };
    var semigroupCanceler = {
        append: function(v) {
            return function(v1) {
                return function(err) {
                    return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([
                        v(err),
                        v1(err)
                    ]);
                };
            };
        }
    };
    var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
    var monoidCanceler = {
        mempty: nonCanceler,
        Semigroup0: function() {
            return semigroupCanceler;
        }
    };
    exports["launchAff"] = launchAff;
    exports["launchAff_"] = launchAff_;
    exports["attempt"] = attempt;
    exports["killFiber"] = killFiber;
    exports["applicativeAff"] = applicativeAff;
    exports["bindAff"] = bindAff;
    exports["monadErrorAff"] = monadErrorAff;
    exports["monadEffectAff"] = monadEffectAff;
    exports["monoidCanceler"] = monoidCanceler;
    exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
    exports.tagOf = function(value) {
        return Object.prototype.toString.call(value).slice(8, -1);
    };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
    $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
    var exports = $PS["Data.Boolean"];
    var otherwise = true;
    exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
    $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
    var exports = $PS["Data.List.NonEmpty"];
    var Data_List_Types = $PS["Data.List.Types"];
    var Data_NonEmpty = $PS["Data.NonEmpty"];
    var singleton = function() {
        var $171 = Data_NonEmpty.singleton(Data_List_Types.plusList);
        return function($172) {
            return Data_List_Types.NonEmptyList($171($172));
        };
    }();
    exports["singleton"] = singleton;
})(PS);
(function($PS) {
    $PS["Foreign"] = $PS["Foreign"] || {};
    var exports = $PS["Foreign"];
    var $foreign = $PS["Foreign"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
    var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
    var Data_Boolean = $PS["Data.Boolean"];
    var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var TypeMismatch1 = function() {
        function TypeMismatch(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        }
        TypeMismatch.create = function(value0) {
            return function(value1) {
                return new TypeMismatch(value0, value1);
            };
        };
        return TypeMismatch;
    }();
    var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
    var fail = function(dictMonad) {
        var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
        return function($119) {
            return $118(Data_List_NonEmpty.singleton($119));
        };
    };
    var unsafeReadTagged = function(dictMonad) {
        return function(tag) {
            return function(value) {
                if ($foreign.tagOf(value) === tag) return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
                if (Data_Boolean.otherwise) return fail(dictMonad)(new TypeMismatch1(tag, $foreign.tagOf(value)));
                throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [
                    tag.constructor.name,
                    value.constructor.name
                ]);
            };
        };
    };
    var readString = function(dictMonad) {
        return unsafeReadTagged(dictMonad)("String");
    };
    exports["unsafeReadTagged"] = unsafeReadTagged;
    exports["readString"] = readString;
})(PS);
(function($PS) {
    $PS["Control.Promise"] = $PS["Control.Promise"] || {};
    var exports = $PS["Control.Promise"];
    var $foreign = $PS["Control.Promise"];
    var Control_Alt = $PS["Control.Alt"];
    var Control_Bind = $PS["Control.Bind"];
    var Control_Category = $PS["Control.Category"];
    var Control_Monad_Except = $PS["Control.Monad.Except"];
    var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
    var Data_Either = $PS["Data.Either"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Identity = $PS["Data.Identity"];
    var Data_List_Types = $PS["Data.List.Types"];
    var Data_Monoid = $PS["Data.Monoid"];
    var Effect = $PS["Effect"];
    var Effect_Aff = $PS["Effect.Aff"];
    var Effect_Class = $PS["Effect.Class"];
    var Effect_Exception = $PS["Effect.Exception"];
    var Foreign = $PS["Foreign"];
    var toAff$prime = function(customCoerce) {
        return function(p) {
            return Effect_Aff.makeAff(function(cb) {
                return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function($1) {
                    return cb(Data_Either.Left.create(customCoerce($1)))();
                })(function($2) {
                    return cb(Data_Either.Right.create($2))();
                }));
            });
        };
    };
    var coerce = function(fn) {
        return Data_Either.either(function(v) {
            return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
        })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
    };
    var toAff = toAff$prime(coerce);
    var toAffE = function(f) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
    };
    exports["toAffE"] = toAffE;
})(PS);
(function($PS) {
    $PS["Data.Array"] = $PS["Data.Array"] || {};
    var exports = $PS["Data.Array"];
    var Data_Foldable = $PS["Data.Foldable"];
    var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
    exports["foldl"] = foldl;
})(PS);
(function($PS) {
    $PS["Data.Eq"] = $PS["Data.Eq"] || {};
    var exports = $PS["Data.Eq"];
    var eqUnit = {
        eq: function(v) {
            return function(v1) {
                return true;
            };
        }
    };
    var eq = function(dict) {
        return dict.eq;
    };
    exports["eq"] = eq;
    exports["eqUnit"] = eqUnit;
})(PS);
(function(exports) {
    exports.mkFn2 = function(fn) {
        /* jshint maxparams: 2 */ return function(a, b) {
            return fn(a)(b);
        };
    };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
    $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
    var exports = $PS["Data.Function.Uncurried"];
    var $foreign = $PS["Data.Function.Uncurried"];
    exports["mkFn2"] = $foreign.mkFn2;
})(PS);
(function($PS) {
    $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
    var exports = $PS["Data.Maybe"];
    var Data_Functor = $PS["Data.Functor"];
    var Nothing1 = function() {
        function Nothing() {}
        Nothing.value = new Nothing();
        return Nothing;
    }();
    var Just1 = function() {
        function Just(value0) {
            this.value0 = value0;
        }
        Just.create = function(value0) {
            return new Just(value0);
        };
        return Just;
    }();
    var functorMaybe = {
        map: function(v) {
            return function(v1) {
                if (v1 instanceof Just1) return new Just1(v(v1.value0));
                return Nothing1.value;
            };
        }
    };
    var applyMaybe = {
        apply: function(v) {
            return function(v1) {
                if (v instanceof Just1) return Data_Functor.map(functorMaybe)(v.value0)(v1);
                if (v instanceof Nothing1) return Nothing1.value;
                throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            };
        },
        Functor0: function() {
            return functorMaybe;
        }
    };
    var applicativeMaybe = {
        pure: Just1.create,
        Apply0: function() {
            return applyMaybe;
        }
    };
    exports["Nothing"] = Nothing1;
    exports["Just"] = Just1;
    exports["applicativeMaybe"] = applicativeMaybe;
})(PS);
(function(exports) {
    exports.nullable = function(a, r, f) {
        return a == null ? r : f(a);
    };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
    $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
    var exports = $PS["Data.Nullable"];
    var $foreign = $PS["Data.Nullable"];
    var Data_Maybe = $PS["Data.Maybe"];
    var toMaybe = function(n) {
        return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
    };
    exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
    // jshint maxparams: 3
    exports.traverseArrayImpl = function() {
        function array1(a) {
            return [
                a
            ];
        }
        function array2(a) {
            return function(b) {
                return [
                    a,
                    b
                ];
            };
        }
        function array3(a) {
            return function(b) {
                return function(c) {
                    return [
                        a,
                        b,
                        c
                    ];
                };
            };
        }
        function concat2(xs) {
            return function(ys) {
                return xs.concat(ys);
            };
        }
        return function(apply) {
            return function(map) {
                return function(pure) {
                    return function(f) {
                        return function(array) {
                            function go(bot, top) {
                                switch(top - bot){
                                    case 0:
                                        return pure([]);
                                    case 1:
                                        return map(array1)(f(array[bot]));
                                    case 2:
                                        return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                                    case 3:
                                        return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                                    default:
                                        // This slightly tricky pivot selection aims to produce two
                                        // even-length partitions where possible.
                                        var pivot = bot + Math.floor((top - bot) / 4) * 2;
                                        return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                                }
                            }
                            return go(0, array.length);
                        };
                    };
                };
            };
        };
    }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
    $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
    var exports = $PS["Data.Traversable"];
    var $foreign = $PS["Data.Traversable"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Apply = $PS["Control.Apply"];
    var Control_Category = $PS["Control.Category"];
    var Data_Foldable = $PS["Data.Foldable"];
    var Data_Functor = $PS["Data.Functor"];
    var traverse = function(dict) {
        return dict.traverse;
    };
    var sequenceDefault = function(dictTraversable) {
        return function(dictApplicative) {
            return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
    var traversableArray = {
        traverse: function(dictApplicative) {
            return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
        },
        sequence: function(dictApplicative) {
            return sequenceDefault(traversableArray)(dictApplicative);
        },
        Functor0: function() {
            return Data_Functor.functorArray;
        },
        Foldable1: function() {
            return Data_Foldable.foldableArray;
        }
    };
    var sequence = function(dict) {
        return dict.sequence;
    };
    exports["sequence"] = sequence;
    exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
    $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
    var exports = $PS["Data.Tuple"];
    var Tuple1 = function() {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        }
        Tuple.create = function(value0) {
            return function(value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    }();
    exports["Tuple"] = Tuple1;
})(PS);
(function(exports) {
    exports.log = function(s) {
        return function() {
            console.log(s);
        };
    };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
    $PS["Effect.Console"] = $PS["Effect.Console"] || {};
    var exports = $PS["Effect.Console"];
    var $foreign = $PS["Effect.Console"];
    exports["log"] = $foreign.log;
})(PS);
(function($PS) {
    $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
    var exports = $PS["Effect.Class.Console"];
    var Effect_Class = $PS["Effect.Class"];
    var Effect_Console = $PS["Effect.Console"];
    var log = function(dictMonadEffect) {
        var $30 = Effect_Class.liftEffect(dictMonadEffect);
        return function($31) {
            return $30(Effect_Console.log($31));
        };
    };
    exports["log"] = log;
})(PS);
(function(exports) {
    exports.unsafePerformEffect = function(f) {
        return f();
    };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
    $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
    var exports = $PS["Effect.Unsafe"];
    var $foreign = $PS["Effect.Unsafe"];
    exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
    const React = require('react');
    const createElement = React.createElement;
    const { Row , Col , Button , Image , Menu , Card  } = require('antd');
    const { default: Search  } = require('antd/lib/input/Search');
    const createProps = (ps)=>{
        if (ps && ps.props) {
            props = Object.assign(ps, ps.props);
            delete props.props;
            return props;
        } else return ps;
    };
    exports.element = (component)=>(ps)=>{
            const props = createProps(ps);
            return Array.isArray(props.children) ? createElement.apply(null, [
                component,
                props
            ].concat(props.children)) : createElement(component, props);
        }
    ;
    exports._antdRow = Row;
    exports._antdCol = Col;
    exports._antdImage = Image;
    exports._antdMenu = Menu;
    exports._antdMenuItem = Menu.Item;
    exports._antdSearch = Search;
    exports._antdCard = Card;
})(PS["Elements.Antd.Elements"] = PS["Elements.Antd.Elements"] || {});
(function(exports) {
    const ReactDOM = require("react-dom");
    exports.renderThen = (jsx)=>(node)=>(callback)=>()=>ReactDOM.render(jsx, node, callback)
    ;
})(PS["React.Basic.DOM"] = PS["React.Basic.DOM"] || {});
(function($PS) {
    $PS["React.Basic.DOM"] = $PS["React.Basic.DOM"] || {};
    var exports = $PS["React.Basic.DOM"];
    var $foreign = $PS["React.Basic.DOM"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Data_Unit = $PS["Data.Unit"];
    var Effect = $PS["Effect"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var text = Unsafe_Coerce.unsafeCoerce;
    var render$prime = $foreign.renderThen;
    var render = function(jsx) {
        return function(node) {
            return render$prime(jsx)(node)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
        };
    };
    exports["render"] = render;
    exports["text"] = text;
})(PS);
(function($PS) {
    $PS["Elements.Antd.Elements"] = $PS["Elements.Antd.Elements"] || {};
    var exports = $PS["Elements.Antd.Elements"];
    var $foreign = $PS["Elements.Antd.Elements"];
    var React_Basic_DOM = $PS["React.Basic.DOM"];
    var antdSearch = $foreign.element($foreign["_antdSearch"]);
    var antdRow = function() {
        return function(props) {
            return function(children) {
                return $foreign.element($foreign["_antdRow"])({
                    children: children,
                    props: props
                });
            };
        };
    };
    var antdMenuItem = function(str) {
        return $foreign.element($foreign["_antdMenuItem"])({
            children: [
                React_Basic_DOM.text(str)
            ]
        });
    };
    var antdMenu = function() {
        return function(props) {
            return function(children) {
                return $foreign.element($foreign["_antdMenu"])({
                    props: props,
                    children: children
                });
            };
        };
    };
    var antdImage = function() {
        return $foreign.element($foreign["_antdImage"]);
    };
    var antdCol = function() {
        return function(props) {
            return function(children) {
                return $foreign.element($foreign["_antdCol"])({
                    props: props,
                    children: children
                });
            };
        };
    };
    var antdCard = function() {
        return function(props) {
            return function(children) {
                return $foreign.element($foreign["_antdCard"])({
                    props: props,
                    children: children
                });
            };
        };
    };
    exports["antdRow"] = antdRow;
    exports["antdCol"] = antdCol;
    exports["antdImage"] = antdImage;
    exports["antdMenu"] = antdMenu;
    exports["antdMenuItem"] = antdMenuItem;
    exports["antdSearch"] = antdSearch;
    exports["antdCard"] = antdCard;
})(PS);
(function(exports) {
    exports.decodeResponse = (constructor)=>constructor
    ;
})(PS["Internal.Requests"] = PS["Internal.Requests"] || {});
(function(exports) {
    exports._fetch = function(fetchImpl) {
        return function(url) {
            return function(options) {
                return function() {
                    return fetchImpl(url, options).catch(function(e) {
                        // we have to wrap node-fetch's non-Error error :(
                        throw new Error(e);
                    });
                };
            };
        };
    };
    exports.jsonImpl = function(response) {
        return function() {
            return response.json().catch(function(e) {
                throw new Error(e);
            });
        };
    };
})(PS["Milkis"] = PS["Milkis"] || {});
(function($PS) {
    $PS["Milkis"] = $PS["Milkis"] || {};
    var exports = $PS["Milkis"];
    var $foreign = $PS["Milkis"];
    var Control_Promise = $PS["Control.Promise"];
    var json = function(res) {
        return Control_Promise.toAffE($foreign.jsonImpl(res));
    };
    var getMethod = "GET";
    var fetch = function(impl) {
        return function() {
            return function(url$prime) {
                return function(opts) {
                    return Control_Promise.toAffE($foreign["_fetch"](impl)(url$prime)(opts));
                };
            };
        };
    };
    exports["getMethod"] = getMethod;
    exports["fetch"] = fetch;
    exports["json"] = json;
})(PS);
(function(exports) {
    exports.windowFetch = window.fetch;
})(PS["Milkis.Impl.Window"] = PS["Milkis.Impl.Window"] || {});
(function($PS) {
    $PS["Milkis.Impl.Window"] = $PS["Milkis.Impl.Window"] || {};
    var exports = $PS["Milkis.Impl.Window"];
    var $foreign = $PS["Milkis.Impl.Window"];
    exports["windowFetch"] = $foreign.windowFetch;
})(PS);
(function($PS) {
    $PS["Internal.Requests"] = $PS["Internal.Requests"] || {};
    var exports = $PS["Internal.Requests"];
    var $foreign = $PS["Internal.Requests"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var Data_Either = $PS["Data.Either"];
    var Data_Maybe = $PS["Data.Maybe"];
    var Effect_Aff = $PS["Effect.Aff"];
    var Milkis = $PS["Milkis"];
    var Milkis_Impl_Window = $PS["Milkis.Impl.Window"];
    var Release1 = function() {
        function Release(value0) {
            this.value0 = value0;
        }
        Release.create = function(value0) {
            return new Release(value0);
        };
        return Release;
    }();
    var fetch = Milkis.fetch(Milkis_Impl_Window.windowFetch);
    var apiUrl = "https://api.discogs.com";
    var makeRequest = function(method) {
        return function(path) {
            return function(constructor) {
                return function(v) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(fetch()(apiUrl + path)({
                        method: method
                    })))(function(_res) {
                        if (_res instanceof Data_Either.Left) return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                        if (_res instanceof Data_Either.Right) return Control_Bind.bind(Effect_Aff.bindAff)(Milkis.json(_res.value0))(function(j) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just($foreign.decodeResponse(constructor)(j)));
                        });
                        throw new Error("Failed pattern match at Internal.Requests (line 39, column 3 - line 43, column 49): " + [
                            _res.constructor.name
                        ]);
                    });
                };
            };
        };
    };
    var get = makeRequest(Milkis.getMethod);
    exports["Release"] = Release1;
    exports["get"] = get;
})(PS);
(function(exports) {
    const React = require("react");
    const createElement = React.createElement;
    const Fragment = React.Fragment;
    exports.element = (component)=>(props)=>Array.isArray(props.children) ? createElement.apply(null, [
                component,
                props
            ].concat(props.children)) : createElement(component, props)
    ;
})(PS["React.Basic"] = PS["React.Basic"] || {});
(function($PS) {
    $PS["React.Basic"] = $PS["React.Basic"] || {};
    var exports = $PS["React.Basic"];
    var $foreign = $PS["React.Basic"];
    exports["element"] = $foreign.element;
})(PS);
(function(exports) {
    const React = require("react");
    exports.unsafeCreateDOMComponent_ = (createElement)=>(el)=>{
            const flattenDataProp = (props, ref)=>{
                var data = null;
                if (props._data != null) {
                    data = {
                        _data: undefined
                    };
                    Object.entries(props._data).forEach(function(entry) {
                        data["data-" + entry[0]] = entry[1];
                    });
                }
                var aria = null;
                if (props._aria != null) {
                    aria = {
                        _aria: undefined
                    };
                    Object.entries(props._aria).forEach(function(entry) {
                        aria["aria-" + entry[0]] = entry[1];
                    });
                }
                return Object.assign({
                    ref
                }, props, data, aria);
            };
            return ()=>{
                const c = React.forwardRef((props, ref)=>createElement(el)(flattenDataProp(props, ref))
                );
                c.displayName = el;
                return c;
            };
        }
    ;
})(PS["React.Basic.DOM.Internal"] = PS["React.Basic.DOM.Internal"] || {});
(function($PS) {
    $PS["React.Basic.DOM.Internal"] = $PS["React.Basic.DOM.Internal"] || {};
    var exports = $PS["React.Basic.DOM.Internal"];
    var $foreign = $PS["React.Basic.DOM.Internal"];
    var React_Basic = $PS["React.Basic"];
    var unsafeCreateDOMComponent = $foreign.unsafeCreateDOMComponent_(React_Basic.element);
    exports["unsafeCreateDOMComponent"] = unsafeCreateDOMComponent;
})(PS);
(function($PS) {
    $PS["React.Basic.DOM.Generated"] = $PS["React.Basic.DOM.Generated"] || {};
    var exports = $PS["React.Basic.DOM.Generated"];
    var Effect_Unsafe = $PS["Effect.Unsafe"];
    var React_Basic = $PS["React.Basic"];
    var React_Basic_DOM_Internal = $PS["React.Basic.DOM.Internal"];
    var _span$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("span"));
    var span$prime = function() {
        return _span$prime;
    };
    var span = function() {
        return React_Basic.element(span$prime());
    };
    var _div$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("div"));
    var div$prime = function() {
        return _div$prime;
    };
    var div = function() {
        return React_Basic.element(div$prime());
    };
    var div_ = function(children) {
        return div()({
            children: children
        });
    };
    exports["div"] = div;
    exports["div_"] = div_;
    exports["span"] = span;
})(PS);
(function(exports) {
    var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();
    const React = require("react");
    const useEqCache = (eq, a)=>{
        _s();
        const memoRef = React.useRef(a);
        if (memoRef.current !== a && !eq(memoRef.current, a)) memoRef.current = a;
        return memoRef.current;
    };
    _s(useEqCache, "FPKR3Wgpr84RLpAeB+51UQn6ph8=");
    exports.useState_ = _s1((tuple, initialState)=>{
        _s1();
        const r = React.useState(typeof initialState === 'function' ? ()=>initialState
         : initialState);
        const state = r[0];
        const setState = r[1];
        if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) setState.$$reactBasicHooks$$cachedSetState = (update)=>()=>setState(update)
        ;
        return tuple(state, setState.$$reactBasicHooks$$cachedSetState);
    }, "5pb7X7PDFt4zzS3xa1wgIV0lQqE=");
    exports.useEffect_ = _s2((eq, deps, effect)=>{
        _s2();
        const memoizedKey = useEqCache(eq, deps);
        React.useEffect(effect, [
            memoizedKey
        ]);
    }, "scSkEikl4gRw0HX0Wy8oc66lLag=", false, function() {
        return [
            useEqCache
        ];
    });
    exports.unsafeSetDisplayName = (displayName, component)=>{
        component.displayName = displayName;
        component.toString = ()=>displayName
        ;
        return component;
    };
})(PS["React.Basic.Hooks"] = PS["React.Basic.Hooks"] || {});
(function($PS) {
    $PS["React.Basic.Hooks.Internal"] = $PS["React.Basic.Hooks.Internal"] || {};
    var exports = $PS["React.Basic.Hooks.Internal"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Apply = $PS["Control.Apply"];
    var Control_Bind_Indexed = $PS["Control.Bind.Indexed"];
    var Data_Functor = $PS["Data.Functor"];
    var Effect = $PS["Effect"];
    var Render = function(x) {
        return x;
    };
    var unsafeRenderEffect = Render;
    var unsafeHook = Render;
    var ixFunctorRender = {
        imap: function(f) {
            return function(v) {
                return Data_Functor.map(Effect.functorEffect)(f)(v);
            };
        }
    };
    var ixApplyRender = {
        iapply: function(v) {
            return function(v1) {
                return Control_Apply.apply(Effect.applyEffect)(v)(v1);
            };
        },
        IxFunctor0: function() {
            return ixFunctorRender;
        }
    };
    var ixBindRender = {
        ibind: function(v) {
            return function(f) {
                return function __do() {
                    var a = v();
                    var v1 = f(a);
                    return v1();
                };
            };
        },
        IxApply0: function() {
            return ixApplyRender;
        }
    };
    var functorRender = {
        map: function(f) {
            return function(v) {
                return Data_Functor.map(Effect.functorEffect)(f)(v);
            };
        }
    };
    var discard = function(dictIxBind) {
        return Control_Bind_Indexed.ibind(dictIxBind);
    };
    var coerceHook = function() {
        return function(v) {
            return v;
        };
    };
    var bind = function(dictIxBind) {
        return Control_Bind_Indexed.ibind(dictIxBind);
    };
    var applyRender = function(dictTypeEquals) {
        return {
            apply: function(v) {
                return function(v1) {
                    return Control_Apply.apply(Effect.applyEffect)(v)(v1);
                };
            },
            Functor0: function() {
                return functorRender;
            }
        };
    };
    var applicativeRender = function(dictTypeEquals) {
        return {
            pure: function(a) {
                return Control_Applicative.pure(Effect.applicativeEffect)(a);
            },
            Apply0: function() {
                return applyRender(dictTypeEquals);
            }
        };
    };
    exports["coerceHook"] = coerceHook;
    exports["unsafeHook"] = unsafeHook;
    exports["unsafeRenderEffect"] = unsafeRenderEffect;
    exports["bind"] = bind;
    exports["discard"] = discard;
    exports["ixBindRender"] = ixBindRender;
    exports["applicativeRender"] = applicativeRender;
})(PS);
(function($PS) {
    $PS["React.Basic.Hooks"] = $PS["React.Basic.Hooks"] || {};
    var exports = $PS["React.Basic.Hooks"];
    var $foreign = $PS["React.Basic.Hooks"];
    var Data_Eq = $PS["Data.Eq"];
    var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
    var Data_Tuple = $PS["Data.Tuple"];
    var React_Basic = $PS["React.Basic"];
    var React_Basic_Hooks_Internal = $PS["React.Basic.Hooks.Internal"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var useState = function(initialState) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
            return $foreign.useState_(Data_Function_Uncurried.mkFn2(Data_Tuple.Tuple.create), initialState);
        });
    };
    var useEffect = function(dictEq) {
        return function(deps) {
            return function(effect) {
                return React_Basic_Hooks_Internal.unsafeHook(function() {
                    return $foreign.useEffect_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, effect);
                });
            };
        };
    };
    var unsafeReactFunctionComponent = Unsafe_Coerce.unsafeCoerce;
    var unsafeDiscardRenderEffects = Unsafe_Coerce.unsafeCoerce;
    var unsafeReactComponent = function() {
        return function() {
            return function(name) {
                return function(renderFn) {
                    var c = unsafeReactFunctionComponent(function(props) {
                        return unsafeDiscardRenderEffects(renderFn(props))();
                    });
                    return function() {
                        return $foreign.unsafeSetDisplayName(name, c);
                    };
                };
            };
        };
    };
    var reactComponent = function() {
        return unsafeReactComponent;
    };
    var component = function(name) {
        return function(renderFn) {
            return function __do() {
                var c = reactComponent()()()(name)(function($19) {
                    return renderFn(function(v) {
                        return v.nested;
                    }($19));
                })();
                var $20 = React_Basic.element(c);
                return function($21) {
                    return $20(function(v) {
                        return {
                            nested: v
                        };
                    }($21));
                };
            };
        };
    };
    exports["component"] = component;
    exports["useState"] = useState;
    exports["useEffect"] = useEffect;
})(PS);
(function($PS) {
    $PS["React.Basic.Hooks.Aff"] = $PS["React.Basic.Hooks.Aff"] || {};
    var exports = $PS["React.Basic.Hooks.Aff"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
    var Data_Either = $PS["Data.Either"];
    var Data_Function = $PS["Data.Function"];
    var Data_Maybe = $PS["Data.Maybe"];
    var Effect = $PS["Effect"];
    var Effect_Aff = $PS["Effect.Aff"];
    var Effect_Class = $PS["Effect.Class"];
    var Effect_Exception = $PS["Effect.Exception"];
    var React_Basic_Hooks = $PS["React.Basic.Hooks"];
    var React_Basic_Hooks_Internal = $PS["React.Basic.Hooks.Internal"];
    var useAff = function(dictEq) {
        return function(deps) {
            return function(aff) {
                return React_Basic_Hooks_Internal.coerceHook()(React_Basic_Hooks_Internal.bind(React_Basic_Hooks_Internal.ixBindRender)(React_Basic_Hooks.useState(Data_Maybe.Nothing.value))(function(v) {
                    return React_Basic_Hooks_Internal.discard(React_Basic_Hooks_Internal.ixBindRender)(React_Basic_Hooks.useEffect(dictEq)(deps)(function __do() {
                        v.value1(Data_Function["const"](Data_Maybe.Nothing.value))();
                        var fiber = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(aff))(function(r) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(v.value1(function(v1) {
                                return new Data_Maybe.Just(r);
                            }));
                        }))();
                        return Effect_Aff.launchAff_(Effect_Aff.killFiber(Effect_Exception.error("Stale request cancelled"))(fiber));
                    }))(function() {
                        return React_Basic_Hooks_Internal.unsafeRenderEffect(function() {
                            if (v.value0 instanceof Data_Maybe.Just && v.value0.value0 instanceof Data_Either.Left) return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(v.value0.value0.value0);
                            if (v.value0 instanceof Data_Maybe.Just && v.value0.value0 instanceof Data_Either.Right) return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Maybe.Just(v.value0.value0.value0));
                            if (v.value0 instanceof Data_Maybe.Nothing) return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                            throw new Error("Failed pattern match at React.Basic.Hooks.Aff (line 53, column 24 - line 56, column 30): " + [
                                v.value0.constructor.name
                            ]);
                        }());
                    });
                }));
            };
        };
    };
    exports["useAff"] = useAff;
})(PS);
(function($PS) {
    $PS["Type.Equality"] = $PS["Type.Equality"] || {};
    var exports = $PS["Type.Equality"];
    var refl = {
        proof: function(a) {
            return a;
        },
        Coercible0: function() {
            return undefined;
        }
    };
    exports["refl"] = refl;
})(PS);
(function($PS) {
    var _s = $RefreshSig$();
    $PS["Elements.Catalogue"] = $PS["Elements.Catalogue"] || {};
    var exports = $PS["Elements.Catalogue"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Control_Bind = $PS["Control.Bind"];
    var Data_Array = $PS["Data.Array"];
    var Data_Eq = $PS["Data.Eq"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Maybe = $PS["Data.Maybe"];
    var Data_Traversable = $PS["Data.Traversable"];
    var Data_Unit = $PS["Data.Unit"];
    var Effect_Aff = $PS["Effect.Aff"];
    var Elements_Antd_Elements = $PS["Elements.Antd.Elements"];
    var Internal_Requests = $PS["Internal.Requests"];
    var React_Basic_DOM = $PS["React.Basic.DOM"];
    var React_Basic_DOM_Generated = $PS["React.Basic.DOM.Generated"];
    var React_Basic_Hooks = $PS["React.Basic.Hooks"];
    var React_Basic_Hooks_Aff = $PS["React.Basic.Hooks.Aff"];
    var React_Basic_Hooks_Internal = $PS["React.Basic.Hooks.Internal"];
    var Type_Equality = $PS["Type.Equality"];
    var wrapper = function(children) {
        return React_Basic_DOM_Generated.div()({
            className: "content",
            children: children
        });
    };
    var releases = [
        {
            id: "8634064",
            price: "25",
            condition: "VG+"
        },
        {
            id: "5666473",
            price: "20",
            condition: "VG+"
        },
        {
            id: "5548987",
            price: "25",
            condition: "VG+"
        },
        {
            id: "5830007",
            price: "25",
            condition: "VG+"
        }
    ];
    var releasesReq = Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function(v) {
        return Internal_Requests.get("/releases/" + v.id)(Internal_Requests.Release.create)(Data_Maybe.Nothing.value);
    })(releases)))(function(rs) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(rs));
    });
    var releaseImage = Elements_Antd_Elements.antdCol()({
        xs: 6,
        xl: 3
    })([
        Elements_Antd_Elements.antdImage()({
            src: "https://i.discogs.com/0NP2Vq7b3w76F2xfP5xbNIDo0bRyU-loUsSx-k9XC-g/rs:fit/g:sm/q:90/h:578/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTg2MzQw/NjQtMTQ2NTgyMDUy/Ni03MDc0LmpwZWc.jpeg",
            width: 150
        })
    ]);
    var getArtistName = Data_Array.foldl(function(acc) {
        return function(v) {
            return acc + v.name;
        };
    })("");
    var releaseContent = function(v) {
        return Elements_Antd_Elements.antdCol()({
            xs: 18,
            xl: 21
        })([
            Elements_Antd_Elements.antdRow()({
                className: "title"
            })([
                Elements_Antd_Elements.antdCol()({
                    span: 12
                })([
                    React_Basic_DOM_Generated.div_([
                        React_Basic_DOM_Generated.span()({
                            className: " bold",
                            children: [
                                React_Basic_DOM.text(getArtistName(v.value0.artists))
                            ]
                        })
                    ])
                ])
            ])
        ]);
    };
    var generateRelease = function(release) {
        return Elements_Antd_Elements.antdRow()({
            className: "item"
        })([
            Elements_Antd_Elements.antdCol()({
                span: 24
            })([
                Elements_Antd_Elements.antdCard()({
                    size: "small"
                })([
                    Elements_Antd_Elements.antdRow()({})([
                        releaseImage,
                        releaseContent(release)
                    ])
                ])
            ])
        ]);
    };
    var drawReleases = function(mbRs) {
        if (mbRs instanceof Data_Maybe.Just) return Data_Functor.map(Data_Functor.functorArray)(generateRelease)(mbRs.value0);
        if (mbRs instanceof Data_Maybe.Nothing) return [
            React_Basic_DOM.text("No releases")
        ];
        throw new Error("Failed pattern match at Elements.Catalogue (line 33, column 21 - line 35, column 38): " + [
            mbRs.constructor.name
        ]);
    };
    var mkCatalogue = React_Basic_Hooks.component("Catalogue")(_s(function(v) {
        _s();
        return React_Basic_Hooks_Internal.bind(React_Basic_Hooks_Internal.ixBindRender)(React_Basic_Hooks_Aff.useAff(Data_Eq.eqUnit)(Data_Unit.unit)(releasesReq))(function(res) {
            return Control_Applicative.pure(React_Basic_Hooks_Internal.applicativeRender(Type_Equality.refl))(wrapper(function() {
                if (res instanceof Data_Maybe.Just) return drawReleases(res.value0);
                if (res instanceof Data_Maybe.Nothing) return [
                    React_Basic_DOM.text("Loading...")
                ];
                throw new Error("Failed pattern match at Elements.Catalogue (line 82, column 20 - line 84, column 41): " + [
                    res.constructor.name
                ]);
            }()));
        });
    }, "w27ql58m/mzXSceJgkfYvDoUhjA=", false, function() {
        return [
            React_Basic_Hooks_Aff.useAff
        ];
    }));
    exports["mkCatalogue"] = mkCatalogue;
})(PS);
(function($PS) {
    $PS["Elements.Header"] = $PS["Elements.Header"] || {};
    var exports = $PS["Elements.Header"];
    var Control_Applicative = $PS["Control.Applicative"];
    var Data_Function = $PS["Data.Function"];
    var Elements_Antd_Elements = $PS["Elements.Antd.Elements"];
    var React_Basic_Hooks = $PS["React.Basic.Hooks"];
    var React_Basic_Hooks_Internal = $PS["React.Basic.Hooks.Internal"];
    var Type_Equality = $PS["Type.Equality"];
    var mkHeader = React_Basic_Hooks.component("Header")(Data_Function["const"](Control_Applicative.pure(React_Basic_Hooks_Internal.applicativeRender(Type_Equality.refl))(Elements_Antd_Elements.antdRow()({
        className: "header align-center"
    })([
        Elements_Antd_Elements.antdCol()({
            span: 4
        })([
            Elements_Antd_Elements.antdImage()({
                src: "https://morevi.ge/wp-content/uploads/2019/07/png-1.png",
                preview: false
            })
        ]),
        Elements_Antd_Elements.antdCol()({
            span: 14
        })([
            Elements_Antd_Elements.antdMenu()({
                mode: "horizontal"
            })([
                Elements_Antd_Elements.antdMenuItem("\u10d9\u10d0\u10da\u10d0\u10d7\u10d0"),
                Elements_Antd_Elements.antdMenuItem("\u10d9\u10d0\u10e2\u10d0\u10da\u10dd\u10d2\u10d8"),
                Elements_Antd_Elements.antdMenuItem("\u10ec\u10d4\u10e1\u10d4\u10d1\u10d8"),
                Elements_Antd_Elements.antdMenuItem("\u10e9\u10d4\u10db\u10d8 \u10d0\u10dc\u10d2\u10d0\u10e0\u10d8\u10e8\u10d8")
            ])
        ]),
        Elements_Antd_Elements.antdCol()({
            span: 6
        })([
            Elements_Antd_Elements.antdSearch({})
        ])
    ]))));
    exports["mkHeader"] = mkHeader;
})(PS);
(function(exports) {
    exports._getElementById = function(id) {
        return function(node) {
            return function() {
                return node.getElementById(id);
            };
        };
    };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function($PS) {
    $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
    var exports = $PS["Web.DOM.NonElementParentNode"];
    var $foreign = $PS["Web.DOM.NonElementParentNode"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Nullable = $PS["Data.Nullable"];
    var Effect = $PS["Effect"];
    var getElementById = function(eid) {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        var $1 = $foreign["_getElementById"](eid);
        return function($2) {
            return $0($1($2));
        };
    };
    exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
    exports.window = function() {
        return window;
    };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
    $PS["Web.HTML"] = $PS["Web.HTML"] || {};
    var exports = $PS["Web.HTML"];
    var $foreign = $PS["Web.HTML"];
    exports["window"] = $foreign.window;
})(PS);
(function($PS) {
    $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
    var exports = $PS["Web.HTML.HTMLDocument"];
    var Unsafe_Coerce = $PS["Unsafe.Coerce"];
    var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
    exports["toNonElementParentNode"] = toNonElementParentNode;
})(PS);
(function(exports) {
    exports.document = function(window) {
        return function() {
            return window.document;
        };
    };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
    $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
    var exports = $PS["Web.HTML.Window"];
    var $foreign = $PS["Web.HTML.Window"];
    exports["document"] = $foreign.document;
})(PS);
(function($PS) {
    $PS["Main"] = $PS["Main"] || {};
    var exports = $PS["Main"];
    var Control_Bind = $PS["Control.Bind"];
    var Data_Functor = $PS["Data.Functor"];
    var Data_Maybe = $PS["Data.Maybe"];
    var Effect = $PS["Effect"];
    var Effect_Class = $PS["Effect.Class"];
    var Effect_Class_Console = $PS["Effect.Class.Console"];
    var Elements_Catalogue = $PS["Elements.Catalogue"];
    var Elements_Header = $PS["Elements.Header"];
    var React_Basic_DOM = $PS["React.Basic.DOM"];
    var React_Basic_DOM_Generated = $PS["React.Basic.DOM.Generated"];
    var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
    var Web_HTML = $PS["Web.HTML"];
    var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
    var Web_HTML_Window = $PS["Web.HTML.Window"];
    var main = function __do() {
        var moreviApp = Control_Bind.bindFlipped(Effect.bindEffect)(Web_DOM_NonElementParentNode.getElementById("app"))(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toNonElementParentNode)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window)))();
        if (moreviApp instanceof Data_Maybe.Nothing) return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Could not find app")();
        if (moreviApp instanceof Data_Maybe.Just) {
            var header = Elements_Header.mkHeader();
            var catalogue = Elements_Catalogue.mkCatalogue();
            return React_Basic_DOM.render(React_Basic_DOM_Generated.div_([
                header({}),
                catalogue({})
            ]))(moreviApp.value0)();
        }
        throw new Error("Failed pattern match at Main (line 19, column 3 - line 30, column 12): " + [
            moreviApp.constructor.name
        ]);
    };
    exports["main"] = main;
})(PS);
PS["Main"].main();

  $parcel$ReactRefreshHelpers$d5eb.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"b4tPL","antd":"hI0Op","antd/lib/input/Search":"1OHv6","react-dom":"hKAbJ","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"gCa2M"}],"b4tPL":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"cW7F9"}],"cW7F9":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = '18.0.0-fc46dba67-20220329';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame1 = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame1.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame1.getCurrentStack = null;
    ReactDebugCurrentFrame1.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame1.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame1;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error1("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component1(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component1.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component1.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component1.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component1.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component1.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component1.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error1("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error1("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error1('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape('' + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error('React.Children.only expected to receive a single React element child.');
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error1("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error1("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject1 = payload._result;
            if (moduleObject1 === undefined) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject1);
            if (!('default' in moduleObject1)) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject1);
            return moduleObject1.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error1("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error1("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error1("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error1('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error1('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error1("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error1("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error1("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error1("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error1("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error1('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error1('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error1("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error1("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error1('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error1("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ('require' + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === 'undefined') error1("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error1("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue1 = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue1, resolve, reject);
                        } else resolve(returnValue1);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue1);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error1("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null)
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component1;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"hI0Op":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Affix", ()=>_affixDefault.default
);
parcelHelpers.export(exports, "Anchor", ()=>_anchorDefault.default
);
parcelHelpers.export(exports, "AutoComplete", ()=>_autoCompleteDefault.default
);
parcelHelpers.export(exports, "Alert", ()=>_alertDefault.default
);
parcelHelpers.export(exports, "Avatar", ()=>_avatarDefault.default
);
parcelHelpers.export(exports, "BackTop", ()=>_backTopDefault.default
);
parcelHelpers.export(exports, "Badge", ()=>_badgeDefault.default
);
parcelHelpers.export(exports, "Breadcrumb", ()=>_breadcrumbDefault.default
);
parcelHelpers.export(exports, "Button", ()=>_buttonDefault.default
);
parcelHelpers.export(exports, "Calendar", ()=>_calendarDefault.default
);
parcelHelpers.export(exports, "Card", ()=>_cardDefault.default
);
parcelHelpers.export(exports, "Collapse", ()=>_collapseDefault.default
);
parcelHelpers.export(exports, "Carousel", ()=>_carouselDefault.default
);
parcelHelpers.export(exports, "Cascader", ()=>_cascaderDefault.default
);
parcelHelpers.export(exports, "Checkbox", ()=>_checkboxDefault.default
);
parcelHelpers.export(exports, "Col", ()=>_colDefault.default
);
parcelHelpers.export(exports, "Comment", ()=>_commentDefault.default
);
parcelHelpers.export(exports, "ConfigProvider", ()=>_configProviderDefault.default
);
parcelHelpers.export(exports, "DatePicker", ()=>_datePickerDefault.default
);
parcelHelpers.export(exports, "Descriptions", ()=>_descriptionsDefault.default
);
parcelHelpers.export(exports, "Divider", ()=>_dividerDefault.default
);
parcelHelpers.export(exports, "Dropdown", ()=>_dropdownDefault.default
);
parcelHelpers.export(exports, "Drawer", ()=>_drawerDefault.default
);
parcelHelpers.export(exports, "Empty", ()=>_emptyDefault.default
);
parcelHelpers.export(exports, "Form", ()=>_formDefault.default
);
parcelHelpers.export(exports, "Grid", ()=>_gridDefault.default
);
parcelHelpers.export(exports, "Input", ()=>_inputDefault.default
);
parcelHelpers.export(exports, "Image", ()=>_imageDefault.default
);
parcelHelpers.export(exports, "InputNumber", ()=>_inputNumberDefault.default
);
parcelHelpers.export(exports, "Layout", ()=>_layoutDefault.default
);
parcelHelpers.export(exports, "List", ()=>_listDefault.default
);
parcelHelpers.export(exports, "message", ()=>_messageDefault.default
);
parcelHelpers.export(exports, "Menu", ()=>_menuDefault.default
);
parcelHelpers.export(exports, "Mentions", ()=>_mentionsDefault.default
);
parcelHelpers.export(exports, "Modal", ()=>_modalDefault.default
);
parcelHelpers.export(exports, "Statistic", ()=>_statisticDefault.default
);
parcelHelpers.export(exports, "notification", ()=>_notificationDefault.default
);
parcelHelpers.export(exports, "PageHeader", ()=>_pageHeaderDefault.default
);
parcelHelpers.export(exports, "Pagination", ()=>_paginationDefault.default
);
parcelHelpers.export(exports, "Popconfirm", ()=>_popconfirmDefault.default
);
parcelHelpers.export(exports, "Popover", ()=>_popoverDefault.default
);
parcelHelpers.export(exports, "Progress", ()=>_progressDefault.default
);
parcelHelpers.export(exports, "Radio", ()=>_radioDefault.default
);
parcelHelpers.export(exports, "Rate", ()=>_rateDefault.default
);
parcelHelpers.export(exports, "Result", ()=>_resultDefault.default
);
parcelHelpers.export(exports, "Row", ()=>_rowDefault.default
);
parcelHelpers.export(exports, "Select", ()=>_selectDefault.default
);
parcelHelpers.export(exports, "Skeleton", ()=>_skeletonDefault.default
);
parcelHelpers.export(exports, "Slider", ()=>_sliderDefault.default
);
parcelHelpers.export(exports, "Space", ()=>_spaceDefault.default
);
parcelHelpers.export(exports, "Spin", ()=>_spinDefault.default
);
parcelHelpers.export(exports, "Steps", ()=>_stepsDefault.default
);
parcelHelpers.export(exports, "Switch", ()=>_switchDefault.default
);
parcelHelpers.export(exports, "Table", ()=>_tableDefault.default
);
parcelHelpers.export(exports, "Transfer", ()=>_transferDefault.default
);
parcelHelpers.export(exports, "Tree", ()=>_treeDefault.default
);
parcelHelpers.export(exports, "TreeSelect", ()=>_treeSelectDefault.default
);
parcelHelpers.export(exports, "Tabs", ()=>_tabsDefault.default
);
parcelHelpers.export(exports, "Tag", ()=>_tagDefault.default
);
parcelHelpers.export(exports, "TimePicker", ()=>_timePickerDefault.default
);
parcelHelpers.export(exports, "Timeline", ()=>_timelineDefault.default
);
parcelHelpers.export(exports, "Tooltip", ()=>_tooltipDefault.default
);
parcelHelpers.export(exports, "Typography", ()=>_typographyDefault.default
);
parcelHelpers.export(exports, "Upload", ()=>_uploadDefault.default
);
parcelHelpers.export(exports, "version", ()=>_versionDefault.default
);
var _affix = require("./affix");
var _affixDefault = parcelHelpers.interopDefault(_affix);
var _anchor = require("./anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _autoComplete = require("./auto-complete");
var _autoCompleteDefault = parcelHelpers.interopDefault(_autoComplete);
var _alert = require("./alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _avatar = require("./avatar");
var _avatarDefault = parcelHelpers.interopDefault(_avatar);
var _backTop = require("./back-top");
var _backTopDefault = parcelHelpers.interopDefault(_backTop);
var _badge = require("./badge");
var _badgeDefault = parcelHelpers.interopDefault(_badge);
var _breadcrumb = require("./breadcrumb");
var _breadcrumbDefault = parcelHelpers.interopDefault(_breadcrumb);
var _button = require("./button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _calendar = require("./calendar");
var _calendarDefault = parcelHelpers.interopDefault(_calendar);
var _card = require("./card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _collapse = require("./collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _carousel = require("./carousel");
var _carouselDefault = parcelHelpers.interopDefault(_carousel);
var _cascader = require("./cascader");
var _cascaderDefault = parcelHelpers.interopDefault(_cascader);
var _checkbox = require("./checkbox");
var _checkboxDefault = parcelHelpers.interopDefault(_checkbox);
var _col = require("./col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _comment = require("./comment");
var _commentDefault = parcelHelpers.interopDefault(_comment);
var _configProvider = require("./config-provider");
var _configProviderDefault = parcelHelpers.interopDefault(_configProvider);
var _datePicker = require("./date-picker");
var _datePickerDefault = parcelHelpers.interopDefault(_datePicker);
var _descriptions = require("./descriptions");
var _descriptionsDefault = parcelHelpers.interopDefault(_descriptions);
var _divider = require("./divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _dropdown = require("./dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _drawer = require("./drawer");
var _drawerDefault = parcelHelpers.interopDefault(_drawer);
var _empty = require("./empty");
var _emptyDefault = parcelHelpers.interopDefault(_empty);
var _form = require("./form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _grid = require("./grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _input = require("./input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _image = require("./image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _inputNumber = require("./input-number");
var _inputNumberDefault = parcelHelpers.interopDefault(_inputNumber);
var _layout = require("./layout");
var _layoutDefault = parcelHelpers.interopDefault(_layout);
var _list = require("./list");
var _listDefault = parcelHelpers.interopDefault(_list);
var _message = require("./message");
var _messageDefault = parcelHelpers.interopDefault(_message);
var _menu = require("./menu");
var _menuDefault = parcelHelpers.interopDefault(_menu);
var _mentions = require("./mentions");
var _mentionsDefault = parcelHelpers.interopDefault(_mentions);
var _modal = require("./modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _statistic = require("./statistic");
var _statisticDefault = parcelHelpers.interopDefault(_statistic);
var _notification = require("./notification");
var _notificationDefault = parcelHelpers.interopDefault(_notification);
var _pageHeader = require("./page-header");
var _pageHeaderDefault = parcelHelpers.interopDefault(_pageHeader);
var _pagination = require("./pagination");
var _paginationDefault = parcelHelpers.interopDefault(_pagination);
var _popconfirm = require("./popconfirm");
var _popconfirmDefault = parcelHelpers.interopDefault(_popconfirm);
var _popover = require("./popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _progress = require("./progress");
var _progressDefault = parcelHelpers.interopDefault(_progress);
var _radio = require("./radio");
var _radioDefault = parcelHelpers.interopDefault(_radio);
var _rate = require("./rate");
var _rateDefault = parcelHelpers.interopDefault(_rate);
var _result = require("./result");
var _resultDefault = parcelHelpers.interopDefault(_result);
var _row = require("./row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _select = require("./select");
var _selectDefault = parcelHelpers.interopDefault(_select);
var _skeleton = require("./skeleton");
var _skeletonDefault = parcelHelpers.interopDefault(_skeleton);
var _slider = require("./slider");
var _sliderDefault = parcelHelpers.interopDefault(_slider);
var _space = require("./space");
var _spaceDefault = parcelHelpers.interopDefault(_space);
var _spin = require("./spin");
var _spinDefault = parcelHelpers.interopDefault(_spin);
var _steps = require("./steps");
var _stepsDefault = parcelHelpers.interopDefault(_steps);
var _switch = require("./switch");
var _switchDefault = parcelHelpers.interopDefault(_switch);
var _table = require("./table");
var _tableDefault = parcelHelpers.interopDefault(_table);
var _transfer = require("./transfer");
var _transferDefault = parcelHelpers.interopDefault(_transfer);
var _tree = require("./tree");
var _treeDefault = parcelHelpers.interopDefault(_tree);
var _treeSelect = require("./tree-select");
var _treeSelectDefault = parcelHelpers.interopDefault(_treeSelect);
var _tabs = require("./tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _tag = require("./tag");
var _tagDefault = parcelHelpers.interopDefault(_tag);
var _timePicker = require("./time-picker");
var _timePickerDefault = parcelHelpers.interopDefault(_timePicker);
var _timeline = require("./timeline");
var _timelineDefault = parcelHelpers.interopDefault(_timeline);
var _tooltip = require("./tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _typography = require("./typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _upload = require("./upload");
var _uploadDefault = parcelHelpers.interopDefault(_upload);
var _version = require("./version");
var _versionDefault = parcelHelpers.interopDefault(_version);

},{"./affix":false,"./anchor":false,"./auto-complete":false,"./alert":false,"./avatar":false,"./back-top":false,"./badge":false,"./breadcrumb":false,"./button":"1Nh0R","./calendar":false,"./card":"lQUWy","./collapse":false,"./carousel":false,"./cascader":false,"./checkbox":false,"./col":"hY9cv","./comment":false,"./config-provider":"dg9FJ","./date-picker":false,"./descriptions":false,"./divider":false,"./dropdown":false,"./drawer":false,"./empty":"ehjVl","./form":false,"./grid":"lJL5G","./input":false,"./image":"jIZZ5","./input-number":false,"./layout":false,"./list":false,"./message":"d9tKv","./menu":"9clLO","./mentions":false,"./modal":false,"./statistic":false,"./notification":"bKlv4","./page-header":false,"./pagination":false,"./popconfirm":false,"./popover":false,"./progress":false,"./radio":false,"./rate":false,"./result":false,"./row":"63sKn","./select":false,"./skeleton":false,"./slider":false,"./space":false,"./spin":false,"./steps":false,"./switch":false,"./table":false,"./transfer":false,"./tree":false,"./tree-select":false,"./tabs":"h1YUY","./tag":false,"./time-picker":false,"./timeline":false,"./tooltip":"dx81e","./typography":false,"./upload":false,"./version":false,"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1Nh0R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _button = require("./button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
exports.default = _buttonDefault.default;

},{"./button":"9pf1C","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9pf1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertLegacyProps", ()=>convertLegacyProps
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
/* eslint-disable react/button-has-type */ var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _buttonGroup = require("./button-group");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _configProvider = require("../config-provider");
var _wave = require("../_util/wave");
var _waveDefault = parcelHelpers.interopDefault(_wave);
var _type = require("../_util/type");
var _devWarning = require("../_util/devWarning");
var _devWarningDefault = parcelHelpers.interopDefault(_devWarning);
var _sizeContext = require("../config-provider/SizeContext");
var _sizeContextDefault = parcelHelpers.interopDefault(_sizeContext);
var _loadingIcon = require("./LoadingIcon");
var _loadingIconDefault = parcelHelpers.interopDefault(_loadingIcon);
var _reactNode = require("../_util/reactNode");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
function isString(str) {
    return typeof str === 'string';
}
function isUnborderedButtonType(type) {
    return type === 'text' || type === 'link';
}
function isReactFragment(node) {
    return /*#__PURE__*/ _react.isValidElement(node) && node.type === _react.Fragment;
} // Insert one space between two chinese characters automatically.
function insertSpace(child, needInserted) {
    // Check the child if is undefined or null.
    if (child == null) return;
    var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.
    if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) return _reactNode.cloneElement(child, {
        children: child.props.children.split('').join(SPACE)
    });
    if (typeof child === 'string') return isTwoCNChar(child) ? /*#__PURE__*/ _react.createElement("span", null, child.split('').join(SPACE)) : /*#__PURE__*/ _react.createElement("span", null, child);
    if (isReactFragment(child)) return /*#__PURE__*/ _react.createElement("span", null, child);
    return child;
}
function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    _react.Children.forEach(children, function(child) {
        var type = _typeofDefault.default(child);
        var isCurrentChildPure = type === 'string' || type === 'number';
        if (isPrevChildPure && isCurrentChildPure) {
            var lastIndex = childList.length - 1;
            var lastChild = childList[lastIndex];
            childList[lastIndex] = "".concat(lastChild).concat(child);
        } else childList.push(child);
        isPrevChildPure = isCurrentChildPure;
    }); // Pass to React.Children.map to auto fill key
    return _react.Children.map(childList, function(child) {
        return insertSpace(child, needInserted);
    });
}
var ButtonTypes = _type.tuple('default', 'primary', 'ghost', 'dashed', 'link', 'text');
var ButtonShapes = _type.tuple('default', 'circle', 'round');
var ButtonHTMLTypes = _type.tuple('submit', 'button', 'reset');
function convertLegacyProps(type) {
    if (type === 'danger') return {
        danger: true
    };
    return {
        type: type
    };
}
var InternalButton = function InternalButton(props, ref) {
    var _classNames;
    var _props$loading = props.loading, loading = _props$loading === void 0 ? false : _props$loading, customizePrefixCls = props.prefixCls, _props$type = props.type, type = _props$type === void 0 ? 'default' : _props$type, danger = props.danger, _props$shape = props.shape, shape = _props$shape === void 0 ? 'default' : _props$shape, customizeSize = props.size, className = props.className, children = props.children, icon = props.icon, _props$ghost = props.ghost, ghost = _props$ghost === void 0 ? false : _props$ghost, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$htmlType = props.htmlType, htmlType = _props$htmlType === void 0 ? 'button' : _props$htmlType, rest = __rest(props, [
        "loading",
        "prefixCls",
        "type",
        "danger",
        "shape",
        "size",
        "className",
        "children",
        "icon",
        "ghost",
        "block",
        "htmlType"
    ]);
    var size = _react.useContext(_sizeContextDefault.default);
    var _React$useState = _react.useState(!!loading), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), innerLoading = _React$useState2[0], setLoading = _React$useState2[1];
    var _React$useState3 = _react.useState(false), _React$useState4 = _slicedToArrayDefault.default(_React$useState3, 2), hasTwoCNChar = _React$useState4[0], setHasTwoCNChar = _React$useState4[1];
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton, direction = _React$useContext.direction;
    var buttonRef = ref || /*#__PURE__*/ _react.createRef();
    var isNeedInserted = function isNeedInserted() {
        return _react.Children.count(children) === 1 && !icon && !isUnborderedButtonType(type);
    };
    var fixTwoCNChar = function fixTwoCNChar() {
        // Fix for HOC usage like <FormatMessage />
        if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) return;
        var buttonText = buttonRef.current.textContent;
        if (isNeedInserted() && isTwoCNChar(buttonText)) {
            if (!hasTwoCNChar) setHasTwoCNChar(true);
        } else if (hasTwoCNChar) setHasTwoCNChar(false);
    }; // =============== Update Loading ===============
    var loadingOrDelay = _typeofDefault.default(loading) === 'object' && loading.delay ? loading.delay || true : !!loading;
    _react.useEffect(function() {
        var delayTimer = null;
        if (typeof loadingOrDelay === 'number') delayTimer = window.setTimeout(function() {
            delayTimer = null;
            setLoading(loadingOrDelay);
        }, loadingOrDelay);
        else setLoading(loadingOrDelay);
        return function() {
            if (delayTimer) {
                // in order to not perform a React state update on an unmounted component
                // and clear timer after 'loadingOrDelay' updated.
                window.clearTimeout(delayTimer);
                delayTimer = null;
            }
        };
    }, [
        loadingOrDelay
    ]);
    _react.useEffect(fixTwoCNChar, [
        buttonRef
    ]);
    var handleClick = function handleClick(e) {
        var onClick = props.onClick, disabled = props.disabled; // https://github.com/ant-design/ant-design/issues/30207
        if (innerLoading || disabled) {
            e.preventDefault();
            return;
        }
        onClick === null || onClick === void 0 || onClick(e);
    };
    _devWarningDefault.default(!(typeof icon === 'string' && icon.length > 2), 'Button', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon"));
    _devWarningDefault.default(!(ghost && isUnborderedButtonType(type)), 'Button', "`link` or `text` button can't be a `ghost` button.");
    var prefixCls = getPrefixCls('btn', customizePrefixCls);
    var autoInsertSpace = autoInsertSpaceInButton !== false;
    var sizeClassNameMap = {
        large: 'lg',
        small: 'sm',
        middle: undefined
    };
    var sizeFullname = customizeSize || size;
    var sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || '' : '';
    var iconType = innerLoading ? 'loading' : icon;
    var classes = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(shape), shape !== 'default' && shape), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(type), type), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnborderedButtonType(type)), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-loading"), innerLoading), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-block"), block), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
    var iconNode = icon && !innerLoading ? icon : /*#__PURE__*/ _react.createElement(_loadingIconDefault.default, {
        existIcon: !!icon,
        prefixCls: prefixCls,
        loading: !!innerLoading
    });
    var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
    var linkButtonRestProps = _omitDefault.default(rest, [
        'navigate'
    ]);
    if (linkButtonRestProps.href !== undefined) return /*#__PURE__*/ _react.createElement("a", _extendsDefault.default({}, linkButtonRestProps, {
        className: classes,
        onClick: handleClick,
        ref: buttonRef
    }), iconNode, kids);
    var buttonNode = /*#__PURE__*/ _react.createElement("button", _extendsDefault.default({}, rest, {
        type: htmlType,
        className: classes,
        onClick: handleClick,
        ref: buttonRef
    }), iconNode, kids);
    if (isUnborderedButtonType(type)) return buttonNode;
    return /*#__PURE__*/ _react.createElement(_waveDefault.default, {
        disabled: !!innerLoading
    }, buttonNode);
};
var Button = /*#__PURE__*/ _react.forwardRef(InternalButton);
Button.displayName = 'Button';
Button.Group = _buttonGroupDefault.default;
Button.__ANT_BUTTON = true;
exports.default = Button;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","classnames":"dFgpN","rc-util/es/omit":"9TJfY","./button-group":"e7GqL","../config-provider":"dg9FJ","../_util/wave":"isYsF","../_util/type":"cMtUJ","../_util/devWarning":"dPrhV","../config-provider/SizeContext":"g9GAC","./LoadingIcon":"lIxIE","../_util/reactNode":"hPDx5","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9HBJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4z6iA":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"dIbZx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
exports.default = _defineProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9WfMt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithHolesJs = require("./arrayWithHoles.js");
var _arrayWithHolesJsDefault = parcelHelpers.interopDefault(_arrayWithHolesJs);
var _iterableToArrayLimitJs = require("./iterableToArrayLimit.js");
var _iterableToArrayLimitJsDefault = parcelHelpers.interopDefault(_iterableToArrayLimitJs);
var _unsupportedIterableToArrayJs = require("./unsupportedIterableToArray.js");
var _unsupportedIterableToArrayJsDefault = parcelHelpers.interopDefault(_unsupportedIterableToArrayJs);
var _nonIterableRestJs = require("./nonIterableRest.js");
var _nonIterableRestJsDefault = parcelHelpers.interopDefault(_nonIterableRestJs);
function _slicedToArray(arr, i) {
    return _arrayWithHolesJsDefault.default(arr) || _iterableToArrayLimitJsDefault.default(arr, i) || _unsupportedIterableToArrayJsDefault.default(arr, i) || _nonIterableRestJsDefault.default();
}
exports.default = _slicedToArray;

},{"./arrayWithHoles.js":"a7IdE","./iterableToArrayLimit.js":"ki4qD","./unsupportedIterableToArray.js":"j2RQL","./nonIterableRest.js":"5fSPK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"a7IdE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
exports.default = _arrayWithHoles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ki4qD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
exports.default = _iterableToArrayLimit;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"j2RQL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeToArrayJs = require("./arrayLikeToArray.js");
var _arrayLikeToArrayJsDefault = parcelHelpers.interopDefault(_arrayLikeToArrayJs);
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArrayJsDefault.default(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArrayJsDefault.default(o, minLen);
}
exports.default = _unsupportedIterableToArray;

},{"./arrayLikeToArray.js":"lExUy","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lExUy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
exports.default = _arrayLikeToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5fSPK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports.default = _nonIterableRest;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bgxCq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _typeof(obj1) {
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj1);
}
exports.default = _typeof;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dFgpN":[function(require,module,exports) {
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/ /* global define */ (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
        var classes = [];
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (!arg) continue;
            var argType = typeof arg;
            if (argType === 'string' || argType === 'number') classes.push(arg);
            else if (Array.isArray(arg)) {
                if (arg.length) {
                    var inner = classNames.apply(null, arg);
                    if (inner) classes.push(inner);
                }
            } else if (argType === 'object') {
                if (arg.toString === Object.prototype.toString) {
                    for(var key in arg)if (hasOwn.call(arg, key) && arg[key]) classes.push(key);
                } else classes.push(arg.toString());
            }
        }
        return classes.join(' ');
    }
    if (module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) // register as 'classnames', consistent with npm package name
    define('classnames', [], function() {
        return classNames;
    });
    else window.classNames = classNames;
})();

},{}],"9TJfY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
function omit(obj, fields) {
    var clone = _objectSpread2Default.default({}, obj);
    if (Array.isArray(fields)) fields.forEach(function(key) {
        delete clone[key];
    });
    return clone;
}
exports.default = omit;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aKBZs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _definePropertyJs = require("./defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _definePropertyJsDefault.default(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
exports.default = _objectSpread2;

},{"./defineProperty.js":"dIbZx","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"e7GqL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var _unreachableException = require("../_util/unreachableException");
var _unreachableExceptionDefault = parcelHelpers.interopDefault(_unreachableException);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var ButtonGroup = function ButtonGroup(props) {
    return /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, null, function(_ref) {
        var _classNames;
        var getPrefixCls = _ref.getPrefixCls, direction = _ref.direction;
        var customizePrefixCls = props.prefixCls, size = props.size, className = props.className, others = __rest(props, [
            "prefixCls",
            "size",
            "className"
        ]);
        var prefixCls = getPrefixCls('btn-group', customizePrefixCls); // large => lg
        // small => sm
        var sizeCls = '';
        switch(size){
            case 'large':
                sizeCls = 'lg';
                break;
            case 'small':
                sizeCls = 'sm';
                break;
            case 'middle':
            case undefined:
                break;
            default:
                // eslint-disable-next-line no-console
                console.warn(new _unreachableExceptionDefault.default(size).error);
        }
        var classes = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
        return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, others, {
            className: classes
        }));
    });
};
exports.default = ButtonGroup;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","../_util/unreachableException":"gNbuN","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dg9FJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConfigContext", ()=>_context1.ConfigContext
);
parcelHelpers.export(exports, "ConfigConsumer", ()=>_context1.ConfigConsumer
);
parcelHelpers.export(exports, "configConsumerProps", ()=>configConsumerProps
);
parcelHelpers.export(exports, "defaultPrefixCls", ()=>defaultPrefixCls
);
parcelHelpers.export(exports, "defaultIconPrefixCls", ()=>defaultIconPrefixCls
);
parcelHelpers.export(exports, "globalConfig", ()=>globalConfig
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _context = require("@ant-design/icons/es/components/Context");
var _contextDefault = parcelHelpers.interopDefault(_context);
var _rcFieldForm = require("rc-field-form");
var _useMemo = require("rc-util/es/hooks/useMemo");
var _useMemoDefault = parcelHelpers.interopDefault(_useMemo);
var _localeProvider = require("../locale-provider");
var _localeProviderDefault = parcelHelpers.interopDefault(_localeProvider);
var _localeReceiver = require("../locale-provider/LocaleReceiver");
var _localeReceiverDefault = parcelHelpers.interopDefault(_localeReceiver);
var _context1 = require("./context");
var _sizeContext = require("./SizeContext");
var _sizeContextDefault = parcelHelpers.interopDefault(_sizeContext);
var _message = require("../message");
var _messageDefault = parcelHelpers.interopDefault(_message);
var _notification = require("../notification");
var _notificationDefault = parcelHelpers.interopDefault(_notification);
var _cssVariables = require("./cssVariables");
var _default = require("../locale/default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
var configConsumerProps = [
    'getTargetContainer',
    'getPopupContainer',
    'rootPrefixCls',
    'getPrefixCls',
    'renderEmpty',
    'csp',
    'autoInsertSpaceInButton',
    'locale',
    'pageHeader'
]; // These props is used by `useContext` directly in sub component
var PASSED_PROPS = [
    'getTargetContainer',
    'getPopupContainer',
    'renderEmpty',
    'pageHeader',
    'input',
    'form'
];
var defaultPrefixCls = 'ant';
var defaultIconPrefixCls = 'anticon';
var globalPrefixCls;
var globalIconPrefixCls;
function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls;
}
function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
}
var setGlobalConfig = function setGlobalConfig(_ref) {
    var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, theme = _ref.theme;
    if (prefixCls !== undefined) globalPrefixCls = prefixCls;
    if (iconPrefixCls !== undefined) globalIconPrefixCls = iconPrefixCls;
    if (theme) _cssVariables.registerTheme(getGlobalPrefixCls(), theme);
};
var globalConfig = function globalConfig() {
    return {
        getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
            if (customizePrefixCls) return customizePrefixCls;
            return suffixCls ? "".concat(getGlobalPrefixCls(), "-").concat(suffixCls) : getGlobalPrefixCls();
        },
        getIconPrefixCls: getGlobalIconPrefixCls,
        getRootPrefixCls: function getRootPrefixCls(rootPrefixCls, customizePrefixCls) {
            // Customize rootPrefixCls is first priority
            if (rootPrefixCls) return rootPrefixCls;
             // If Global prefixCls provided, use this
            if (globalPrefixCls) return globalPrefixCls;
             // [Legacy] If customize prefixCls provided, we cut it to get the prefixCls
            if (customizePrefixCls && customizePrefixCls.includes('-')) return customizePrefixCls.replace(/^(.*)-[^-]*$/, '$1');
             // Fallback to default prefixCls
            return getGlobalPrefixCls();
        }
    };
};
var ProviderChildren = function ProviderChildren(props) {
    var _a, _b;
    var children = props.children, csp = props.csp, autoInsertSpaceInButton = props.autoInsertSpaceInButton, form = props.form, locale = props.locale, componentSize = props.componentSize, direction = props.direction, space = props.space, virtual = props.virtual, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, legacyLocale = props.legacyLocale, parentContext = props.parentContext, iconPrefixCls = props.iconPrefixCls;
    var getPrefixCls = _react.useCallback(function(suffixCls, customizePrefixCls) {
        var prefixCls = props.prefixCls;
        if (customizePrefixCls) return customizePrefixCls;
        var mergedPrefixCls = prefixCls || parentContext.getPrefixCls('');
        return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [
        parentContext.getPrefixCls,
        props.prefixCls
    ]);
    var config = _extendsDefault.default(_extendsDefault.default({}, parentContext), {
        csp: csp,
        autoInsertSpaceInButton: autoInsertSpaceInButton,
        locale: locale || legacyLocale,
        direction: direction,
        space: space,
        virtual: virtual,
        dropdownMatchSelectWidth: dropdownMatchSelectWidth,
        getPrefixCls: getPrefixCls
    }); // Pass the props used by `useContext` directly with child component.
    // These props should merged into `config`.
    PASSED_PROPS.forEach(function(propName) {
        var propValue = props[propName];
        if (propValue) config[propName] = propValue;
    }); // https://github.com/ant-design/ant-design/issues/27617
    var memoedConfig = _useMemoDefault.default(function() {
        return config;
    }, config, function(prevConfig, currentConfig) {
        var prevKeys = Object.keys(prevConfig);
        var currentKeys = Object.keys(currentConfig);
        return prevKeys.length !== currentKeys.length || prevKeys.some(function(key) {
            return prevConfig[key] !== currentConfig[key];
        });
    });
    var memoIconContextValue = _react.useMemo(function() {
        return {
            prefixCls: iconPrefixCls,
            csp: csp
        };
    }, [
        iconPrefixCls,
        csp
    ]);
    var childNode = children; // Additional Form provider
    var validateMessages = {};
    if (locale) validateMessages = ((_a = locale.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || ((_b = _defaultDefault.default.Form) === null || _b === void 0 ? void 0 : _b.defaultValidateMessages) || {};
    if (form && form.validateMessages) validateMessages = _extendsDefault.default(_extendsDefault.default({}, validateMessages), form.validateMessages);
    if (Object.keys(validateMessages).length > 0) childNode = /*#__PURE__*/ _react.createElement(_rcFieldForm.FormProvider, {
        validateMessages: validateMessages
    }, children);
    if (locale) childNode = /*#__PURE__*/ _react.createElement(_localeProviderDefault.default, {
        locale: locale,
        _ANT_MARK__: _localeProvider.ANT_MARK
    }, childNode);
    if (iconPrefixCls || csp) childNode = /*#__PURE__*/ _react.createElement(_contextDefault.default.Provider, {
        value: memoIconContextValue
    }, childNode);
    if (componentSize) childNode = /*#__PURE__*/ _react.createElement(_sizeContext.SizeContextProvider, {
        size: componentSize
    }, childNode);
    return /*#__PURE__*/ _react.createElement(_context1.ConfigContext.Provider, {
        value: memoedConfig
    }, childNode);
};
var ConfigProvider = function ConfigProvider(props) {
    _react.useEffect(function() {
        if (props.direction) {
            _messageDefault.default.config({
                rtl: props.direction === 'rtl'
            });
            _notificationDefault.default.config({
                rtl: props.direction === 'rtl'
            });
        }
    }, [
        props.direction
    ]);
    return /*#__PURE__*/ _react.createElement(_localeReceiverDefault.default, null, function(_, __, legacyLocale) {
        return /*#__PURE__*/ _react.createElement(_context1.ConfigConsumer, null, function(context) {
            return /*#__PURE__*/ _react.createElement(ProviderChildren, _extendsDefault.default({
                parentContext: context,
                legacyLocale: legacyLocale
            }, props));
        });
    });
};
/** @private internal Usage. do not use in your production */ ConfigProvider.ConfigContext = _context1.ConfigContext;
ConfigProvider.SizeContext = _sizeContextDefault.default;
ConfigProvider.config = setGlobalConfig;
exports.default = ConfigProvider;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","@ant-design/icons/es/components/Context":"6XDnW","rc-field-form":"khw17","rc-util/es/hooks/useMemo":"lhbzA","../locale-provider":"jhCpc","../locale-provider/LocaleReceiver":"bz53l","./context":"3oXVJ","./SizeContext":"g9GAC","../message":"d9tKv","../notification":"bKlv4","./cssVariables":"hVEz0","../locale/default":"bQ1He","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6XDnW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var IconContext = /*#__PURE__*/ _react.createContext({});
exports.default = IconContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"khw17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Field", ()=>_fieldDefault.default
);
parcelHelpers.export(exports, "List", ()=>_listDefault.default
);
parcelHelpers.export(exports, "useForm", ()=>_useFormDefault.default
);
parcelHelpers.export(exports, "FormProvider", ()=>_formContext.FormProvider
);
parcelHelpers.export(exports, "FieldContext", ()=>_fieldContextDefault.default
);
parcelHelpers.export(exports, "ListContext", ()=>_listContextDefault.default
);
var _react = require("react");
var _field = require("./Field");
var _fieldDefault = parcelHelpers.interopDefault(_field);
var _list = require("./List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _useForm = require("./useForm");
var _useFormDefault = parcelHelpers.interopDefault(_useForm);
var _form = require("./Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _formContext = require("./FormContext");
var _fieldContext = require("./FieldContext");
var _fieldContextDefault = parcelHelpers.interopDefault(_fieldContext);
var _listContext = require("./ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var InternalForm = /*#__PURE__*/ _react.forwardRef(_formDefault.default);
var RefForm = InternalForm;
RefForm.FormProvider = _formContext.FormProvider;
RefForm.Field = _fieldDefault.default;
RefForm.List = _listDefault.default;
RefForm.useForm = _useFormDefault.default;
exports.default = RefForm;

},{"react":"b4tPL","./Field":"dIEN8","./List":"jSz43","./useForm":"aPf12","./Form":"i3nAi","./FormContext":"5oSST","./FieldContext":"lSL4V","./ListContext":"8TM7s","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dIEN8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _toArray = require("rc-util/es/Children/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _react = require("react");
var _fieldContext = require("./FieldContext");
var _fieldContextDefault = parcelHelpers.interopDefault(_fieldContext);
var _typeUtil = require("./utils/typeUtil");
var _validateUtil = require("./utils/validateUtil");
var _valueUtil = require("./utils/valueUtil");
var _excluded = [
    "name"
];
var EMPTY_ERRORS = [];
function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
    if (typeof shouldUpdate === 'function') return shouldUpdate(prev, next, 'source' in info ? {
        source: info.source
    } : {});
    return prevValue !== nextValue;
} // We use Class instead of Hooks here since it will cost much code by using Hooks.
var Field = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(Field1, _React$Component);
    var _super = _createSuperDefault.default(Field1);
    /**
   * Follow state should not management in State since it will async update by React.
   * This makes first render of form can not get correct state value.
   */ /**
   * Mark when touched & validated. Currently only used for `dependencies`.
   * Note that we do not think field with `initialValue` is dirty
   * but this will be by `isFieldDirty` func.
   */ // ============================== Subscriptions ==============================
    function Field1(props) {
        var _this;
        _classCallCheckDefault.default(this, Field1);
        _this = _super.call(this, props); // Register on init
        _this.state = {
            resetCount: 0
        };
        _this.cancelRegisterFunc = null;
        _this.mounted = false;
        _this.touched = false;
        _this.dirty = false;
        _this.validatePromise = null;
        _this.prevValidating = void 0;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.cancelRegister = function() {
            var _this$props = _this.props, preserve = _this$props.preserve, isListField = _this$props.isListField, name = _this$props.name;
            if (_this.cancelRegisterFunc) _this.cancelRegisterFunc(isListField, preserve, _valueUtil.getNamePath(name));
            _this.cancelRegisterFunc = null;
        };
        _this.getNamePath = function() {
            var _this$props2 = _this.props, name = _this$props2.name, fieldContext = _this$props2.fieldContext;
            var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
            return name !== undefined ? [].concat(_toConsumableArrayDefault.default(prefixName), _toConsumableArrayDefault.default(name)) : [];
        };
        _this.getRules = function() {
            var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
            return rules.map(function(rule) {
                if (typeof rule === 'function') return rule(fieldContext);
                return rule;
            });
        };
        _this.refresh = function() {
            if (!_this.mounted) return;
            /**
       * Clean up current node.
       */ _this.setState(function(_ref) {
                var resetCount = _ref.resetCount;
                return {
                    resetCount: resetCount + 1
                };
            });
        };
        _this.triggerMetaEvent = function(destroy) {
            var onMetaChange = _this.props.onMetaChange;
            onMetaChange === null || onMetaChange === void 0 || onMetaChange(_objectSpread2Default.default(_objectSpread2Default.default({}, _this.getMeta()), {}, {
                destroy: destroy
            }));
        };
        _this.onStoreChange = function(prevStore, namePathList, info) {
            var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
            var store = info.store;
            var namePath = _this.getNamePath();
            var prevValue = _this.getValue(prevStore);
            var curValue = _this.getValue(store);
            var namePathMatch = namePathList && _valueUtil.containsNamePath(namePathList, namePath); // `setFieldsValue` is a quick access to update related status
            if (info.type === 'valueUpdate' && info.source === 'external' && prevValue !== curValue) {
                _this.touched = true;
                _this.dirty = true;
                _this.validatePromise = null;
                _this.errors = EMPTY_ERRORS;
                _this.warnings = EMPTY_ERRORS;
                _this.triggerMetaEvent();
            }
            switch(info.type){
                case 'reset':
                    if (!namePathList || namePathMatch) {
                        // Clean up state
                        _this.touched = false;
                        _this.dirty = false;
                        _this.validatePromise = null;
                        _this.errors = EMPTY_ERRORS;
                        _this.warnings = EMPTY_ERRORS;
                        _this.triggerMetaEvent();
                        onReset === null || onReset === void 0 || onReset();
                        _this.refresh();
                        return;
                    }
                    break;
                /**
         * In case field with `preserve = false` nest deps like:
         * - A = 1 => show B
         * - B = 1 => show C
         * - Reset A, need clean B, C
         */ case 'remove':
                    if (shouldUpdate) {
                        _this.reRender();
                        return;
                    }
                    break;
                case 'setField':
                    if (namePathMatch) {
                        var data = info.data;
                        if ('touched' in data) _this.touched = data.touched;
                        if ('validating' in data && !('originRCField' in data)) _this.validatePromise = data.validating ? Promise.resolve([]) : null;
                        if ('errors' in data) _this.errors = data.errors || EMPTY_ERRORS;
                        if ('warnings' in data) _this.warnings = data.warnings || EMPTY_ERRORS;
                        _this.dirty = true;
                        _this.triggerMetaEvent();
                        _this.reRender();
                        return;
                    } // Handle update by `setField` with `shouldUpdate`
                    if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
                        _this.reRender();
                        return;
                    }
                    break;
                case 'dependenciesUpdate':
                    /**
             * Trigger when marked `dependencies` updated. Related fields will all update
             */ var dependencyList = dependencies.map(_valueUtil.getNamePath); // No need for `namePathMath` check and `shouldUpdate` check, since `valueUpdate` will be
                    // emitted earlier and they will work there
                    // If set it may cause unnecessary twice rerendering
                    if (dependencyList.some(function(dependency) {
                        return _valueUtil.containsNamePath(info.relatedFields, dependency);
                    })) {
                        _this.reRender();
                        return;
                    }
                    break;
                default:
                    // 1. If `namePath` exists in `namePathList`, means it's related value and should update
                    //      For example <List name="list"><Field name={['list', 0]}></List>
                    //      If `namePathList` is [['list']] (List value update), Field should be updated
                    //      If `namePathList` is [['list', 0]] (Field value update), List shouldn't be updated
                    // 2.
                    //   2.1 If `dependencies` is set, `name` is not set and `shouldUpdate` is not set,
                    //       don't use `shouldUpdate`. `dependencies` is view as a shortcut if `shouldUpdate`
                    //       is not provided
                    //   2.2 If `shouldUpdate` provided, use customize logic to update the field
                    //       else to check if value changed
                    if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
                        _this.reRender();
                        return;
                    }
                    break;
            }
            if (shouldUpdate === true) _this.reRender();
        };
        _this.validateRules = function(options) {
            // We should fixed namePath & value to avoid developer change then by form function
            var namePath = _this.getNamePath();
            var currentValue = _this.getValue(); // Force change to async to avoid rule OOD under renderProps field
            var rootPromise = Promise.resolve().then(function() {
                if (!_this.mounted) return [];
                var _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables;
                var _ref2 = options || {}, triggerName = _ref2.triggerName;
                var filteredRules = _this.getRules();
                if (triggerName) filteredRules = filteredRules.filter(function(rule) {
                    var validateTrigger = rule.validateTrigger;
                    if (!validateTrigger) return true;
                    var triggerList = _typeUtil.toArray(validateTrigger);
                    return triggerList.includes(triggerName);
                });
                var promise = _validateUtil.validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
                promise.catch(function(e) {
                    return e;
                }).then(function() {
                    var ruleErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_ERRORS;
                    if (_this.validatePromise === rootPromise) {
                        _this.validatePromise = null; // Get errors & warnings
                        var nextErrors = [];
                        var nextWarnings = [];
                        ruleErrors.forEach(function(_ref3) {
                            var warningOnly = _ref3.rule.warningOnly, _ref3$errors = _ref3.errors, errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;
                            if (warningOnly) nextWarnings.push.apply(nextWarnings, _toConsumableArrayDefault.default(errors));
                            else nextErrors.push.apply(nextErrors, _toConsumableArrayDefault.default(errors));
                        });
                        _this.errors = nextErrors;
                        _this.warnings = nextWarnings;
                        _this.triggerMetaEvent();
                        _this.reRender();
                    }
                });
                return promise;
            });
            _this.validatePromise = rootPromise;
            _this.dirty = true;
            _this.errors = EMPTY_ERRORS;
            _this.warnings = EMPTY_ERRORS;
            _this.triggerMetaEvent(); // Force trigger re-render since we need sync renderProps with new meta
            _this.reRender();
            return rootPromise;
        };
        _this.isFieldValidating = function() {
            return !!_this.validatePromise;
        };
        _this.isFieldTouched = function() {
            return _this.touched;
        };
        _this.isFieldDirty = function() {
            // Touched or validate or has initialValue
            if (_this.dirty || _this.props.initialValue !== undefined) return true;
             // Form set initialValue
            var fieldContext = _this.props.fieldContext;
            var _fieldContext$getInte = fieldContext.getInternalHooks(_fieldContext.HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
            if (getInitialValue(_this.getNamePath()) !== undefined) return true;
            return false;
        };
        _this.getErrors = function() {
            return _this.errors;
        };
        _this.getWarnings = function() {
            return _this.warnings;
        };
        _this.isListField = function() {
            return _this.props.isListField;
        };
        _this.isList = function() {
            return _this.props.isList;
        };
        _this.isPreserve = function() {
            return _this.props.preserve;
        };
        _this.getMeta = function() {
            // Make error & validating in cache to save perf
            _this.prevValidating = _this.isFieldValidating();
            var meta = {
                touched: _this.isFieldTouched(),
                validating: _this.prevValidating,
                errors: _this.errors,
                warnings: _this.warnings,
                name: _this.getNamePath()
            };
            return meta;
        };
        _this.getOnlyChild = function(children) {
            // Support render props
            if (typeof children === 'function') {
                var meta = _this.getMeta();
                return _objectSpread2Default.default(_objectSpread2Default.default({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
                    isFunction: true
                });
            } // Filed element only
            var childList = _toArrayDefault.default(children);
            if (childList.length !== 1 || !/*#__PURE__*/ _react.isValidElement(childList[0])) return {
                child: childList,
                isFunction: false
            };
            return {
                child: childList[0],
                isFunction: false
            };
        };
        _this.getValue = function(store) {
            var getFieldsValue = _this.props.fieldContext.getFieldsValue;
            var namePath = _this.getNamePath();
            return _valueUtil.getValue(store || getFieldsValue(true), namePath);
        };
        _this.getControlled = function() {
            var childProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
            var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : fieldContext.validateTrigger;
            var namePath = _this.getNamePath();
            var getInternalHooks = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
            var _getInternalHooks = getInternalHooks(_fieldContext.HOOK_MARK), dispatch = _getInternalHooks.dispatch;
            var value = _this.getValue();
            var mergedGetValueProps = getValueProps || function(val) {
                return _definePropertyDefault.default({}, valuePropName, val);
            }; // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var originTriggerFunc = childProps[trigger];
            var control = _objectSpread2Default.default(_objectSpread2Default.default({}, childProps), mergedGetValueProps(value)); // Add trigger
            control[trigger] = function() {
                // Mark as touched
                _this.touched = true;
                _this.dirty = true;
                _this.triggerMetaEvent();
                var newValue;
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                if (getValueFromEvent) newValue = getValueFromEvent.apply(void 0, args);
                else newValue = _valueUtil.defaultGetValueFromEvent.apply(void 0, [
                    valuePropName
                ].concat(args));
                if (normalize) newValue = normalize(newValue, value, getFieldsValue(true));
                dispatch({
                    type: 'updateValue',
                    namePath: namePath,
                    value: newValue
                });
                if (originTriggerFunc) originTriggerFunc.apply(void 0, args);
            }; // Add validateTrigger
            var validateTriggerList = _typeUtil.toArray(mergedValidateTrigger || []);
            validateTriggerList.forEach(function(triggerName) {
                // Wrap additional function of component, so that we can get latest value from store
                var originTrigger = control[triggerName];
                control[triggerName] = function() {
                    if (originTrigger) originTrigger.apply(void 0, arguments);
                     // Always use latest rules
                    var rules = _this.props.rules;
                    if (rules && rules.length) // We dispatch validate to root,
                    // since it will update related data with other field with same name
                    dispatch({
                        type: 'validateField',
                        namePath: namePath,
                        triggerName: triggerName
                    });
                };
            });
            return control;
        };
        if (props.fieldContext) {
            var getInternalHooks1 = props.fieldContext.getInternalHooks;
            var _getInternalHooks2 = getInternalHooks1(_fieldContext.HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
            initEntityValue(_assertThisInitializedDefault.default(_this));
        }
        return _this;
    }
    _createClassDefault.default(Field1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
                this.mounted = true; // Register on init
                if (fieldContext) {
                    var getInternalHooks = fieldContext.getInternalHooks;
                    var _getInternalHooks3 = getInternalHooks(_fieldContext.HOOK_MARK), registerField = _getInternalHooks3.registerField;
                    this.cancelRegisterFunc = registerField(this);
                } // One more render for component in case fields not ready
                if (shouldUpdate === true) this.reRender();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.cancelRegister();
                this.triggerMetaEvent(true);
                this.mounted = false;
            }
        },
        {
            key: "reRender",
            value: function reRender() {
                if (!this.mounted) return;
                this.forceUpdate();
            }
        },
        {
            key: "render",
            value: function render() {
                var resetCount = this.state.resetCount;
                var children = this.props.children;
                var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction = _this$getOnlyChild.isFunction; // Not need to `cloneElement` since user can handle this in render function self
                var returnChildNode;
                if (isFunction) returnChildNode = child;
                else if (/*#__PURE__*/ _react.isValidElement(child)) returnChildNode = /*#__PURE__*/ _react.cloneElement(child, this.getControlled(child.props));
                else {
                    _warningDefault.default(!child, '`children` of Field is not validate ReactElement.');
                    returnChildNode = child;
                }
                return /*#__PURE__*/ _react.createElement(_react.Fragment, {
                    key: resetCount
                }, returnChildNode);
            }
        }
    ]);
    return Field1;
}(_react.Component);
Field.contextType = _fieldContextDefault.default;
Field.defaultProps = {
    trigger: 'onChange',
    valuePropName: 'value'
};
function WrapperField(_ref5) {
    var name = _ref5.name, restProps = _objectWithoutPropertiesDefault.default(_ref5, _excluded);
    var fieldContext = _react.useContext(_fieldContextDefault.default);
    var namePath = name !== undefined ? _valueUtil.getNamePath(name) : undefined;
    var key = 'keep';
    if (!restProps.isListField) key = "_".concat((namePath || []).join('_'));
     // Warning if it's a directly list field.
    // We can still support multiple level field preserve.
    if (restProps.preserve === false && restProps.isListField && namePath.length <= 1) _warningDefault.default(false, '`preserve` should not apply on Form.List fields.');
    return /*#__PURE__*/ _react.createElement(Field, _extendsDefault.default({
        key: key,
        name: namePath
    }, restProps, {
        fieldContext: fieldContext
    }));
}
exports.default = WrapperField;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/assertThisInitialized":"5wGTe","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","rc-util/es/Children/toArray":"ijisy","rc-util/es/warning":"bfz97","react":"b4tPL","./FieldContext":"lSL4V","./utils/typeUtil":"jAHiK","./utils/validateUtil":"7K6v8","./utils/valueUtil":"4yOs8","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7L6i1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLooseJs = require("./objectWithoutPropertiesLoose.js");
var _objectWithoutPropertiesLooseJsDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLooseJs);
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLooseJsDefault.default(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
exports.default = _objectWithoutProperties;

},{"./objectWithoutPropertiesLoose.js":"gKOX1","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gKOX1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3mFQ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithoutHolesJs = require("./arrayWithoutHoles.js");
var _arrayWithoutHolesJsDefault = parcelHelpers.interopDefault(_arrayWithoutHolesJs);
var _iterableToArrayJs = require("./iterableToArray.js");
var _iterableToArrayJsDefault = parcelHelpers.interopDefault(_iterableToArrayJs);
var _unsupportedIterableToArrayJs = require("./unsupportedIterableToArray.js");
var _unsupportedIterableToArrayJsDefault = parcelHelpers.interopDefault(_unsupportedIterableToArrayJs);
var _nonIterableSpreadJs = require("./nonIterableSpread.js");
var _nonIterableSpreadJsDefault = parcelHelpers.interopDefault(_nonIterableSpreadJs);
function _toConsumableArray(arr) {
    return _arrayWithoutHolesJsDefault.default(arr) || _iterableToArrayJsDefault.default(arr) || _unsupportedIterableToArrayJsDefault.default(arr) || _nonIterableSpreadJsDefault.default();
}
exports.default = _toConsumableArray;

},{"./arrayWithoutHoles.js":"6GkIh","./iterableToArray.js":"jlPRW","./unsupportedIterableToArray.js":"j2RQL","./nonIterableSpread.js":"jZKsH","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6GkIh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeToArrayJs = require("./arrayLikeToArray.js");
var _arrayLikeToArrayJsDefault = parcelHelpers.interopDefault(_arrayLikeToArrayJs);
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArrayJsDefault.default(arr);
}
exports.default = _arrayWithoutHoles;

},{"./arrayLikeToArray.js":"lExUy","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jlPRW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
exports.default = _iterableToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jZKsH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports.default = _nonIterableSpread;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"FeO1U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports.default = _classCallCheck;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"214ZK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
exports.default = _createClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5wGTe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8cvke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inherits;

},{"./setPrototypeOf.js":"eeTnk","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eeTnk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dE0vQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getPrototypeOfJs = require("./getPrototypeOf.js");
var _getPrototypeOfJsDefault = parcelHelpers.interopDefault(_getPrototypeOfJs);
var _isNativeReflectConstructJs = require("./isNativeReflectConstruct.js");
var _isNativeReflectConstructJsDefault = parcelHelpers.interopDefault(_isNativeReflectConstructJs);
var _possibleConstructorReturnJs = require("./possibleConstructorReturn.js");
var _possibleConstructorReturnJsDefault = parcelHelpers.interopDefault(_possibleConstructorReturnJs);
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstructJsDefault.default();
    return function _createSuperInternal() {
        var Super = _getPrototypeOfJsDefault.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOfJsDefault.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturnJsDefault.default(this, result);
    };
}
exports.default = _createSuper;

},{"./getPrototypeOf.js":"5c5GE","./isNativeReflectConstruct.js":"fNcw7","./possibleConstructorReturn.js":"2fTuw","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5c5GE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _getPrototypeOf(o1) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o1);
}
exports.default = _getPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fNcw7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
exports.default = _isNativeReflectConstruct;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2fTuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeofJs = require("./typeof.js");
var _typeofJsDefault = parcelHelpers.interopDefault(_typeofJs);
var _assertThisInitializedJs = require("./assertThisInitialized.js");
var _assertThisInitializedJsDefault = parcelHelpers.interopDefault(_assertThisInitializedJs);
function _possibleConstructorReturn(self, call) {
    if (call && (_typeofJsDefault.default(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitializedJsDefault.default(self);
}
exports.default = _possibleConstructorReturn;

},{"./typeof.js":"bgxCq","./assertThisInitialized.js":"5wGTe","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ijisy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactIs = require("react-is");
function toArray(children) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ret = [];
    _reactDefault.default.Children.forEach(children, function(child) {
        if ((child === undefined || child === null) && !option.keepEmpty) return;
        if (Array.isArray(child)) ret = ret.concat(toArray(child));
        else if (_reactIs.isFragment(child) && child.props) ret = ret.concat(toArray(child.props.children, option));
        else ret.push(child);
    });
    return ret;
}
exports.default = toArray;

},{"react":"b4tPL","react-is":"3cYn4","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3cYn4":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"3NNmm"}],"3NNmm":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"bfz97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warning", ()=>warning
);
parcelHelpers.export(exports, "note", ()=>note
);
parcelHelpers.export(exports, "resetWarned", ()=>resetWarned
);
parcelHelpers.export(exports, "call", ()=>call
);
parcelHelpers.export(exports, "warningOnce", ()=>warningOnce
);
parcelHelpers.export(exports, "noteOnce", ()=>noteOnce
);
/* eslint-disable no-console */ var warned = {};
function warning(valid, message) {
    // Support uglify
    if (!valid && console !== undefined) console.error("Warning: ".concat(message));
}
function note(valid, message) {
    // Support uglify
    if (!valid && console !== undefined) console.warn("Note: ".concat(message));
}
function resetWarned() {
    warned = {};
}
function call(method, valid, message) {
    if (!valid && !warned[message]) {
        method(false, message);
        warned[message] = true;
    }
}
function warningOnce(valid, message) {
    call(warning, valid, message);
}
function noteOnce(valid, message) {
    call(note, valid, message);
}
exports.default = warningOnce; /* eslint-enable */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lSL4V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_MARK", ()=>HOOK_MARK
);
var _react = require("react");
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var HOOK_MARK = 'RC_FORM_INTERNAL_HOOKS'; // eslint-disable-next-line @typescript-eslint/no-explicit-any
var warningFunc = function warningFunc() {
    _warningDefault.default(false, 'Can not find FormContext. Please make sure you wrap Field under Form.');
};
var Context = /*#__PURE__*/ _react.createContext({
    getFieldValue: warningFunc,
    getFieldsValue: warningFunc,
    getFieldError: warningFunc,
    getFieldWarning: warningFunc,
    getFieldsError: warningFunc,
    isFieldsTouched: warningFunc,
    isFieldTouched: warningFunc,
    isFieldValidating: warningFunc,
    isFieldsValidating: warningFunc,
    resetFields: warningFunc,
    setFields: warningFunc,
    setFieldsValue: warningFunc,
    validateFields: warningFunc,
    submit: warningFunc,
    getInternalHooks: function getInternalHooks() {
        warningFunc();
        return {
            dispatch: warningFunc,
            initEntityValue: warningFunc,
            registerField: warningFunc,
            useSubscribe: warningFunc,
            setInitialValues: warningFunc,
            destroyForm: warningFunc,
            setCallbacks: warningFunc,
            getFields: warningFunc,
            setValidateMessages: warningFunc,
            setPreserve: warningFunc,
            getInitialValue: warningFunc
        };
    }
});
exports.default = Context;

},{"react":"b4tPL","rc-util/es/warning":"bfz97","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jAHiK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
function toArray(value) {
    if (value === undefined || value === null) return [];
    return Array.isArray(value) ? value : [
        value
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7K6v8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateRules", ()=>validateRules
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _regenerator = require("@babel/runtime/regenerator");
var _regeneratorDefault = parcelHelpers.interopDefault(_regenerator);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _asyncToGenerator = require("@babel/runtime/helpers/esm/asyncToGenerator");
var _asyncToGeneratorDefault = parcelHelpers.interopDefault(_asyncToGenerator);
var _asyncValidator = require("async-validator");
var _asyncValidatorDefault = parcelHelpers.interopDefault(_asyncValidator);
var _react = require("react");
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _messages = require("./messages");
var _valueUtil = require("./valueUtil"); // Remove incorrect original ts define
var AsyncValidator = _asyncValidatorDefault.default;
/**
 * Replace with template.
 *   `I'm ${name}` + { name: 'bamboo' } = I'm bamboo
 */ function replaceMessage(template, kv) {
    return template.replace(/\$\{\w+\}/g, function(str) {
        var key = str.slice(2, -1);
        return kv[key];
    });
}
function validateRule(_x, _x2, _x3, _x4, _x5) {
    return _validateRule.apply(this, arguments);
}
/**
 * We use `async-validator` to validate the value.
 * But only check one value in a time to avoid namePath validate issue.
 */ function _validateRule() {
    _validateRule = _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee2(name, value, rule, options, messageVariables) {
        var cloneRule, subRuleField, validator, messages, result, subResults, kv, fillVariableResult;
        return _regeneratorDefault.default.wrap(function _callee2$(_context2) {
            while(true)switch(_context2.prev = _context2.next){
                case 0:
                    cloneRule = _objectSpread2Default.default({}, rule); // Bug of `async-validator`
                    // https://github.com/react-component/field-form/issues/316
                    // https://github.com/react-component/field-form/issues/313
                    delete cloneRule.ruleIndex; // We should special handle array validate
                    subRuleField = null;
                    if (cloneRule && cloneRule.type === 'array' && cloneRule.defaultField) {
                        subRuleField = cloneRule.defaultField;
                        delete cloneRule.defaultField;
                    }
                    validator = new AsyncValidator(_definePropertyDefault.default({}, name, [
                        cloneRule
                    ]));
                    messages = _valueUtil.setValues({}, _messages.defaultValidateMessages, options.validateMessages);
                    validator.messages(messages);
                    result = [];
                    _context2.prev = 8;
                    _context2.next = 11;
                    return Promise.resolve(validator.validate(_definePropertyDefault.default({}, name, value), _objectSpread2Default.default({}, options)));
                case 11:
                    _context2.next = 16;
                    break;
                case 13:
                    _context2.prev = 13;
                    _context2.t0 = _context2["catch"](8);
                    if (_context2.t0.errors) result = _context2.t0.errors.map(function(_ref4, index) {
                        var message = _ref4.message;
                        return /*#__PURE__*/ _react.isValidElement(message) ? /*#__PURE__*/ _react.cloneElement(message, {
                            key: "error_".concat(index)
                        }) : message;
                    });
                    else {
                        console.error(_context2.t0);
                        result = [
                            messages.default
                        ];
                    }
                case 16:
                    if (!(!result.length && subRuleField)) {
                        _context2.next = 21;
                        break;
                    }
                    _context2.next = 19;
                    return Promise.all(value.map(function(subValue, i) {
                        return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
                    }));
                case 19:
                    subResults = _context2.sent;
                    return _context2.abrupt("return", subResults.reduce(function(prev, errors) {
                        return [].concat(_toConsumableArrayDefault.default(prev), _toConsumableArrayDefault.default(errors));
                    }, []));
                case 21:
                    // Replace message with variables
                    kv = _objectSpread2Default.default(_objectSpread2Default.default({}, rule), {}, {
                        name: name,
                        enum: (rule.enum || []).join(', ')
                    }, messageVariables);
                    fillVariableResult = result.map(function(error) {
                        if (typeof error === 'string') return replaceMessage(error, kv);
                        return error;
                    });
                    return _context2.abrupt("return", fillVariableResult);
                case 24:
                case "end":
                    return _context2.stop();
            }
        }, _callee2, null, [
            [
                8,
                13
            ]
        ]);
    }));
    return _validateRule.apply(this, arguments);
}
function validateRules(namePath, value, rules, options, validateFirst, messageVariables) {
    var name = namePath.join('.'); // Fill rule with context
    var filledRules = rules.map(function(currentRule, ruleIndex) {
        var originValidatorFunc = currentRule.validator;
        var cloneRule = _objectSpread2Default.default(_objectSpread2Default.default({}, currentRule), {}, {
            ruleIndex: ruleIndex
        }); // Replace validator if needed
        if (originValidatorFunc) cloneRule.validator = function(rule, val, callback) {
            var hasPromise = false; // Wrap callback only accept when promise not provided
            var wrappedCallback = function wrappedCallback() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                // Wait a tick to make sure return type is a promise
                Promise.resolve().then(function() {
                    _warningDefault.default(!hasPromise, 'Your validator function has already return a promise. `callback` will be ignored.');
                    if (!hasPromise) callback.apply(void 0, args);
                });
            }; // Get promise
            var promise = originValidatorFunc(rule, val, wrappedCallback);
            hasPromise = promise && typeof promise.then === 'function' && typeof promise.catch === 'function';
            /**
         * 1. Use promise as the first priority.
         * 2. If promise not exist, use callback with warning instead
         */ _warningDefault.default(hasPromise, '`callback` is deprecated. Please return a promise instead.');
            if (hasPromise) promise.then(function() {
                callback();
            }).catch(function(err) {
                callback(err || ' ');
            });
        };
        return cloneRule;
    }).sort(function(_ref, _ref2) {
        var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
        var w2 = _ref2.warningOnly, i2 = _ref2.ruleIndex;
        if (!!w1 === !!w2) // Let keep origin order
        return i1 - i2;
        if (w1) return 1;
        return -1;
    }); // Do validate rules
    var summaryPromise;
    if (validateFirst === true) // >>>>> Validate by serialization
    summaryPromise = new Promise(/*#__PURE__*/ function() {
        var _ref3 = _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee(resolve, reject) {
            var i, rule, errors;
            return _regeneratorDefault.default.wrap(function _callee$(_context) {
                while(true)switch(_context.prev = _context.next){
                    case 0:
                        i = 0;
                    case 1:
                        if (!(i < filledRules.length)) {
                            _context.next = 12;
                            break;
                        }
                        rule = filledRules[i];
                        _context.next = 5;
                        return validateRule(name, value, rule, options, messageVariables);
                    case 5:
                        errors = _context.sent;
                        if (!errors.length) {
                            _context.next = 9;
                            break;
                        }
                        reject([
                            {
                                errors: errors,
                                rule: rule
                            }
                        ]);
                        return _context.abrupt("return");
                    case 9:
                        i += 1;
                        _context.next = 1;
                        break;
                    case 12:
                        /* eslint-enable */ resolve([]);
                    case 13:
                    case "end":
                        return _context.stop();
                }
            }, _callee);
        }));
        return function(_x6, _x7) {
            return _ref3.apply(this, arguments);
        };
    }());
    else {
        // >>>>> Validate by parallel
        var rulePromises = filledRules.map(function(rule) {
            return validateRule(name, value, rule, options, messageVariables).then(function(errors) {
                return {
                    errors: errors,
                    rule: rule
                };
            });
        });
        summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
            // Always change to rejection for Field to catch
            return Promise.reject(errors);
        });
    } // Internal catch error to avoid console error log.
    summaryPromise.catch(function(e) {
        return e;
    });
    return summaryPromise;
}
function finishOnAllFailed(_x8) {
    return _finishOnAllFailed.apply(this, arguments);
}
function _finishOnAllFailed() {
    _finishOnAllFailed = _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee3(rulePromises) {
        return _regeneratorDefault.default.wrap(function _callee3$(_context3) {
            while(true)switch(_context3.prev = _context3.next){
                case 0:
                    return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
                        var _ref5;
                        var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArrayDefault.default(errorsList));
                        return errors;
                    }));
                case 1:
                case "end":
                    return _context3.stop();
            }
        }, _callee3);
    }));
    return _finishOnAllFailed.apply(this, arguments);
}
function finishOnFirstFailed(_x9) {
    return _finishOnFirstFailed.apply(this, arguments);
}
function _finishOnFirstFailed() {
    _finishOnFirstFailed = _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee4(rulePromises) {
        var count;
        return _regeneratorDefault.default.wrap(function _callee4$(_context4) {
            while(true)switch(_context4.prev = _context4.next){
                case 0:
                    count = 0;
                    return _context4.abrupt("return", new Promise(function(resolve) {
                        rulePromises.forEach(function(promise) {
                            promise.then(function(ruleError) {
                                if (ruleError.errors.length) resolve([
                                    ruleError
                                ]);
                                count += 1;
                                if (count === rulePromises.length) resolve([]);
                            });
                        });
                    }));
                case 2:
                case "end":
                    return _context4.stop();
            }
        }, _callee4);
    }));
    return _finishOnFirstFailed.apply(this, arguments);
}

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/regenerator":"hhhh4","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/asyncToGenerator":"aCTuK","async-validator":"3rq9i","react":"b4tPL","rc-util/es/warning":"bfz97","./messages":"fPMJK","./valueUtil":"4yOs8","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hhhh4":[function(require,module,exports) {
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":"3NN7Q"}],"3NN7Q":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
    } catch (err1) {
        define = function(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value1 = result.value;
                if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return PromiseImpl.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return PromiseImpl.resolve(value1).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next1.next = next1;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(module.exports);
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
    else Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"aCTuK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
exports.default = _asyncToGenerator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3rq9i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Schema
);
var process = require("process");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o1) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o1);
}
function _setPrototypeOf(o2, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o2, p1);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent1, args1, Class1) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class2) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class2);
}
/* eslint no-console:0 */ var formatRegExp = /%[sdj%]/g;
var warning = function warning() {}; // don't print warning message when in production env or node runtime
if (typeof process !== 'undefined' && process.env && true && typeof window !== 'undefined' && typeof document !== 'undefined') warning = function warning(type1, errors) {
    if (typeof console !== 'undefined' && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === 'undefined') {
        if (errors.every(function(e) {
            return typeof e === 'string';
        })) console.warn(type1, errors);
    }
};
function convertFieldsError(errors) {
    if (!errors || !errors.length) return null;
    var fields = {};
    errors.forEach(function(error) {
        var field = error.field;
        fields[field] = fields[field] || [];
        fields[field].push(error);
    });
    return fields;
}
function format(template) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    var i = 0;
    var len = args.length;
    if (typeof template === 'function') return template.apply(null, args);
    if (typeof template === 'string') {
        var str = template.replace(formatRegExp, function(x) {
            if (x === '%%') return '%';
            if (i >= len) return x;
            switch(x){
                case '%s':
                    return String(args[i++]);
                case '%d':
                    return Number(args[i++]);
                case '%j':
                    try {
                        return JSON.stringify(args[i++]);
                    } catch (_) {
                        return '[Circular]';
                    }
                    break;
                default:
                    return x;
            }
        });
        return str;
    }
    return template;
}
function isNativeStringType(type2) {
    return type2 === 'string' || type2 === 'url' || type2 === 'hex' || type2 === 'email' || type2 === 'date' || type2 === 'pattern';
}
function isEmptyValue(value, type3) {
    if (value === undefined || value === null) return true;
    if (type3 === 'array' && Array.isArray(value) && !value.length) return true;
    if (isNativeStringType(type3) && typeof value === 'string' && !value) return true;
    return false;
}
function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count(errors) {
        results.push.apply(results, errors || []);
        total++;
        if (total === arrLength) callback(results);
    }
    arr.forEach(function(a) {
        func(a, count);
    });
}
function asyncSerialArray(arr, func, callback) {
    var index = 0;
    var arrLength = arr.length;
    function next(errors) {
        if (errors && errors.length) {
            callback(errors);
            return;
        }
        var original = index;
        index = index + 1;
        if (original < arrLength) func(arr[original], next);
        else callback([]);
    }
    next([]);
}
function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
        ret.push.apply(ret, objArr[k] || []);
    });
    return ret;
}
var AsyncValidationError = /*#__PURE__*/ function(_Error) {
    _inheritsLoose(AsyncValidationError1, _Error);
    function AsyncValidationError1(errors, fields) {
        var _this;
        _this = _Error.call(this, 'Async Validation Error') || this;
        _this.errors = errors;
        _this.fields = fields;
        return _this;
    }
    return AsyncValidationError1;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
        var _pending = new Promise(function(resolve, reject) {
            var next = function next(errors) {
                callback(errors);
                return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
            };
            var flattenArr = flattenObjArr(objArr);
            asyncSerialArray(flattenArr, func, next);
        });
        _pending["catch"](function(e) {
            return e;
        });
        return _pending;
    }
    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
        var next = function next(errors) {
            results.push.apply(results, errors);
            total++;
            if (total === objArrLength) {
                callback(results);
                return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
            }
        };
        if (!objArrKeys.length) {
            callback(results);
            resolve(source);
        }
        objArrKeys.forEach(function(key) {
            var arr = objArr[key];
            if (firstFields.indexOf(key) !== -1) asyncSerialArray(arr, func, next);
            else asyncParallelArray(arr, func, next);
        });
    });
    pending["catch"](function(e) {
        return e;
    });
    return pending;
}
function isErrorObj(obj) {
    return !!(obj && obj.message !== undefined);
}
function getValue(value, path) {
    var v = value;
    for(var i = 0; i < path.length; i++){
        if (v == undefined) return v;
        v = v[path[i]];
    }
    return v;
}
function complementError(rule, source) {
    return function(oe) {
        var fieldValue;
        if (rule.fullFields) fieldValue = getValue(source, rule.fullFields);
        else fieldValue = source[oe.field || rule.fullField];
        if (isErrorObj(oe)) {
            oe.field = oe.field || rule.fullField;
            oe.fieldValue = fieldValue;
            return oe;
        }
        return {
            message: typeof oe === 'function' ? oe() : oe,
            fieldValue: fieldValue,
            field: oe.field || rule.fullField
        };
    };
}
function deepMerge(target, source) {
    if (source) {
        for(var s in source)if (source.hasOwnProperty(s)) {
            var value = source[s];
            if (typeof value === 'object' && typeof target[s] === 'object') target[s] = _extends({}, target[s], value);
            else target[s] = value;
        }
    }
    return target;
}
var required$1 = function required(rule, value, source, errors, options, type4) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) errors.push(format(options.messages.required, rule.fullField));
};
/**
 *  Rule for validating whitespace.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */ var whitespace = function whitespace(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === '') errors.push(format(options.messages.whitespace, rule.fullField));
};
/* eslint max-len:0 */ var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
    integer: function integer(value) {
        return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
        return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
        return Array.isArray(value);
    },
    regexp: function regexp(value) {
        if (value instanceof RegExp) return true;
        try {
            return new RegExp(value), true;
        } catch (e) {
            return false;
        }
    },
    date: function date(value) {
        return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());
    },
    number: function number(value) {
        if (isNaN(value)) return false;
        return typeof value === 'number';
    },
    object: function object(value) {
        return typeof value === 'object' && !types.array(value);
    },
    method: function method(value) {
        return typeof value === 'function';
    },
    email: function email(value) {
        return typeof value === 'string' && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
        return typeof value === 'string' && value.length <= 2048 && !!value.match(pattern$2.url);
    },
    hex: function hex(value) {
        return typeof value === 'string' && !!value.match(pattern$2.hex);
    }
};
var type$1 = function type(rule, value, source, errors, options) {
    if (rule.required && value === undefined) {
        required$1(rule, value, source, errors, options);
        return;
    }
    var custom = [
        'integer',
        'float',
        'array',
        'regexp',
        'object',
        'method',
        'email',
        'number',
        'date',
        'url',
        'hex'
    ];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
        if (!types[ruleType](value)) errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
         // straight typeof check
    } else if (ruleType && typeof value !== rule.type) errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
};
var range = function range(rule, value, source, errors, options) {
    var len = typeof rule.len === 'number';
    var min = typeof rule.min === 'number';
    var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === 'number';
    var str = typeof value === 'string';
    var arr = Array.isArray(value);
    if (num) key = 'number';
    else if (str) key = 'string';
    else if (arr) key = 'array';
     // if the value is not of a supported type for range validation
    // the validation rule rule should use the
    // type property to also test for a particular type
    if (!key) return false;
    if (arr) val = value.length;
    if (str) // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
    val = value.replace(spRegexp, '_').length;
    if (len) {
        if (val !== rule.len) errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    } else if (min && !max && val < rule.min) errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    else if (max && !min && val > rule.max) errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    else if (min && max && (val < rule.min || val > rule.max)) errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
};
var ENUM$1 = 'enum';
var enumerable$1 = function enumerable(rule, value, source, errors, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    if (rule[ENUM$1].indexOf(value) === -1) errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(', ')));
};
var pattern$1 = function pattern(rule, value, source, errors, options) {
    if (rule.pattern) {
        if (rule.pattern instanceof RegExp) {
            // if a RegExp instance is passed, reset `lastIndex` in case its `global`
            // flag is accidentally set to `true`, which in a validation scenario
            // is not necessary and the result might be misleading
            rule.pattern.lastIndex = 0;
            if (!rule.pattern.test(value)) errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        } else if (typeof rule.pattern === 'string') {
            var _pattern = new RegExp(rule.pattern);
            if (!_pattern.test(value)) errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
    }
};
var rules = {
    required: required$1,
    whitespace: whitespace,
    type: type$1,
    range: range,
    "enum": enumerable$1,
    pattern: pattern$1
};
var string = function string(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value, 'string') && !rule.required) return callback();
        rules.required(rule, value, source, errors, options, 'string');
        if (!isEmptyValue(value, 'string')) {
            rules.type(rule, value, source, errors, options);
            rules.range(rule, value, source, errors, options);
            rules.pattern(rule, value, source, errors, options);
            if (rule.whitespace === true) rules.whitespace(rule, value, source, errors, options);
        }
    }
    callback(errors);
};
var method = function method(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) rules.type(rule, value, source, errors, options);
    }
    callback(errors);
};
var number = function number(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (value === '') value = undefined;
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) {
            rules.type(rule, value, source, errors, options);
            rules.range(rule, value, source, errors, options);
        }
    }
    callback(errors);
};
var _boolean = function _boolean(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) rules.type(rule, value, source, errors, options);
    }
    callback(errors);
};
var regexp = function regexp(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (!isEmptyValue(value)) rules.type(rule, value, source, errors, options);
    }
    callback(errors);
};
var integer = function integer(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) {
            rules.type(rule, value, source, errors, options);
            rules.range(rule, value, source, errors, options);
        }
    }
    callback(errors);
};
var floatFn = function floatFn(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) {
            rules.type(rule, value, source, errors, options);
            rules.range(rule, value, source, errors, options);
        }
    }
    callback(errors);
};
var array = function array(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if ((value === undefined || value === null) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options, 'array');
        if (value !== undefined && value !== null) {
            rules.type(rule, value, source, errors, options);
            rules.range(rule, value, source, errors, options);
        }
    }
    callback(errors);
};
var object = function object(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) rules.type(rule, value, source, errors, options);
    }
    callback(errors);
};
var ENUM = 'enum';
var enumerable = function enumerable(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (value !== undefined) rules[ENUM](rule, value, source, errors, options);
    }
    callback(errors);
};
var pattern = function pattern(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value, 'string') && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (!isEmptyValue(value, 'string')) rules.pattern(rule, value, source, errors, options);
    }
    callback(errors);
};
var date = function date(rule, value, callback, source, options) {
    // console.log('integer rule called %j', rule);
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);
    if (validate) {
        if (isEmptyValue(value, 'date') && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
        if (!isEmptyValue(value, 'date')) {
            var dateObject;
            if (value instanceof Date) dateObject = value;
            else dateObject = new Date(value);
            rules.type(rule, dateObject, source, errors, options);
            if (dateObject) rules.range(rule, dateObject.getTime(), source, errors, options);
        }
    }
    callback(errors);
};
var required = function required(rule, value, callback, source, options) {
    var errors = [];
    var type5 = Array.isArray(value) ? 'array' : typeof value;
    rules.required(rule, value, source, errors, options, type5);
    callback(errors);
};
var type = function type(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value, ruleType) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options, ruleType);
        if (!isEmptyValue(value, ruleType)) rules.type(rule, value, source, errors, options);
    }
    callback(errors);
};
var any = function any(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
        if (isEmptyValue(value) && !rule.required) return callback();
        rules.required(rule, value, source, errors, options);
    }
    callback(errors);
};
var validators = {
    string: string,
    method: method,
    number: number,
    "boolean": _boolean,
    regexp: regexp,
    integer: integer,
    "float": floatFn,
    array: array,
    object: object,
    "enum": enumerable,
    pattern: pattern,
    date: date,
    url: type,
    hex: type,
    email: type,
    required: required,
    any: any
};
function newMessages() {
    return {
        "default": 'Validation error on field %s',
        required: '%s is required',
        "enum": '%s must be one of %s',
        whitespace: '%s cannot be empty',
        date: {
            format: '%s date %s is invalid for format %s',
            parse: '%s date could not be parsed, %s is invalid ',
            invalid: '%s date %s is invalid'
        },
        types: {
            string: '%s is not a %s',
            method: '%s is not a %s (function)',
            array: '%s is not an %s',
            object: '%s is not an %s',
            number: '%s is not a %s',
            date: '%s is not a %s',
            "boolean": '%s is not a %s',
            integer: '%s is not an %s',
            "float": '%s is not a %s',
            regexp: '%s is not a valid %s',
            email: '%s is not a valid %s',
            url: '%s is not a valid %s',
            hex: '%s is not a valid %s'
        },
        string: {
            len: '%s must be exactly %s characters',
            min: '%s must be at least %s characters',
            max: '%s cannot be longer than %s characters',
            range: '%s must be between %s and %s characters'
        },
        number: {
            len: '%s must equal %s',
            min: '%s cannot be less than %s',
            max: '%s cannot be greater than %s',
            range: '%s must be between %s and %s'
        },
        array: {
            len: '%s must be exactly %s in length',
            min: '%s cannot be less than %s in length',
            max: '%s cannot be greater than %s in length',
            range: '%s must be between %s and %s in length'
        },
        pattern: {
            mismatch: '%s value %s does not match pattern %s'
        },
        clone: function clone() {
            var cloned = JSON.parse(JSON.stringify(this));
            cloned.clone = this.clone;
            return cloned;
        }
    };
}
var messages = newMessages();
/**
 *  Encapsulates a validation schema.
 *
 *  @param descriptor An object declaring validation rules
 *  for this schema.
 */ var Schema = /*#__PURE__*/ function() {
    // ========================= Static =========================
    // ======================== Instance ========================
    function Schema1(descriptor) {
        this.rules = null;
        this._messages = messages;
        this.define(descriptor);
    }
    var _proto = Schema1.prototype;
    _proto.define = function define(rules1) {
        var _this = this;
        if (!rules1) throw new Error('Cannot configure a schema with no rules');
        if (typeof rules1 !== 'object' || Array.isArray(rules1)) throw new Error('Rules must be an object');
        this.rules = {};
        Object.keys(rules1).forEach(function(name) {
            var item = rules1[name];
            _this.rules[name] = Array.isArray(item) ? item : [
                item
            ];
        });
    };
    _proto.messages = function messages(_messages) {
        if (_messages) this._messages = deepMerge(newMessages(), _messages);
        return this._messages;
    };
    _proto.validate = function validate(source_, o, oc) {
        var _this2 = this;
        if (o === void 0) o = {};
        if (oc === void 0) oc = function oc() {};
        var source = source_;
        var options = o;
        var callback = oc;
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (!this.rules || Object.keys(this.rules).length === 0) {
            if (callback) callback(null, source);
            return Promise.resolve(source);
        }
        function complete(results) {
            var errors = [];
            var fields = {};
            function add(e) {
                if (Array.isArray(e)) {
                    var _errors;
                    errors = (_errors = errors).concat.apply(_errors, e);
                } else errors.push(e);
            }
            for(var i = 0; i < results.length; i++)add(results[i]);
            if (!errors.length) callback(null, source);
            else {
                fields = convertFieldsError(errors);
                callback(errors, fields);
            }
        }
        if (options.messages) {
            var messages$1 = this.messages();
            if (messages$1 === messages) messages$1 = newMessages();
            deepMerge(messages$1, options.messages);
            options.messages = messages$1;
        } else options.messages = this.messages();
        var series = {};
        var keys = options.keys || Object.keys(this.rules);
        keys.forEach(function(z) {
            var arr = _this2.rules[z];
            var value = source[z];
            arr.forEach(function(r) {
                var rule = r;
                if (typeof rule.transform === 'function') {
                    if (source === source_) source = _extends({}, source);
                    value = source[z] = rule.transform(value);
                }
                if (typeof rule === 'function') rule = {
                    validator: rule
                };
                else rule = _extends({}, rule);
                 // Fill validator. Skip if nothing need to validate
                rule.validator = _this2.getValidationMethod(rule);
                if (!rule.validator) return;
                rule.field = z;
                rule.fullField = rule.fullField || z;
                rule.type = _this2.getType(rule);
                series[z] = series[z] || [];
                series[z].push({
                    rule: rule,
                    value: value,
                    source: source,
                    field: z
                });
            });
        });
        var errorFields = {};
        return asyncMap(series, options, function(data, doIt) {
            var rule = data.rule;
            var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');
            deep = deep && (rule.required || !rule.required && data.value);
            rule.field = data.field;
            function addFullField(key, schema) {
                return _extends({}, schema, {
                    fullField: rule.fullField + "." + key,
                    fullFields: rule.fullFields ? [].concat(rule.fullFields, [
                        key
                    ]) : [
                        key
                    ]
                });
            }
            function cb(e) {
                if (e === void 0) e = [];
                var errorList = Array.isArray(e) ? e : [
                    e
                ];
                if (!options.suppressWarning && errorList.length) Schema1.warning('async-validator:', errorList);
                if (errorList.length && rule.message !== undefined) errorList = [].concat(rule.message);
                 // Fill error info
                var filledErrors = errorList.map(complementError(rule, source));
                if (options.first && filledErrors.length) {
                    errorFields[rule.field] = 1;
                    return doIt(filledErrors);
                }
                if (!deep) doIt(filledErrors);
                else {
                    // if rule is required but the target object
                    // does not exist fail at the rule level and don't
                    // go deeper
                    if (rule.required && !data.value) {
                        if (rule.message !== undefined) filledErrors = [].concat(rule.message).map(complementError(rule, source));
                        else if (options.error) filledErrors = [
                            options.error(rule, format(options.messages.required, rule.field))
                        ];
                        return doIt(filledErrors);
                    }
                    var fieldsSchema = {};
                    if (rule.defaultField) Object.keys(data.value).map(function(key) {
                        fieldsSchema[key] = rule.defaultField;
                    });
                    fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);
                    var paredFieldsSchema = {};
                    Object.keys(fieldsSchema).forEach(function(field) {
                        var fieldSchema = fieldsSchema[field];
                        var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [
                            fieldSchema
                        ];
                        paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
                    });
                    var schema = new Schema1(paredFieldsSchema);
                    schema.messages(options.messages);
                    if (data.rule.options) {
                        data.rule.options.messages = options.messages;
                        data.rule.options.error = options.error;
                    }
                    schema.validate(data.value, data.rule.options || options, function(errs) {
                        var finalErrors = [];
                        if (filledErrors && filledErrors.length) finalErrors.push.apply(finalErrors, filledErrors);
                        if (errs && errs.length) finalErrors.push.apply(finalErrors, errs);
                        doIt(finalErrors.length ? finalErrors : null);
                    });
                }
            }
            var res;
            if (rule.asyncValidator) res = rule.asyncValidator(rule, data.value, cb, data.source, options);
            else if (rule.validator) {
                res = rule.validator(rule, data.value, cb, data.source, options);
                if (res === true) cb();
                else if (res === false) cb(typeof rule.message === 'function' ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
                else if (res instanceof Array) cb(res);
                else if (res instanceof Error) cb(res.message);
            }
            if (res && res.then) res.then(function() {
                return cb();
            }, function(e) {
                return cb(e);
            });
        }, function(results) {
            complete(results);
        }, source);
    };
    _proto.getType = function getType(rule) {
        if (rule.type === undefined && rule.pattern instanceof RegExp) rule.type = 'pattern';
        if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) throw new Error(format('Unknown rule type %s', rule.type));
        return rule.type || 'string';
    };
    _proto.getValidationMethod = function getValidationMethod(rule) {
        if (typeof rule.validator === 'function') return rule.validator;
        var keys = Object.keys(rule);
        var messageIndex = keys.indexOf('message');
        if (messageIndex !== -1) keys.splice(messageIndex, 1);
        if (keys.length === 1 && keys[0] === 'required') return validators.required;
        return validators[this.getType(rule)] || undefined;
    };
    return Schema1;
}();
Schema.register = function register(type6, validator) {
    if (typeof validator !== 'function') throw new Error('Cannot register a validator by type, validator is not a function');
    validators[type6] = validator;
};
Schema.warning = warning;
Schema.messages = messages;
Schema.validators = validators;

},{"process":"gq3cc","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gq3cc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"fPMJK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultValidateMessages", ()=>defaultValidateMessages
);
var typeTemplate = "'${name}' is not a valid ${type}";
var defaultValidateMessages = {
    default: "Validation error on field '${name}'",
    required: "'${name}' is required",
    enum: "'${name}' must be one of [${enum}]",
    whitespace: "'${name}' cannot be empty",
    date: {
        format: "'${name}' is invalid for format date",
        parse: "'${name}' could not be parsed as date",
        invalid: "'${name}' is invalid date"
    },
    types: {
        string: typeTemplate,
        method: typeTemplate,
        array: typeTemplate,
        object: typeTemplate,
        number: typeTemplate,
        date: typeTemplate,
        boolean: typeTemplate,
        integer: typeTemplate,
        float: typeTemplate,
        regexp: typeTemplate,
        email: typeTemplate,
        url: typeTemplate,
        hex: typeTemplate
    },
    string: {
        len: "'${name}' must be exactly ${len} characters",
        min: "'${name}' must be at least ${min} characters",
        max: "'${name}' cannot be longer than ${max} characters",
        range: "'${name}' must be between ${min} and ${max} characters"
    },
    number: {
        len: "'${name}' must equal ${len}",
        min: "'${name}' cannot be less than ${min}",
        max: "'${name}' cannot be greater than ${max}",
        range: "'${name}' must be between ${min} and ${max}"
    },
    array: {
        len: "'${name}' must be exactly ${len} in length",
        min: "'${name}' cannot be less than ${min} in length",
        max: "'${name}' cannot be greater than ${max} in length",
        range: "'${name}' must be between ${min} and ${max} in length"
    },
    pattern: {
        mismatch: "'${name}' does not match pattern ${pattern}"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4yOs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert name to internal supported format.
 * This function should keep since we still thinking if need support like `a.b.c` format.
 * 'a' => ['a']
 * 123 => [123]
 * ['a', 123] => ['a', 123]
 */ parcelHelpers.export(exports, "getNamePath", ()=>getNamePath
);
parcelHelpers.export(exports, "getValue", ()=>getValue
);
parcelHelpers.export(exports, "setValue", ()=>setValue
);
parcelHelpers.export(exports, "cloneByNamePathList", ()=>cloneByNamePathList
);
parcelHelpers.export(exports, "containsNamePath", ()=>containsNamePath
);
parcelHelpers.export(exports, "setValues", ()=>setValues
);
parcelHelpers.export(exports, "matchNamePath", ()=>matchNamePath
);
parcelHelpers.export(exports, "isSimilar", ()=>isSimilar
);
parcelHelpers.export(exports, "defaultGetValueFromEvent", ()=>defaultGetValueFromEvent
);
/**
 * Moves an array item from one position in an array to another.
 *
 * Note: This is a pure function so a new array will be returned, instead
 * of altering the array argument.
 *
 * @param array         Array in which to move an item.         (required)
 * @param moveIndex     The index of the item to move.          (required)
 * @param toIndex       The index to move item at moveIndex to. (required)
 */ parcelHelpers.export(exports, "move", ()=>move
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _get = require("rc-util/es/utils/get");
var _getDefault = parcelHelpers.interopDefault(_get);
var _set = require("rc-util/es/utils/set");
var _setDefault = parcelHelpers.interopDefault(_set);
var _typeUtil = require("./typeUtil");
var _cloneDeep = require("../utils/cloneDeep");
var _cloneDeepDefault = parcelHelpers.interopDefault(_cloneDeep);
function getNamePath(path) {
    return _typeUtil.toArray(path);
}
function getValue(store, namePath) {
    var value = _getDefault.default(store, namePath);
    return value;
}
function setValue(store, namePath, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var newStore = _setDefault.default(store, namePath, value, removeIfUndefined);
    return newStore;
}
function cloneByNamePathList(store, namePathList) {
    var newStore = {};
    namePathList.forEach(function(namePath) {
        var value = getValue(store, namePath);
        newStore = setValue(newStore, namePath, value);
    });
    return newStore;
}
function containsNamePath(namePathList, namePath) {
    return namePathList && namePathList.some(function(path) {
        return matchNamePath(path, namePath);
    });
}
function isObject(obj) {
    return _typeofDefault.default(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
/**
 * Copy values into store and return a new values object
 * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }
 */ function internalSetValues(store, values) {
    var newStore = Array.isArray(store) ? _toConsumableArrayDefault.default(store) : _objectSpread2Default.default({}, store);
    if (!values) return newStore;
    Object.keys(values).forEach(function(key) {
        var prevValue = newStore[key];
        var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value
        var recursive = isObject(prevValue) && isObject(value);
        newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : _cloneDeepDefault.default(value); // Clone deep for arrays
    });
    return newStore;
}
function setValues(store) {
    for(var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)restValues[_key - 1] = arguments[_key];
    return restValues.reduce(function(current, newStore) {
        return internalSetValues(current, newStore);
    }, store);
}
function matchNamePath(namePath, changedNamePath) {
    if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) return false;
    return namePath.every(function(nameUnit, i) {
        return changedNamePath[i] === nameUnit;
    });
}
function isSimilar(source, target) {
    if (source === target) return true;
    if (!source && target || source && !target) return false;
    if (!source || !target || _typeofDefault.default(source) !== 'object' || _typeofDefault.default(target) !== 'object') return false;
    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    var keys = new Set([].concat(_toConsumableArrayDefault.default(sourceKeys), _toConsumableArrayDefault.default(targetKeys)));
    return _toConsumableArrayDefault.default(keys).every(function(key) {
        var sourceValue = source[key];
        var targetValue = target[key];
        if (typeof sourceValue === 'function' && typeof targetValue === 'function') return true;
        return sourceValue === targetValue;
    });
}
function defaultGetValueFromEvent(valuePropName) {
    var event = arguments.length <= 1 ? undefined : arguments[1];
    if (event && event.target && _typeofDefault.default(event.target) === 'object' && valuePropName in event.target) return event.target[valuePropName];
    return event;
}
function move(array, moveIndex, toIndex) {
    var length = array.length;
    if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) return array;
    var item = array[moveIndex];
    var diff = moveIndex - toIndex;
    if (diff > 0) // move left
    return [].concat(_toConsumableArrayDefault.default(array.slice(0, toIndex)), [
        item
    ], _toConsumableArrayDefault.default(array.slice(toIndex, moveIndex)), _toConsumableArrayDefault.default(array.slice(moveIndex + 1, length)));
    if (diff < 0) // move right
    return [].concat(_toConsumableArrayDefault.default(array.slice(0, moveIndex)), _toConsumableArrayDefault.default(array.slice(moveIndex + 1, toIndex + 1)), [
        item
    ], _toConsumableArrayDefault.default(array.slice(toIndex + 1, length)));
    return array;
}

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/typeof":"bgxCq","rc-util/es/utils/get":"5Qmmx","rc-util/es/utils/set":"kWxQ3","./typeUtil":"jAHiK","../utils/cloneDeep":"hplgI","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5Qmmx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function get(entity, path) {
    var current = entity;
    for(var i = 0; i < path.length; i += 1){
        if (current === null || current === undefined) return undefined;
        current = current[path[i]];
    }
    return current;
}
exports.default = get;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kWxQ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _toArray = require("@babel/runtime/helpers/esm/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _get = require("./get");
var _getDefault = parcelHelpers.interopDefault(_get);
function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) return value;
    var _paths = _toArrayDefault.default(paths), path = _paths[0], restPath = _paths.slice(1);
    var clone;
    if (!entity && typeof path === 'number') clone = [];
    else if (Array.isArray(entity)) clone = _toConsumableArrayDefault.default(entity);
    else clone = _objectSpread2Default.default({}, entity);
     // Delete prop if `removeIfUndefined` and value is undefined
    if (removeIfUndefined && value === undefined && restPath.length === 1) delete clone[path][restPath[0]];
    else clone[path] = internalSet(clone[path], restPath, value, removeIfUndefined);
    return clone;
}
function set(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // Do nothing if `removeIfUndefined` and parent object not exist
    if (paths.length && removeIfUndefined && value === undefined && !_getDefault.default(entity, paths.slice(0, -1))) return entity;
    return internalSet(entity, paths, value, removeIfUndefined);
}
exports.default = set;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/toArray":"eemka","./get":"5Qmmx","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eemka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithHolesJs = require("./arrayWithHoles.js");
var _arrayWithHolesJsDefault = parcelHelpers.interopDefault(_arrayWithHolesJs);
var _iterableToArrayJs = require("./iterableToArray.js");
var _iterableToArrayJsDefault = parcelHelpers.interopDefault(_iterableToArrayJs);
var _unsupportedIterableToArrayJs = require("./unsupportedIterableToArray.js");
var _unsupportedIterableToArrayJsDefault = parcelHelpers.interopDefault(_unsupportedIterableToArrayJs);
var _nonIterableRestJs = require("./nonIterableRest.js");
var _nonIterableRestJsDefault = parcelHelpers.interopDefault(_nonIterableRestJs);
function _toArray(arr) {
    return _arrayWithHolesJsDefault.default(arr) || _iterableToArrayJsDefault.default(arr) || _unsupportedIterableToArrayJsDefault.default(arr) || _nonIterableRestJsDefault.default();
}
exports.default = _toArray;

},{"./arrayWithHoles.js":"a7IdE","./iterableToArray.js":"jlPRW","./unsupportedIterableToArray.js":"j2RQL","./nonIterableRest.js":"5fSPK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hplgI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
function cloneDeep(val) {
    if (Array.isArray(val)) return cloneArrayDeep(val);
    else if (_typeofDefault.default(val) === 'object' && val !== null) return cloneObjectDeep(val);
    return val;
}
function cloneObjectDeep(val) {
    if (Object.getPrototypeOf(val) === Object.prototype) {
        var res = {};
        for(var key in val)res[key] = cloneDeep(val[key]);
        return res;
    }
    return val;
}
function cloneArrayDeep(val) {
    return val.map(function(item) {
        return cloneDeep(item);
    });
}
exports.default = cloneDeep;

},{"@babel/runtime/helpers/esm/typeof":"bgxCq","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jSz43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _react = require("react");
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _fieldContext = require("./FieldContext");
var _fieldContextDefault = parcelHelpers.interopDefault(_fieldContext);
var _field = require("./Field");
var _fieldDefault = parcelHelpers.interopDefault(_field);
var _valueUtil = require("./utils/valueUtil");
var _listContext = require("./ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var List = function List(_ref) {
    var name = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules = _ref.rules, validateTrigger = _ref.validateTrigger;
    var context = _react.useContext(_fieldContextDefault.default);
    var keyRef = _react.useRef({
        keys: [],
        id: 0
    });
    var keyManager = keyRef.current;
    var prefixName = _react.useMemo(function() {
        var parentPrefixName = _valueUtil.getNamePath(context.prefixName) || [];
        return [].concat(_toConsumableArrayDefault.default(parentPrefixName), _toConsumableArrayDefault.default(_valueUtil.getNamePath(name)));
    }, [
        context.prefixName,
        name
    ]);
    var fieldContext = _react.useMemo(function() {
        return _objectSpread2Default.default(_objectSpread2Default.default({}, context), {}, {
            prefixName: prefixName
        });
    }, [
        context,
        prefixName
    ]); // List context
    var listContext = _react.useMemo(function() {
        return {
            getKey: function getKey(namePath) {
                var len = prefixName.length;
                var pathName = namePath[len];
                return [
                    keyManager.keys[pathName],
                    namePath.slice(len + 1)
                ];
            }
        };
    }, [
        prefixName
    ]); // User should not pass `children` as other type.
    if (typeof children !== 'function') {
        _warningDefault.default(false, 'Form.List only accepts function as children.');
        return null;
    }
    var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {
        var source = _ref2.source;
        if (source === 'internal') return false;
        return prevValue !== nextValue;
    };
    return /*#__PURE__*/ _react.createElement(_listContextDefault.default.Provider, {
        value: listContext
    }, /*#__PURE__*/ _react.createElement(_fieldContextDefault.default.Provider, {
        value: fieldContext
    }, /*#__PURE__*/ _react.createElement(_fieldDefault.default, {
        name: [],
        shouldUpdate: shouldUpdate,
        rules: rules,
        validateTrigger: validateTrigger,
        initialValue: initialValue,
        isList: true
    }, function(_ref3, meta) {
        var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange = _ref3.onChange;
        var getFieldValue = context.getFieldValue;
        var getNewValue = function getNewValue() {
            var values = getFieldValue(prefixName || []);
            return values || [];
        };
        /**
     * Always get latest value in case user update fields by `form` api.
     */ var operations = {
            add: function add(defaultValue, index) {
                // Mapping keys
                var newValue = getNewValue();
                if (index >= 0 && index <= newValue.length) {
                    keyManager.keys = [].concat(_toConsumableArrayDefault.default(keyManager.keys.slice(0, index)), [
                        keyManager.id
                    ], _toConsumableArrayDefault.default(keyManager.keys.slice(index)));
                    onChange([].concat(_toConsumableArrayDefault.default(newValue.slice(0, index)), [
                        defaultValue
                    ], _toConsumableArrayDefault.default(newValue.slice(index))));
                } else {
                    if (index < 0 || index > newValue.length) _warningDefault.default(false, 'The second parameter of the add function should be a valid positive number.');
                    keyManager.keys = [].concat(_toConsumableArrayDefault.default(keyManager.keys), [
                        keyManager.id
                    ]);
                    onChange([].concat(_toConsumableArrayDefault.default(newValue), [
                        defaultValue
                    ]));
                }
                keyManager.id += 1;
            },
            remove: function remove(index) {
                var newValue = getNewValue();
                var indexSet = new Set(Array.isArray(index) ? index : [
                    index
                ]);
                if (indexSet.size <= 0) return;
                keyManager.keys = keyManager.keys.filter(function(_, keysIndex) {
                    return !indexSet.has(keysIndex);
                }); // Trigger store change
                onChange(newValue.filter(function(_, valueIndex) {
                    return !indexSet.has(valueIndex);
                }));
            },
            move: function move(from, to) {
                if (from === to) return;
                var newValue = getNewValue(); // Do not handle out of range
                if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) return;
                keyManager.keys = _valueUtil.move(keyManager.keys, from, to); // Trigger store change
                onChange(_valueUtil.move(newValue, from, to));
            }
        };
        var listValue = value || [];
        if (!Array.isArray(listValue)) {
            listValue = [];
            _warningDefault.default(false, "Current value of '".concat(prefixName.join(' > '), "' is not an array type."));
        }
        return children(listValue.map(function(__, index) {
            var key = keyManager.keys[index];
            if (key === undefined) {
                keyManager.keys[index] = keyManager.id;
                key = keyManager.keys[index];
                keyManager.id += 1;
            }
            return {
                name: index,
                key: key,
                isListField: true
            };
        }), operations, meta);
    })));
};
exports.default = List;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","react":"b4tPL","rc-util/es/warning":"bfz97","./FieldContext":"lSL4V","./Field":"dIEN8","./utils/valueUtil":"4yOs8","./ListContext":"8TM7s","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8TM7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var ListContext = /*#__PURE__*/ _react.createContext(null);
exports.default = ListContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aPf12":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormStore", ()=>FormStore
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _react = require("react");
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _fieldContext = require("./FieldContext");
var _asyncUtil = require("./utils/asyncUtil");
var _nameMap = require("./utils/NameMap");
var _nameMapDefault = parcelHelpers.interopDefault(_nameMap);
var _messages = require("./utils/messages");
var _valueUtil = require("./utils/valueUtil");
var _cloneDeep = require("./utils/cloneDeep");
var _cloneDeepDefault = parcelHelpers.interopDefault(_cloneDeep);
var _excluded = [
    "name",
    "errors"
];
var FormStore = /*#__PURE__*/ _createClassDefault.default(function FormStore1(forceRootUpdate) {
    var _this = this;
    _classCallCheckDefault.default(this, FormStore1);
    this.formHooked = false;
    this.forceRootUpdate = void 0;
    this.subscribable = true;
    this.store = {};
    this.fieldEntities = [];
    this.initialValues = {};
    this.callbacks = {};
    this.validateMessages = null;
    this.preserve = null;
    this.lastValidatePromise = null;
    this.getForm = function() {
        return {
            getFieldValue: _this.getFieldValue,
            getFieldsValue: _this.getFieldsValue,
            getFieldError: _this.getFieldError,
            getFieldWarning: _this.getFieldWarning,
            getFieldsError: _this.getFieldsError,
            isFieldsTouched: _this.isFieldsTouched,
            isFieldTouched: _this.isFieldTouched,
            isFieldValidating: _this.isFieldValidating,
            isFieldsValidating: _this.isFieldsValidating,
            resetFields: _this.resetFields,
            setFields: _this.setFields,
            setFieldsValue: _this.setFieldsValue,
            validateFields: _this.validateFields,
            submit: _this.submit,
            getInternalHooks: _this.getInternalHooks
        };
    };
    this.getInternalHooks = function(key) {
        if (key === _fieldContext.HOOK_MARK) {
            _this.formHooked = true;
            return {
                dispatch: _this.dispatch,
                initEntityValue: _this.initEntityValue,
                registerField: _this.registerField,
                useSubscribe: _this.useSubscribe,
                setInitialValues: _this.setInitialValues,
                destroyForm: _this.destroyForm,
                setCallbacks: _this.setCallbacks,
                setValidateMessages: _this.setValidateMessages,
                getFields: _this.getFields,
                setPreserve: _this.setPreserve,
                getInitialValue: _this.getInitialValue
            };
        }
        _warningDefault.default(false, '`getInternalHooks` is internal usage. Should not call directly.');
        return null;
    };
    this.useSubscribe = function(subscribable) {
        _this.subscribable = subscribable;
    };
    this.prevWithoutPreserves = null;
    this.setInitialValues = function(initialValues, init) {
        _this.initialValues = initialValues || {};
        if (init) {
            var _this$prevWithoutPres;
            var nextStore = _valueUtil.setValues({}, initialValues, _this.store); // We will take consider prev form unmount fields.
            // When the field is not `preserve`, we need fill this with initialValues instead of store.
            (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 || _this$prevWithoutPres.map(function(_ref) {
                var namePath = _ref.key;
                nextStore = _valueUtil.setValue(nextStore, namePath, _valueUtil.getValue(initialValues, namePath));
            });
            _this.prevWithoutPreserves = null;
            _this.updateStore(nextStore);
        }
    };
    this.destroyForm = function() {
        var prevWithoutPreserves = new _nameMapDefault.default();
        _this.getFieldEntities(true).forEach(function(entity) {
            if (!entity.isPreserve()) prevWithoutPreserves.set(entity.getNamePath(), true);
        });
        _this.prevWithoutPreserves = prevWithoutPreserves;
    };
    this.getInitialValue = function(namePath) {
        var initValue = _valueUtil.getValue(_this.initialValues, namePath); // Not cloneDeep when without `namePath`
        return namePath.length ? _cloneDeepDefault.default(initValue) : initValue;
    };
    this.setCallbacks = function(callbacks) {
        _this.callbacks = callbacks;
    };
    this.setValidateMessages = function(validateMessages) {
        _this.validateMessages = validateMessages;
    };
    this.setPreserve = function(preserve) {
        _this.preserve = preserve;
    };
    this.timeoutId = null;
    this.warningUnhooked = function() {
        if (!_this.timeoutId && typeof window !== 'undefined') _this.timeoutId = setTimeout(function() {
            _this.timeoutId = null;
            if (!_this.formHooked) _warningDefault.default(false, 'Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?');
        });
    };
    this.updateStore = function(nextStore) {
        _this.store = nextStore;
    };
    this.getFieldEntities = function() {
        var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!pure) return _this.fieldEntities;
        return _this.fieldEntities.filter(function(field) {
            return field.getNamePath().length;
        });
    };
    this.getFieldsMap = function() {
        var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var cache = new _nameMapDefault.default();
        _this.getFieldEntities(pure).forEach(function(field) {
            var namePath = field.getNamePath();
            cache.set(namePath, field);
        });
        return cache;
    };
    this.getFieldEntitiesForNamePathList = function(nameList) {
        if (!nameList) return _this.getFieldEntities(true);
        var cache = _this.getFieldsMap(true);
        return nameList.map(function(name) {
            var namePath = _valueUtil.getNamePath(name);
            return cache.get(namePath) || {
                INVALIDATE_NAME_PATH: _valueUtil.getNamePath(name)
            };
        });
    };
    this.getFieldsValue = function(nameList, filterFunc) {
        _this.warningUnhooked();
        if (nameList === true && !filterFunc) return _this.store;
        var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);
        var filteredNameList = [];
        fieldEntities.forEach(function(entity) {
            var _entity$isListField;
            var namePath = 'INVALIDATE_NAME_PATH' in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath(); // Ignore when it's a list item and not specific the namePath,
            // since parent field is already take in count
            if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) return;
            if (!filterFunc) filteredNameList.push(namePath);
            else {
                var meta = 'getMeta' in entity ? entity.getMeta() : null;
                if (filterFunc(meta)) filteredNameList.push(namePath);
            }
        });
        return _valueUtil.cloneByNamePathList(_this.store, filteredNameList.map(_valueUtil.getNamePath));
    };
    this.getFieldValue = function(name) {
        _this.warningUnhooked();
        var namePath = _valueUtil.getNamePath(name);
        return _valueUtil.getValue(_this.store, namePath);
    };
    this.getFieldsError = function(nameList) {
        _this.warningUnhooked();
        var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
        return fieldEntities.map(function(entity, index) {
            if (entity && !('INVALIDATE_NAME_PATH' in entity)) return {
                name: entity.getNamePath(),
                errors: entity.getErrors(),
                warnings: entity.getWarnings()
            };
            return {
                name: _valueUtil.getNamePath(nameList[index]),
                errors: [],
                warnings: []
            };
        });
    };
    this.getFieldError = function(name) {
        _this.warningUnhooked();
        var namePath = _valueUtil.getNamePath(name);
        var fieldError = _this.getFieldsError([
            namePath
        ])[0];
        return fieldError.errors;
    };
    this.getFieldWarning = function(name) {
        _this.warningUnhooked();
        var namePath = _valueUtil.getNamePath(name);
        var fieldError = _this.getFieldsError([
            namePath
        ])[0];
        return fieldError.warnings;
    };
    this.isFieldsTouched = function() {
        _this.warningUnhooked();
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var arg0 = args[0], arg1 = args[1];
        var namePathList;
        var isAllFieldsTouched = false;
        if (args.length === 0) namePathList = null;
        else if (args.length === 1) {
            if (Array.isArray(arg0)) {
                namePathList = arg0.map(_valueUtil.getNamePath);
                isAllFieldsTouched = false;
            } else {
                namePathList = null;
                isAllFieldsTouched = arg0;
            }
        } else {
            namePathList = arg0.map(_valueUtil.getNamePath);
            isAllFieldsTouched = arg1;
        }
        var fieldEntities = _this.getFieldEntities(true);
        var isFieldTouched = function isFieldTouched(field) {
            return field.isFieldTouched();
        }; // ===== Will get fully compare when not config namePathList =====
        if (!namePathList) return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
         // Generate a nest tree for validate
        var map = new _nameMapDefault.default();
        namePathList.forEach(function(shortNamePath) {
            map.set(shortNamePath, []);
        });
        fieldEntities.forEach(function(field) {
            var fieldNamePath = field.getNamePath(); // Find matched entity and put into list
            namePathList.forEach(function(shortNamePath) {
                if (shortNamePath.every(function(nameUnit, i) {
                    return fieldNamePath[i] === nameUnit;
                })) map.update(shortNamePath, function(list) {
                    return [].concat(_toConsumableArrayDefault.default(list), [
                        field
                    ]);
                });
            });
        }); // Check if NameMap value is touched
        var isNamePathListTouched = function isNamePathListTouched(entities) {
            return entities.some(isFieldTouched);
        };
        var namePathListEntities = map.map(function(_ref2) {
            var value = _ref2.value;
            return value;
        });
        return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
    };
    this.isFieldTouched = function(name) {
        _this.warningUnhooked();
        return _this.isFieldsTouched([
            name
        ]);
    };
    this.isFieldsValidating = function(nameList) {
        _this.warningUnhooked();
        var fieldEntities = _this.getFieldEntities();
        if (!nameList) return fieldEntities.some(function(testField) {
            return testField.isFieldValidating();
        });
        var namePathList = nameList.map(_valueUtil.getNamePath);
        return fieldEntities.some(function(testField) {
            var fieldNamePath = testField.getNamePath();
            return _valueUtil.containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
        });
    };
    this.isFieldValidating = function(name) {
        _this.warningUnhooked();
        return _this.isFieldsValidating([
            name
        ]);
    };
    this.resetWithFieldInitialValue = function() {
        var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Create cache
        var cache = new _nameMapDefault.default();
        var fieldEntities = _this.getFieldEntities(true);
        fieldEntities.forEach(function(field) {
            var initialValue = field.props.initialValue;
            var namePath = field.getNamePath(); // Record only if has `initialValue`
            if (initialValue !== undefined) {
                var records = cache.get(namePath) || new Set();
                records.add({
                    entity: field,
                    value: initialValue
                });
                cache.set(namePath, records);
            }
        }); // Reset
        var resetWithFields = function resetWithFields(entities) {
            entities.forEach(function(field) {
                var initialValue = field.props.initialValue;
                if (initialValue !== undefined) {
                    var namePath = field.getNamePath();
                    var formInitialValue = _this.getInitialValue(namePath);
                    if (formInitialValue !== undefined) // Warning if conflict with form initialValues and do not modify value
                    _warningDefault.default(false, "Form already set 'initialValues' with path '".concat(namePath.join('.'), "'. Field can not overwrite it."));
                    else {
                        var records = cache.get(namePath);
                        if (records && records.size > 1) // Warning if multiple field set `initialValue`and do not modify value
                        _warningDefault.default(false, "Multiple Field with path '".concat(namePath.join('.'), "' set 'initialValue'. Can not decide which one to pick."));
                        else if (records) {
                            var originValue = _this.getFieldValue(namePath); // Set `initialValue`
                            if (!info.skipExist || originValue === undefined) _this.updateStore(_valueUtil.setValue(_this.store, namePath, _toConsumableArrayDefault.default(records)[0].value));
                        }
                    }
                }
            });
        };
        var requiredFieldEntities;
        if (info.entities) requiredFieldEntities = info.entities;
        else if (info.namePathList) {
            requiredFieldEntities = [];
            info.namePathList.forEach(function(namePath) {
                var records = cache.get(namePath);
                if (records) {
                    var _requiredFieldEntitie;
                    (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArrayDefault.default(_toConsumableArrayDefault.default(records).map(function(r) {
                        return r.entity;
                    })));
                }
            });
        } else requiredFieldEntities = fieldEntities;
        resetWithFields(requiredFieldEntities);
    };
    this.resetFields = function(nameList) {
        _this.warningUnhooked();
        var prevStore = _this.store;
        if (!nameList) {
            _this.updateStore(_valueUtil.setValues({}, _this.initialValues));
            _this.resetWithFieldInitialValue();
            _this.notifyObservers(prevStore, null, {
                type: 'reset'
            });
            return;
        } // Reset by `nameList`
        var namePathList = nameList.map(_valueUtil.getNamePath);
        namePathList.forEach(function(namePath) {
            var initialValue = _this.getInitialValue(namePath);
            _this.updateStore(_valueUtil.setValue(_this.store, namePath, initialValue));
        });
        _this.resetWithFieldInitialValue({
            namePathList: namePathList
        });
        _this.notifyObservers(prevStore, namePathList, {
            type: 'reset'
        });
    };
    this.setFields = function(fields) {
        _this.warningUnhooked();
        var prevStore = _this.store;
        fields.forEach(function(fieldData) {
            var name = fieldData.name, errors = fieldData.errors, data = _objectWithoutPropertiesDefault.default(fieldData, _excluded);
            var namePath = _valueUtil.getNamePath(name); // Value
            if ('value' in data) _this.updateStore(_valueUtil.setValue(_this.store, namePath, data.value));
            _this.notifyObservers(prevStore, [
                namePath
            ], {
                type: 'setField',
                data: fieldData
            });
        });
    };
    this.getFields = function() {
        var entities = _this.getFieldEntities(true);
        var fields = entities.map(function(field) {
            var namePath = field.getNamePath();
            var meta = field.getMeta();
            var fieldData = _objectSpread2Default.default(_objectSpread2Default.default({}, meta), {}, {
                name: namePath,
                value: _this.getFieldValue(namePath)
            });
            Object.defineProperty(fieldData, 'originRCField', {
                value: true
            });
            return fieldData;
        });
        return fields;
    };
    this.initEntityValue = function(entity) {
        var initialValue = entity.props.initialValue;
        if (initialValue !== undefined) {
            var namePath = entity.getNamePath();
            var prevValue = _valueUtil.getValue(_this.store, namePath);
            if (prevValue === undefined) _this.updateStore(_valueUtil.setValue(_this.store, namePath, initialValue));
        }
    };
    this.registerField = function(entity) {
        _this.fieldEntities.push(entity); // Set initial values
        if (entity.props.initialValue !== undefined) {
            var prevStore = _this.store;
            _this.resetWithFieldInitialValue({
                entities: [
                    entity
                ],
                skipExist: true
            });
            _this.notifyObservers(prevStore, [
                entity.getNamePath()
            ], {
                type: 'valueUpdate',
                source: 'internal'
            });
        } // un-register field callback
        return function(isListField, preserve) {
            var subNamePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            _this.fieldEntities = _this.fieldEntities.filter(function(item) {
                return item !== entity;
            }); // Clean up store value if not preserve
            var mergedPreserve = preserve !== undefined ? preserve : _this.preserve;
            if (mergedPreserve === false && (!isListField || subNamePath.length > 1)) {
                var namePath = entity.getNamePath();
                var defaultValue = isListField ? undefined : _this.getInitialValue(namePath);
                if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
                    return !_valueUtil.matchNamePath(field.getNamePath(), namePath);
                })) {
                    var _prevStore = _this.store;
                    _this.updateStore(_valueUtil.setValue(_prevStore, namePath, defaultValue, true)); // Notify that field is unmount
                    _this.notifyObservers(_prevStore, [
                        namePath
                    ], {
                        type: 'remove'
                    }); // Dependencies update
                    _this.triggerDependenciesUpdate(_prevStore, namePath);
                }
            }
        };
    };
    this.dispatch = function(action) {
        switch(action.type){
            case 'updateValue':
                var namePath = action.namePath, value = action.value;
                _this.updateValue(namePath, value);
                break;
            case 'validateField':
                var _namePath = action.namePath, triggerName = action.triggerName;
                _this.validateFields([
                    _namePath
                ], {
                    triggerName: triggerName
                });
                break;
            default:
        }
    };
    this.notifyObservers = function(prevStore, namePathList, info) {
        if (_this.subscribable) {
            var mergedInfo = _objectSpread2Default.default(_objectSpread2Default.default({}, info), {}, {
                store: _this.getFieldsValue(true)
            });
            _this.getFieldEntities().forEach(function(_ref3) {
                var onStoreChange = _ref3.onStoreChange;
                onStoreChange(prevStore, namePathList, mergedInfo);
            });
        } else _this.forceRootUpdate();
    };
    this.triggerDependenciesUpdate = function(prevStore, namePath) {
        var childrenFields = _this.getDependencyChildrenFields(namePath);
        if (childrenFields.length) _this.validateFields(childrenFields);
        _this.notifyObservers(prevStore, childrenFields, {
            type: 'dependenciesUpdate',
            relatedFields: [
                namePath
            ].concat(_toConsumableArrayDefault.default(childrenFields))
        });
        return childrenFields;
    };
    this.updateValue = function(name, value) {
        var namePath = _valueUtil.getNamePath(name);
        var prevStore = _this.store;
        _this.updateStore(_valueUtil.setValue(_this.store, namePath, value));
        _this.notifyObservers(prevStore, [
            namePath
        ], {
            type: 'valueUpdate',
            source: 'internal'
        }); // Dependencies update
        var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath); // trigger callback function
        var onValuesChange = _this.callbacks.onValuesChange;
        if (onValuesChange) {
            var changedValues = _valueUtil.cloneByNamePathList(_this.store, [
                namePath
            ]);
            onValuesChange(changedValues, _this.getFieldsValue());
        }
        _this.triggerOnFieldsChange([
            namePath
        ].concat(_toConsumableArrayDefault.default(childrenFields)));
    };
    this.setFieldsValue = function(store) {
        _this.warningUnhooked();
        var prevStore = _this.store;
        if (store) _this.updateStore(_valueUtil.setValues(_this.store, store));
        _this.notifyObservers(prevStore, null, {
            type: 'valueUpdate',
            source: 'external'
        });
    };
    this.getDependencyChildrenFields = function(rootNamePath) {
        var children = new Set();
        var childrenFields = [];
        var dependencies2fields = new _nameMapDefault.default();
        /**
     * Generate maps
     * Can use cache to save perf if user report performance issue with this
     */ _this.getFieldEntities().forEach(function(field) {
            var dependencies = field.props.dependencies;
            (dependencies || []).forEach(function(dependency) {
                var dependencyNamePath = _valueUtil.getNamePath(dependency);
                dependencies2fields.update(dependencyNamePath, function() {
                    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();
                    fields.add(field);
                    return fields;
                });
            });
        });
        var fillChildren1 = function fillChildren(namePath) {
            var fields = dependencies2fields.get(namePath) || new Set();
            fields.forEach(function(field) {
                if (!children.has(field)) {
                    children.add(field);
                    var fieldNamePath = field.getNamePath();
                    if (field.isFieldDirty() && fieldNamePath.length) {
                        childrenFields.push(fieldNamePath);
                        fillChildren(fieldNamePath);
                    }
                }
            });
        };
        fillChildren1(rootNamePath);
        return childrenFields;
    };
    this.triggerOnFieldsChange = function(namePathList, filedErrors) {
        var onFieldsChange = _this.callbacks.onFieldsChange;
        if (onFieldsChange) {
            var fields = _this.getFields();
            /**
       * Fill errors since `fields` may be replaced by controlled fields
       */ if (filedErrors) {
                var cache = new _nameMapDefault.default();
                filedErrors.forEach(function(_ref4) {
                    var name = _ref4.name, errors = _ref4.errors;
                    cache.set(name, errors);
                });
                fields.forEach(function(field) {
                    // eslint-disable-next-line no-param-reassign
                    field.errors = cache.get(field.name) || field.errors;
                });
            }
            var changedFields = fields.filter(function(_ref5) {
                var fieldName = _ref5.name;
                return _valueUtil.containsNamePath(namePathList, fieldName);
            });
            onFieldsChange(changedFields, fields);
        }
    };
    this.validateFields = function(nameList, options) {
        _this.warningUnhooked();
        var provideNameList = !!nameList;
        var namePathList = provideNameList ? nameList.map(_valueUtil.getNamePath) : []; // Collect result in promise list
        var promiseList = [];
        _this.getFieldEntities(true).forEach(function(field) {
            // Add field if not provide `nameList`
            if (!provideNameList) namePathList.push(field.getNamePath());
            /**
       * Recursive validate if configured.
       * TODO: perf improvement @zombieJ
       */ if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {
                var namePath = field.getNamePath();
                if (// ['name'] -> ['name','list']
                namePath.every(function(nameUnit, i) {
                    return nameList[i] === nameUnit || nameList[i] === undefined;
                })) namePathList.push(namePath);
            } // Skip if without rule
            if (!field.props.rules || !field.props.rules.length) return;
            var fieldNamePath = field.getNamePath(); // Add field validate rule in to promise list
            if (!provideNameList || _valueUtil.containsNamePath(namePathList, fieldNamePath)) {
                var promise = field.validateRules(_objectSpread2Default.default({
                    validateMessages: _objectSpread2Default.default(_objectSpread2Default.default({}, _messages.defaultValidateMessages), _this.validateMessages)
                }, options)); // Wrap promise with field
                promiseList.push(promise.then(function() {
                    return {
                        name: fieldNamePath,
                        errors: [],
                        warnings: []
                    };
                }).catch(function(ruleErrors) {
                    var mergedErrors = [];
                    var mergedWarnings = [];
                    ruleErrors.forEach(function(_ref6) {
                        var warningOnly = _ref6.rule.warningOnly, errors = _ref6.errors;
                        if (warningOnly) mergedWarnings.push.apply(mergedWarnings, _toConsumableArrayDefault.default(errors));
                        else mergedErrors.push.apply(mergedErrors, _toConsumableArrayDefault.default(errors));
                    });
                    if (mergedErrors.length) return Promise.reject({
                        name: fieldNamePath,
                        errors: mergedErrors,
                        warnings: mergedWarnings
                    });
                    return {
                        name: fieldNamePath,
                        errors: mergedErrors,
                        warnings: mergedWarnings
                    };
                }));
            }
        });
        var summaryPromise = _asyncUtil.allPromiseFinish(promiseList);
        _this.lastValidatePromise = summaryPromise; // Notify fields with rule that validate has finished and need update
        summaryPromise.catch(function(results) {
            return results;
        }).then(function(results) {
            var resultNamePathList = results.map(function(_ref7) {
                var name = _ref7.name;
                return name;
            });
            _this.notifyObservers(_this.store, resultNamePathList, {
                type: 'validateFinish'
            });
            _this.triggerOnFieldsChange(resultNamePathList, results);
        });
        var returnPromise = summaryPromise.then(function() {
            if (_this.lastValidatePromise === summaryPromise) return Promise.resolve(_this.getFieldsValue(namePathList));
            return Promise.reject([]);
        }).catch(function(results) {
            var errorList = results.filter(function(result) {
                return result && result.errors.length;
            });
            return Promise.reject({
                values: _this.getFieldsValue(namePathList),
                errorFields: errorList,
                outOfDate: _this.lastValidatePromise !== summaryPromise
            });
        }); // Do not throw in console
        returnPromise.catch(function(e) {
            return e;
        });
        return returnPromise;
    };
    this.submit = function() {
        _this.warningUnhooked();
        _this.validateFields().then(function(values) {
            var onFinish = _this.callbacks.onFinish;
            if (onFinish) try {
                onFinish(values);
            } catch (err) {
                // Should print error if user `onFinish` callback failed
                console.error(err);
            }
        }).catch(function(e) {
            var onFinishFailed = _this.callbacks.onFinishFailed;
            if (onFinishFailed) onFinishFailed(e);
        });
    };
    this.forceRootUpdate = forceRootUpdate;
});
function useForm(form) {
    var formRef = _react.useRef();
    var _React$useState = _react.useState({}), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), forceUpdate = _React$useState2[1];
    if (!formRef.current) {
        if (form) formRef.current = form;
        else {
            // Create a new FormStore if not provided
            var forceReRender = function forceReRender() {
                forceUpdate({});
            };
            var formStore = new FormStore(forceReRender);
            formRef.current = formStore.getForm();
        }
    }
    return [
        formRef.current
    ];
}
exports.default = useForm;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","react":"b4tPL","rc-util/es/warning":"bfz97","./FieldContext":"lSL4V","./utils/asyncUtil":"4OJQp","./utils/NameMap":"8Eznw","./utils/messages":"fPMJK","./utils/valueUtil":"4yOs8","./utils/cloneDeep":"hplgI","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4OJQp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "allPromiseFinish", ()=>allPromiseFinish
);
function allPromiseFinish(promiseList) {
    var hasError = false;
    var count = promiseList.length;
    var results = [];
    if (!promiseList.length) return Promise.resolve([]);
    return new Promise(function(resolve, reject) {
        promiseList.forEach(function(promise, index) {
            promise.catch(function(e) {
                hasError = true;
                return e;
            }).then(function(result) {
                count -= 1;
                results[index] = result;
                if (count > 0) return;
                if (hasError) reject(results);
                resolve(results);
            });
        });
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8Eznw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var SPLIT = '__@field_split__';
/**
 * Convert name path into string to fast the fetch speed of Map.
 */ function normalize(namePath) {
    return namePath.map(function(cell) {
        return "".concat(_typeofDefault.default(cell), ":").concat(cell);
    }) // Magic split
    .join(SPLIT);
}
/**
 * NameMap like a `Map` but accepts `string[]` as key.
 */ var NameMap = /*#__PURE__*/ function() {
    function NameMap1() {
        _classCallCheckDefault.default(this, NameMap1);
        this.kvs = new Map();
    }
    _createClassDefault.default(NameMap1, [
        {
            key: "set",
            value: function set(key, value) {
                this.kvs.set(normalize(key), value);
            }
        },
        {
            key: "get",
            value: function get(key) {
                return this.kvs.get(normalize(key));
            }
        },
        {
            key: "update",
            value: function update(key, updater) {
                var origin = this.get(key);
                var next = updater(origin);
                if (!next) this.delete(key);
                else this.set(key, next);
            }
        },
        {
            key: "delete",
            value: function _delete(key) {
                this.kvs.delete(normalize(key));
            } // Since we only use this in test, let simply realize this
        },
        {
            key: "map",
            value: function map(callback) {
                return _toConsumableArrayDefault.default(this.kvs.entries()).map(function(_ref) {
                    var _ref2 = _slicedToArrayDefault.default(_ref, 2), key = _ref2[0], value = _ref2[1];
                    var cells = key.split(SPLIT);
                    return callback({
                        key: cells.map(function(cell) {
                            var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArrayDefault.default(_cell$match, 3), type = _cell$match2[1], unit = _cell$match2[2];
                            return type === 'number' ? Number(unit) : unit;
                        }),
                        value: value
                    });
                });
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var json = {};
                this.map(function(_ref3) {
                    var key = _ref3.key, value = _ref3.value;
                    json[key.join('.')] = value;
                    return null;
                });
                return json;
            }
        }
    ]);
    return NameMap1;
}();
exports.default = NameMap;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/typeof":"bgxCq","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"i3nAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _useForm = require("./useForm");
var _useFormDefault = parcelHelpers.interopDefault(_useForm);
var _fieldContext = require("./FieldContext");
var _fieldContextDefault = parcelHelpers.interopDefault(_fieldContext);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _valueUtil = require("./utils/valueUtil");
var _excluded = [
    "name",
    "initialValues",
    "fields",
    "form",
    "preserve",
    "children",
    "component",
    "validateMessages",
    "validateTrigger",
    "onValuesChange",
    "onFieldsChange",
    "onFinish",
    "onFinishFailed"
];
var Form = function Form(_ref, ref) {
    var name = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component = _ref$component === void 0 ? 'form' : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? 'onChange' : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var formContext = _react.useContext(_formContextDefault.default); // We customize handle event since Context will makes all the consumer re-render:
    // https://reactjs.org/docs/context.html#contextprovider
    var _useForm1 = _useFormDefault.default(form), _useForm2 = _slicedToArrayDefault.default(_useForm1, 1), formInstance = _useForm2[0];
    var _formInstance$getInte = formInstance.getInternalHooks(_fieldContext.HOOK_MARK), useSubscribe = _formInstance$getInte.useSubscribe, setInitialValues = _formInstance$getInte.setInitialValues, setCallbacks = _formInstance$getInte.setCallbacks, setValidateMessages = _formInstance$getInte.setValidateMessages, setPreserve = _formInstance$getInte.setPreserve, destroyForm = _formInstance$getInte.destroyForm; // Pass ref with form instance
    _react.useImperativeHandle(ref, function() {
        return formInstance;
    }); // Register form into Context
    _react.useEffect(function() {
        formContext.registerForm(name, formInstance);
        return function() {
            formContext.unregisterForm(name);
        };
    }, [
        formContext,
        formInstance,
        name
    ]); // Pass props to store
    setValidateMessages(_objectSpread2Default.default(_objectSpread2Default.default({}, formContext.validateMessages), validateMessages));
    setCallbacks({
        onValuesChange: onValuesChange,
        onFieldsChange: function onFieldsChange(changedFields) {
            formContext.triggerFormChange(name, changedFields);
            if (_onFieldsChange) {
                for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)rest[_key - 1] = arguments[_key];
                _onFieldsChange.apply(void 0, [
                    changedFields
                ].concat(rest));
            }
        },
        onFinish: function onFinish(values) {
            formContext.triggerFormFinish(name, values);
            if (_onFinish) _onFinish(values);
        },
        onFinishFailed: onFinishFailed
    });
    setPreserve(preserve); // Set initial value, init store value when first mount
    var mountRef = _react.useRef(null);
    setInitialValues(initialValues, !mountRef.current);
    if (!mountRef.current) mountRef.current = true;
    _react.useEffect(function() {
        return destroyForm;
    }, []); // Prepare children by `children` type
    var childrenNode = children;
    var childrenRenderProps = typeof children === 'function';
    if (childrenRenderProps) {
        var values1 = formInstance.getFieldsValue(true);
        childrenNode = children(values1, formInstance);
    } // Not use subscribe when using render props
    useSubscribe(!childrenRenderProps); // Listen if fields provided. We use ref to save prev data here to avoid additional render
    var prevFieldsRef = _react.useRef();
    _react.useEffect(function() {
        if (!_valueUtil.isSimilar(prevFieldsRef.current || [], fields || [])) formInstance.setFields(fields || []);
        prevFieldsRef.current = fields;
    }, [
        fields,
        formInstance
    ]);
    var formContextValue = _react.useMemo(function() {
        return _objectSpread2Default.default(_objectSpread2Default.default({}, formInstance), {}, {
            validateTrigger: validateTrigger
        });
    }, [
        formInstance,
        validateTrigger
    ]);
    var wrapperNode = /*#__PURE__*/ _react.createElement(_fieldContextDefault.default.Provider, {
        value: formContextValue
    }, childrenNode);
    if (Component === false) return wrapperNode;
    return /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({}, restProps, {
        onSubmit: function onSubmit(event) {
            event.preventDefault();
            event.stopPropagation();
            formInstance.submit();
        },
        onReset: function onReset(event) {
            var _restProps$onReset;
            event.preventDefault();
            formInstance.resetFields();
            (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 || _restProps$onReset.call(restProps, event);
        }
    }), wrapperNode);
};
exports.default = Form;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","./useForm":"aPf12","./FieldContext":"lSL4V","./FormContext":"5oSST","./utils/valueUtil":"4yOs8","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5oSST":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormProvider", ()=>FormProvider
);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var FormContext = /*#__PURE__*/ _react.createContext({
    triggerFormChange: function triggerFormChange() {},
    triggerFormFinish: function triggerFormFinish() {},
    registerForm: function registerForm() {},
    unregisterForm: function unregisterForm() {}
});
var FormProvider = function FormProvider(_ref) {
    var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
    var formContext = _react.useContext(FormContext);
    var formsRef = _react.useRef({});
    return /*#__PURE__*/ _react.createElement(FormContext.Provider, {
        value: _objectSpread2Default.default(_objectSpread2Default.default({}, formContext), {}, {
            validateMessages: _objectSpread2Default.default(_objectSpread2Default.default({}, formContext.validateMessages), validateMessages),
            // =========================================================
            // =                  Global Form Control                  =
            // =========================================================
            triggerFormChange: function triggerFormChange(name, changedFields) {
                if (onFormChange) onFormChange(name, {
                    changedFields: changedFields,
                    forms: formsRef.current
                });
                formContext.triggerFormChange(name, changedFields);
            },
            triggerFormFinish: function triggerFormFinish(name, values) {
                if (onFormFinish) onFormFinish(name, {
                    values: values,
                    forms: formsRef.current
                });
                formContext.triggerFormFinish(name, values);
            },
            registerForm: function registerForm(name, form) {
                if (name) formsRef.current = _objectSpread2Default.default(_objectSpread2Default.default({}, formsRef.current), {}, _definePropertyDefault.default({}, name, form));
                formContext.registerForm(name, form);
            },
            unregisterForm: function unregisterForm(name) {
                var newForms = _objectSpread2Default.default({}, formsRef.current);
                delete newForms[name];
                formsRef.current = newForms;
                formContext.unregisterForm(name);
            }
        })
    }, children);
};
exports.default = FormContext;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lhbzA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useMemo(getValue, condition, shouldUpdate) {
    var cacheRef = _react.useRef({});
    if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
        cacheRef.current.value = getValue();
        cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
}
exports.default = useMemo;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jhCpc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ANT_MARK", ()=>ANT_MARK
);
parcelHelpers.export(exports, "default", ()=>LocaleProvider
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _memoizeOne = require("memoize-one");
var _memoizeOneDefault = parcelHelpers.interopDefault(_memoizeOne);
var _devWarning = require("../_util/devWarning");
var _devWarningDefault = parcelHelpers.interopDefault(_devWarning);
var _locale = require("../modal/locale");
var _context = require("./context");
var _contextDefault = parcelHelpers.interopDefault(_context);
var ANT_MARK = 'internalMark';
var LocaleProvider = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(LocaleProvider1, _React$Component);
    var _super = _createSuperDefault.default(LocaleProvider1);
    function LocaleProvider1(props) {
        var _this;
        _classCallCheckDefault.default(this, LocaleProvider1);
        _this = _super.call(this, props);
        _this.getMemoizedContextValue = _memoizeOneDefault.default(function(localeValue) {
            return _extendsDefault.default(_extendsDefault.default({}, localeValue), {
                exist: true
            });
        });
        _locale.changeConfirmLocale(props.locale && props.locale.Modal);
        _devWarningDefault.default(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale');
        return _this;
    }
    _createClassDefault.default(LocaleProvider1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                _locale.changeConfirmLocale(this.props.locale && this.props.locale.Modal);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var locale = this.props.locale;
                if (prevProps.locale !== locale) _locale.changeConfirmLocale(locale && locale.Modal);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                _locale.changeConfirmLocale();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, locale = _this$props.locale, children = _this$props.children;
                var contextValue = this.getMemoizedContextValue(locale);
                return /*#__PURE__*/ _react.createElement(_contextDefault.default.Provider, {
                    value: contextValue
                }, children);
            }
        }
    ]);
    return LocaleProvider1;
}(_react.Component);
LocaleProvider.defaultProps = {
    locale: {}
};

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","memoize-one":"cdCRd","../_util/devWarning":"dPrhV","../modal/locale":"1lLDg","./context":"jqrbc","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cdCRd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoizeOne
);
var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
};
function isEqual(first, second) {
    if (first === second) return true;
    if (safeIsNaN(first) && safeIsNaN(second)) return true;
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) return false;
    for(var i = 0; i < newInputs.length; i++){
        if (!isEqual(newInputs[i], lastInputs[i])) return false;
    }
    return true;
}
function memoizeOne(resultFn, isEqual1) {
    if (isEqual1 === void 0) isEqual1 = areInputsEqual;
    var cache = null;
    function memoized() {
        var newArgs = [];
        for(var _i = 0; _i < arguments.length; _i++)newArgs[_i] = arguments[_i];
        if (cache && cache.lastThis === this && isEqual1(newArgs, cache.lastArgs)) return cache.lastResult;
        var lastResult = resultFn.apply(this, newArgs);
        cache = {
            lastResult: lastResult,
            lastArgs: newArgs,
            lastThis: this
        };
        return lastResult;
    }
    memoized.clear = function clear() {
        cache = null;
    };
    return memoized;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dPrhV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resetWarned", ()=>_warning.resetWarned
);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
exports.default = function(valid, component, message) {
    _warningDefault.default(valid, "[antd: ".concat(component, "] ").concat(message));
};

},{"rc-util/es/warning":"bfz97","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1lLDg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "changeConfirmLocale", ()=>changeConfirmLocale
);
parcelHelpers.export(exports, "getConfirmLocale", ()=>getConfirmLocale
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _default = require("../locale/default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
var runtimeLocale = _extendsDefault.default({}, _defaultDefault.default.Modal);
function changeConfirmLocale(newLocale) {
    if (newLocale) runtimeLocale = _extendsDefault.default(_extendsDefault.default({}, runtimeLocale), newLocale);
    else runtimeLocale = _extendsDefault.default({}, _defaultDefault.default.Modal);
}
function getConfirmLocale() {
    return runtimeLocale;
}

},{"@babel/runtime/helpers/esm/extends":"9HBJh","../locale/default":"bQ1He","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bQ1He":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-template-curly-in-string */ var _enUS = require("rc-pagination/es/locale/en_US");
var _enUSDefault = parcelHelpers.interopDefault(_enUS);
var _enUS1 = require("../date-picker/locale/en_US");
var _enUSDefault1 = parcelHelpers.interopDefault(_enUS1);
var _enUS2 = require("../time-picker/locale/en_US");
var _enUSDefault2 = parcelHelpers.interopDefault(_enUS2);
var _enUS3 = require("../calendar/locale/en_US");
var _enUSDefault3 = parcelHelpers.interopDefault(_enUS3);
var typeTemplate = '${label} is not a valid ${type}';
var localeValues = {
    locale: 'en',
    Pagination: _enUSDefault.default,
    DatePicker: _enUSDefault1.default,
    TimePicker: _enUSDefault2.default,
    Calendar: _enUSDefault3.default,
    global: {
        placeholder: 'Please select'
    },
    Table: {
        filterTitle: 'Filter menu',
        filterConfirm: 'OK',
        filterReset: 'Reset',
        filterEmptyText: 'No filters',
        filterCheckall: 'Select all items',
        filterSearchPlaceholder: 'Search in filters',
        emptyText: 'No data',
        selectAll: 'Select current page',
        selectInvert: 'Invert current page',
        selectNone: 'Clear all data',
        selectionAll: 'Select all data',
        sortTitle: 'Sort',
        expand: 'Expand row',
        collapse: 'Collapse row',
        triggerDesc: 'Click to sort descending',
        triggerAsc: 'Click to sort ascending',
        cancelSort: 'Click to cancel sorting'
    },
    Modal: {
        okText: 'OK',
        cancelText: 'Cancel',
        justOkText: 'OK'
    },
    Popconfirm: {
        okText: 'OK',
        cancelText: 'Cancel'
    },
    Transfer: {
        titles: [
            '',
            ''
        ],
        searchPlaceholder: 'Search here',
        itemUnit: 'item',
        itemsUnit: 'items',
        remove: 'Remove',
        selectCurrent: 'Select current page',
        removeCurrent: 'Remove current page',
        selectAll: 'Select all data',
        removeAll: 'Remove all data',
        selectInvert: 'Invert current page'
    },
    Upload: {
        uploading: 'Uploading...',
        removeFile: 'Remove file',
        uploadError: 'Upload error',
        previewFile: 'Preview file',
        downloadFile: 'Download file'
    },
    Empty: {
        description: 'No Data'
    },
    Icon: {
        icon: 'icon'
    },
    Text: {
        edit: 'Edit',
        copy: 'Copy',
        copied: 'Copied',
        expand: 'Expand'
    },
    PageHeader: {
        back: 'Back'
    },
    Form: {
        optional: '(optional)',
        defaultValidateMessages: {
            "default": 'Field validation error for ${label}',
            required: 'Please enter ${label}',
            "enum": '${label} must be one of [${enum}]',
            whitespace: '${label} cannot be a blank character',
            date: {
                format: '${label} date format is invalid',
                parse: '${label} cannot be converted to a date',
                invalid: '${label} is an invalid date'
            },
            types: {
                string: typeTemplate,
                method: typeTemplate,
                array: typeTemplate,
                object: typeTemplate,
                number: typeTemplate,
                date: typeTemplate,
                "boolean": typeTemplate,
                integer: typeTemplate,
                "float": typeTemplate,
                regexp: typeTemplate,
                email: typeTemplate,
                url: typeTemplate,
                hex: typeTemplate
            },
            string: {
                len: '${label} must be ${len} characters',
                min: '${label} must be at least ${min} characters',
                max: '${label} must be up to ${max} characters',
                range: '${label} must be between ${min}-${max} characters'
            },
            number: {
                len: '${label} must be equal to ${len}',
                min: '${label} must be minimum ${min}',
                max: '${label} must be maximum ${max}',
                range: '${label} must be between ${min}-${max}'
            },
            array: {
                len: 'Must be ${len} ${label}',
                min: 'At least ${min} ${label}',
                max: 'At most ${max} ${label}',
                range: 'The amount of ${label} must be between ${min}-${max}'
            },
            pattern: {
                mismatch: '${label} does not match the pattern ${pattern}'
            }
        }
    },
    Image: {
        preview: 'Preview'
    }
};
exports.default = localeValues;

},{"rc-pagination/es/locale/en_US":"5oxwe","../date-picker/locale/en_US":"9mJKV","../time-picker/locale/en_US":"jj2ad","../calendar/locale/en_US":"fW0Dq","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5oxwe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Options.jsx
    items_per_page: '/ page',
    jump_to: 'Go to',
    jump_to_confirm: 'confirm',
    page: 'Page',
    // Pagination.jsx
    prev_page: 'Previous Page',
    next_page: 'Next Page',
    prev_5: 'Previous 5 Pages',
    next_5: 'Next 5 Pages',
    prev_3: 'Previous 3 Pages',
    next_3: 'Next 3 Pages',
    page_size: 'Page Size'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9mJKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _enUS = require("rc-picker/es/locale/en_US");
var _enUSDefault = parcelHelpers.interopDefault(_enUS);
var _enUS1 = require("../../time-picker/locale/en_US"); // Merge into a locale object
var _enUSDefault1 = parcelHelpers.interopDefault(_enUS1);
var locale = {
    lang: _extendsDefault.default({
        placeholder: 'Select date',
        yearPlaceholder: 'Select year',
        quarterPlaceholder: 'Select quarter',
        monthPlaceholder: 'Select month',
        weekPlaceholder: 'Select week',
        rangePlaceholder: [
            'Start date',
            'End date'
        ],
        rangeYearPlaceholder: [
            'Start year',
            'End year'
        ],
        rangeQuarterPlaceholder: [
            'Start quarter',
            'End quarter'
        ],
        rangeMonthPlaceholder: [
            'Start month',
            'End month'
        ],
        rangeWeekPlaceholder: [
            'Start week',
            'End week'
        ]
    }, _enUSDefault.default),
    timePickerLocale: _extendsDefault.default({}, _enUSDefault1.default)
}; // All settings at:
// https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json
exports.default = locale;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","rc-picker/es/locale/en_US":"d9JBP","../../time-picker/locale/en_US":"jj2ad","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"d9JBP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var locale = {
    locale: 'en_US',
    today: 'Today',
    now: 'Now',
    backToToday: 'Back to today',
    ok: 'Ok',
    clear: 'Clear',
    month: 'Month',
    year: 'Year',
    timeSelect: 'select time',
    dateSelect: 'select date',
    weekSelect: 'Choose a week',
    monthSelect: 'Choose a month',
    yearSelect: 'Choose a year',
    decadeSelect: 'Choose a decade',
    yearFormat: 'YYYY',
    dateFormat: 'M/D/YYYY',
    dayFormat: 'D',
    dateTimeFormat: 'M/D/YYYY HH:mm:ss',
    monthBeforeYear: true,
    previousMonth: 'Previous month (PageUp)',
    nextMonth: 'Next month (PageDown)',
    previousYear: 'Last year (Control + left)',
    nextYear: 'Next year (Control + right)',
    previousDecade: 'Last decade',
    nextDecade: 'Next decade',
    previousCentury: 'Last century',
    nextCentury: 'Next century'
};
exports.default = locale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jj2ad":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var locale = {
    placeholder: 'Select time',
    rangePlaceholder: [
        'Start time',
        'End time'
    ]
};
exports.default = locale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fW0Dq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enUS = require("../../date-picker/locale/en_US");
var _enUSDefault = parcelHelpers.interopDefault(_enUS);
exports.default = _enUSDefault.default;

},{"../../date-picker/locale/en_US":"9mJKV","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jqrbc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var LocaleContext = /*#__PURE__*/ _react.createContext(undefined);
exports.default = LocaleContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bz53l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>LocaleReceiver
);
parcelHelpers.export(exports, "useLocaleReceiver", ()=>useLocaleReceiver
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _default = require("./default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
var _context = require("./context");
var _contextDefault = parcelHelpers.interopDefault(_context);
var LocaleReceiver = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(LocaleReceiver1, _React$Component);
    var _super = _createSuperDefault.default(LocaleReceiver1);
    function LocaleReceiver1() {
        _classCallCheckDefault.default(this, LocaleReceiver1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(LocaleReceiver1, [
        {
            key: "getLocale",
            value: function getLocale() {
                var _this$props = this.props, componentName = _this$props.componentName, defaultLocale = _this$props.defaultLocale;
                var locale = defaultLocale || _defaultDefault.default[componentName !== null && componentName !== void 0 ? componentName : 'global'];
                var antLocale = this.context;
                var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
                return _extendsDefault.default(_extendsDefault.default({}, locale instanceof Function ? locale() : locale), localeFromContext || {});
            }
        },
        {
            key: "getLocaleCode",
            value: function getLocaleCode() {
                var antLocale = this.context;
                var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale
                if (antLocale && antLocale.exist && !localeCode) return _defaultDefault.default.locale;
                return localeCode;
            }
        },
        {
            key: "render",
            value: function render() {
                return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
            }
        }
    ]);
    return LocaleReceiver1;
}(_react.Component);
LocaleReceiver.defaultProps = {
    componentName: 'global'
};
LocaleReceiver.contextType = _contextDefault.default;
function useLocaleReceiver(componentName, defaultLocale) {
    var antLocale = _react.useContext(_contextDefault.default);
    var componentLocale = _react.useMemo(function() {
        var locale = defaultLocale || _defaultDefault.default[componentName || 'global'];
        var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
        return _extendsDefault.default(_extendsDefault.default({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
    }, [
        componentName,
        defaultLocale,
        antLocale
    ]);
    return [
        componentLocale
    ];
}

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","./default":"dDnZp","./context":"jqrbc","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dDnZp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _default = require("../locale/default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
exports.default = _defaultDefault.default;

},{"../locale/default":"bQ1He","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3oXVJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConfigContext", ()=>ConfigContext
);
parcelHelpers.export(exports, "ConfigConsumer", ()=>ConfigConsumer
);
/** @deprecated Use hooks instead. This is a legacy function */ parcelHelpers.export(exports, "withConfigConsumer", ()=>withConfigConsumer
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _renderEmpty = require("./renderEmpty");
var _renderEmptyDefault = parcelHelpers.interopDefault(_renderEmpty);
var defaultGetPrefixCls = function defaultGetPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : 'ant';
};
var ConfigContext = /*#__PURE__*/ _react.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls,
    renderEmpty: _renderEmptyDefault.default
});
var ConfigConsumer = ConfigContext.Consumer;
function withConfigConsumer(config) {
    return function withConfigConsumerFunc(Component) {
        // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods
        var SFC = function SFC(props) {
            return /*#__PURE__*/ _react.createElement(ConfigConsumer, null, function(configProps) {
                var basicPrefixCls = config.prefixCls;
                var getPrefixCls = configProps.getPrefixCls;
                var customizePrefixCls = props.prefixCls;
                var prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);
                return /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({}, configProps, props, {
                    prefixCls: prefixCls
                }));
            });
        };
        var cons = Component.constructor;
        var name = cons && cons.displayName || Component.name || 'Component';
        SFC.displayName = "withConfigConsumer(".concat(name, ")");
        return SFC;
    };
}

},{"@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","./renderEmpty":"bLbmy","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bLbmy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _empty = require("../empty");
var _emptyDefault = parcelHelpers.interopDefault(_empty);
var _ = require(".");
var renderEmpty = function renderEmpty(componentName) {
    return /*#__PURE__*/ _react.createElement(_.ConfigConsumer, null, function(_ref) {
        var getPrefixCls = _ref.getPrefixCls;
        var prefix = getPrefixCls('empty');
        switch(componentName){
            case 'Table':
            case 'List':
                return /*#__PURE__*/ _react.createElement(_emptyDefault.default, {
                    image: _emptyDefault.default.PRESENTED_IMAGE_SIMPLE
                });
            case 'Select':
            case 'TreeSelect':
            case 'Cascader':
            case 'Transfer':
            case 'Mentions':
                return /*#__PURE__*/ _react.createElement(_emptyDefault.default, {
                    image: _emptyDefault.default.PRESENTED_IMAGE_SIMPLE,
                    className: "".concat(prefix, "-small")
                });
            default:
                return /*#__PURE__*/ _react.createElement(_emptyDefault.default, null);
        }
    });
};
exports.default = renderEmpty;

},{"react":"b4tPL","../empty":"ehjVl",".":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ehjVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var _localeReceiver = require("../locale-provider/LocaleReceiver");
var _localeReceiverDefault = parcelHelpers.interopDefault(_localeReceiver);
var _empty = require("./empty");
var _emptyDefault = parcelHelpers.interopDefault(_empty);
var _simple = require("./simple");
var _simpleDefault = parcelHelpers.interopDefault(_simple);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultEmptyImg = /*#__PURE__*/ _react.createElement(_emptyDefault.default, null);
var simpleEmptyImg = /*#__PURE__*/ _react.createElement(_simpleDefault.default, null);
var Empty = function Empty(_a) {
    var className = _a.className, customizePrefixCls = _a.prefixCls, _a$image = _a.image, image = _a$image === void 0 ? defaultEmptyImg : _a$image, description = _a.description, children = _a.children, imageStyle = _a.imageStyle, restProps = __rest(_a, [
        "className",
        "prefixCls",
        "image",
        "description",
        "children",
        "imageStyle"
    ]);
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    return /*#__PURE__*/ _react.createElement(_localeReceiverDefault.default, {
        componentName: "Empty"
    }, function(locale) {
        var _classNames;
        var prefixCls = getPrefixCls('empty', customizePrefixCls);
        var des = typeof description !== 'undefined' ? description : locale.description;
        var alt = typeof des === 'string' ? des : 'empty';
        var imageNode = null;
        if (typeof image === 'string') imageNode = /*#__PURE__*/ _react.createElement("img", {
            alt: alt,
            src: image
        });
        else imageNode = image;
        return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
            className: _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className)
        }, restProps), /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-image"),
            style: imageStyle
        }, imageNode), des && /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-description")
        }, des), children && /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-footer")
        }, children));
    });
};
Empty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
exports.default = Empty;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","../locale-provider/LocaleReceiver":"bz53l","./empty":"iRo8Q","./simple":"ejeOb","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iRo8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _configProvider = require("../config-provider");
var Empty = function Empty() {
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('empty-img-default');
    return /*#__PURE__*/ _react.createElement("svg", {
        className: prefixCls,
        width: "184",
        height: "152",
        viewBox: "0 0 184 152",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("g", {
        fill: "none",
        fillRule: "evenodd"
    }, /*#__PURE__*/ _react.createElement("g", {
        transform: "translate(24 31.67)"
    }, /*#__PURE__*/ _react.createElement("ellipse", {
        className: "".concat(prefixCls, "-ellipse"),
        cx: "67.797",
        cy: "106.89",
        rx: "67.797",
        ry: "12.668"
    }), /*#__PURE__*/ _react.createElement("path", {
        className: "".concat(prefixCls, "-path-1"),
        d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
    }), /*#__PURE__*/ _react.createElement("path", {
        className: "".concat(prefixCls, "-path-2"),
        d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
        transform: "translate(13.56)"
    }), /*#__PURE__*/ _react.createElement("path", {
        className: "".concat(prefixCls, "-path-3"),
        d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
    }), /*#__PURE__*/ _react.createElement("path", {
        className: "".concat(prefixCls, "-path-4"),
        d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
    })), /*#__PURE__*/ _react.createElement("path", {
        className: "".concat(prefixCls, "-path-5"),
        d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
    }), /*#__PURE__*/ _react.createElement("g", {
        className: "".concat(prefixCls, "-g"),
        transform: "translate(149.65 15.383)"
    }, /*#__PURE__*/ _react.createElement("ellipse", {
        cx: "20.654",
        cy: "3.167",
        rx: "2.849",
        ry: "2.815"
    }), /*#__PURE__*/ _react.createElement("path", {
        d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
};
exports.default = Empty;

},{"react":"b4tPL","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ejeOb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _configProvider = require("../config-provider");
var Simple = function Simple() {
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('empty-img-simple');
    return /*#__PURE__*/ _react.createElement("svg", {
        className: prefixCls,
        width: "64",
        height: "41",
        viewBox: "0 0 64 41",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("g", {
        transform: "translate(0 1)",
        fill: "none",
        fillRule: "evenodd"
    }, /*#__PURE__*/ _react.createElement("ellipse", {
        className: "".concat(prefixCls, "-ellipse"),
        cx: "32",
        cy: "33",
        rx: "32",
        ry: "7"
    }), /*#__PURE__*/ _react.createElement("g", {
        className: "".concat(prefixCls, "-g"),
        fillRule: "nonzero"
    }, /*#__PURE__*/ _react.createElement("path", {
        d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /*#__PURE__*/ _react.createElement("path", {
        d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
        className: "".concat(prefixCls, "-path")
    }))));
};
exports.default = Simple;

},{"react":"b4tPL","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"g9GAC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SizeContextProvider", ()=>SizeContextProvider
);
var _react = require("react");
var SizeContext = /*#__PURE__*/ _react.createContext(undefined);
var SizeContextProvider = function SizeContextProvider(_ref) {
    var children = _ref.children, size = _ref.size;
    return /*#__PURE__*/ _react.createElement(SizeContext.Consumer, null, function(originSize) {
        return /*#__PURE__*/ _react.createElement(SizeContext.Provider, {
            value: size || originSize
        }, children);
    });
};
exports.default = SizeContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"d9tKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getKeyThenIncreaseKey", ()=>getKeyThenIncreaseKey
);
parcelHelpers.export(exports, "typeList", ()=>typeList
);
parcelHelpers.export(exports, "attachTypeApi", ()=>attachTypeApi
);
parcelHelpers.export(exports, "getInstance", ()=>getInstance
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcNotification = require("rc-notification");
var _rcNotificationDefault = parcelHelpers.interopDefault(_rcNotification);
var _loadingOutlined = require("@ant-design/icons/es/icons/LoadingOutlined");
var _loadingOutlinedDefault = parcelHelpers.interopDefault(_loadingOutlined);
var _exclamationCircleFilled = require("@ant-design/icons/es/icons/ExclamationCircleFilled");
var _exclamationCircleFilledDefault = parcelHelpers.interopDefault(_exclamationCircleFilled);
var _closeCircleFilled = require("@ant-design/icons/es/icons/CloseCircleFilled");
var _closeCircleFilledDefault = parcelHelpers.interopDefault(_closeCircleFilled);
var _checkCircleFilled = require("@ant-design/icons/es/icons/CheckCircleFilled");
var _checkCircleFilledDefault = parcelHelpers.interopDefault(_checkCircleFilled);
var _infoCircleFilled = require("@ant-design/icons/es/icons/InfoCircleFilled");
var _infoCircleFilledDefault = parcelHelpers.interopDefault(_infoCircleFilled);
var _useMessage = require("./hooks/useMessage");
var _useMessageDefault = parcelHelpers.interopDefault(_useMessage);
var _configProvider = require("../config-provider");
var _configProviderDefault = parcelHelpers.interopDefault(_configProvider);
var messageInstance;
var defaultDuration = 3;
var defaultTop;
var key = 1;
var localPrefixCls = '';
var transitionName = 'move-up';
var hasTransitionName = false;
var getContainer;
var maxCount;
var rtl = false;
function getKeyThenIncreaseKey() {
    return key++;
}
function setMessageConfig(options) {
    if (options.top !== undefined) {
        defaultTop = options.top;
        messageInstance = null; // delete messageInstance for new defaultTop
    }
    if (options.duration !== undefined) defaultDuration = options.duration;
    if (options.prefixCls !== undefined) localPrefixCls = options.prefixCls;
    if (options.getContainer !== undefined) {
        getContainer = options.getContainer;
        messageInstance = null; // delete messageInstance for new getContainer
    }
    if (options.transitionName !== undefined) {
        transitionName = options.transitionName;
        messageInstance = null; // delete messageInstance for new transitionName
        hasTransitionName = true;
    }
    if (options.maxCount !== undefined) {
        maxCount = options.maxCount;
        messageInstance = null;
    }
    if (options.rtl !== undefined) rtl = options.rtl;
}
function getRCNotificationInstance(args, callback) {
    var customizePrefixCls = args.prefixCls, getContextPopupContainer = args.getPopupContainer;
    var _globalConfig = _configProvider.globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getRootPrefixCls = _globalConfig.getRootPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls('message', customizePrefixCls || localPrefixCls);
    var rootPrefixCls = getRootPrefixCls(args.rootPrefixCls, prefixCls);
    var iconPrefixCls = getIconPrefixCls();
    if (messageInstance) {
        callback({
            prefixCls: prefixCls,
            rootPrefixCls: rootPrefixCls,
            iconPrefixCls: iconPrefixCls,
            instance: messageInstance
        });
        return;
    }
    var instanceConfig = {
        prefixCls: prefixCls,
        transitionName: hasTransitionName ? transitionName : "".concat(rootPrefixCls, "-").concat(transitionName),
        style: {
            top: defaultTop
        },
        getContainer: getContainer || getContextPopupContainer,
        maxCount: maxCount
    };
    _rcNotificationDefault.default.newInstance(instanceConfig, function(instance) {
        if (messageInstance) {
            callback({
                prefixCls: prefixCls,
                rootPrefixCls: rootPrefixCls,
                iconPrefixCls: iconPrefixCls,
                instance: messageInstance
            });
            return;
        }
        messageInstance = instance;
        callback({
            prefixCls: prefixCls,
            rootPrefixCls: rootPrefixCls,
            iconPrefixCls: iconPrefixCls,
            instance: instance
        });
    });
}
var typeToIcon = {
    info: _infoCircleFilledDefault.default,
    success: _checkCircleFilledDefault.default,
    error: _closeCircleFilledDefault.default,
    warning: _exclamationCircleFilledDefault.default,
    loading: _loadingOutlinedDefault.default
};
var typeList = Object.keys(typeToIcon);
function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var _classNames;
    var duration = args.duration !== undefined ? args.duration : defaultDuration;
    var IconComponent = typeToIcon[args.type];
    var messageClass = _classnamesDefault.default("".concat(prefixCls, "-custom-content"), (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
    return {
        key: args.key,
        duration: duration,
        style: args.style || {},
        className: args.className,
        content: /*#__PURE__*/ _react.createElement(_configProviderDefault.default, {
            iconPrefixCls: iconPrefixCls
        }, /*#__PURE__*/ _react.createElement("div", {
            className: messageClass
        }, args.icon || IconComponent && /*#__PURE__*/ _react.createElement(IconComponent, null), /*#__PURE__*/ _react.createElement("span", null, args.content))),
        onClose: args.onClose,
        onClick: args.onClick
    };
}
function notice(args) {
    var target = args.key || getKeyThenIncreaseKey();
    var closePromise = new Promise(function(resolve) {
        var callback = function callback() {
            if (typeof args.onClose === 'function') args.onClose();
            return resolve(true);
        };
        getRCNotificationInstance(args, function(_ref) {
            var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
            instance.notice(getRCNoticeProps(_extendsDefault.default(_extendsDefault.default({}, args), {
                key: target,
                onClose: callback
            }), prefixCls, iconPrefixCls));
        });
    });
    var result = function result() {
        if (messageInstance) messageInstance.removeNotice(target);
    };
    result.then = function(filled, rejected) {
        return closePromise.then(filled, rejected);
    };
    result.promise = closePromise;
    return result;
}
function isArgsProps(content) {
    return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
}
var api = {
    open: notice,
    config: setMessageConfig,
    destroy: function destroy(messageKey) {
        if (messageInstance) {
            if (messageKey) {
                var _messageInstance = messageInstance, removeNotice = _messageInstance.removeNotice;
                removeNotice(messageKey);
            } else {
                var _messageInstance2 = messageInstance, destroy = _messageInstance2.destroy;
                destroy();
                messageInstance = null;
            }
        }
    }
};
function attachTypeApi(originalApi, type) {
    originalApi[type] = function(content, duration, onClose) {
        if (isArgsProps(content)) return originalApi.open(_extendsDefault.default(_extendsDefault.default({}, content), {
            type: type
        }));
        if (typeof duration === 'function') {
            onClose = duration;
            duration = undefined;
        }
        return originalApi.open({
            content: content,
            duration: duration,
            type: type,
            onClose: onClose
        });
    };
}
typeList.forEach(function(type) {
    return attachTypeApi(api, type);
});
api.warn = api.warning;
api.useMessage = _useMessageDefault.default(getRCNotificationInstance, getRCNoticeProps);
var getInstance = function getInstance() {
    return null;
};
exports.default = api;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","rc-notification":"gjTsj","@ant-design/icons/es/icons/LoadingOutlined":"e4Ctf","@ant-design/icons/es/icons/ExclamationCircleFilled":"bdz6H","@ant-design/icons/es/icons/CloseCircleFilled":"ewXaJ","@ant-design/icons/es/icons/CheckCircleFilled":"fJoE9","@ant-design/icons/es/icons/InfoCircleFilled":"lLqec","./hooks/useMessage":"bgl55","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gjTsj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _notification = require("./Notification");
var _notificationDefault = parcelHelpers.interopDefault(_notification);
exports.default = _notificationDefault.default;

},{"./Notification":"4t6ak","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4t6ak":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcMotion = require("rc-motion");
var _notice = require("./Notice");
var _noticeDefault = parcelHelpers.interopDefault(_notice);
var _useNotification = require("./useNotification");
var _useNotificationDefault = parcelHelpers.interopDefault(_useNotification);
var seed = 0;
var now = Date.now();
function getUuid() {
    var id = seed;
    seed += 1;
    return "rcNotification_".concat(now, "_").concat(id);
}
var Notification = /*#__PURE__*/ function(_Component) {
    _inheritsDefault.default(Notification1, _Component);
    var _super = _createSuperDefault.default(Notification1);
    function Notification1() {
        var _this;
        _classCallCheckDefault.default(this, Notification1);
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _super.call.apply(_super, [
            this
        ].concat(args));
        _this.state = {
            notices: []
        };
        _this.hookRefs = new Map();
        _this.add = function(originNotice, holderCallback) {
            var key = originNotice.key || getUuid();
            var notice = _objectSpread2Default.default(_objectSpread2Default.default({}, originNotice), {}, {
                key: key
            });
            var maxCount = _this.props.maxCount;
            _this.setState(function(previousState) {
                var notices = previousState.notices;
                var noticeIndex = notices.map(function(v) {
                    return v.notice.key;
                }).indexOf(key);
                var updatedNotices = notices.concat();
                if (noticeIndex !== -1) updatedNotices.splice(noticeIndex, 1, {
                    notice: notice,
                    holderCallback: holderCallback
                });
                else {
                    if (maxCount && notices.length >= maxCount) {
                        // XXX, use key of first item to update new added (let React to move exsiting
                        // instead of remove and mount). Same key was used before for both a) external
                        // manual control and b) internal react 'key' prop , which is not that good.
                        // eslint-disable-next-line no-param-reassign
                        // zombieJ: Not know why use `updateKey`. This makes Notice infinite loop in jest.
                        // Change to `updateMark` for compare instead.
                        // https://github.com/react-component/notification/commit/32299e6be396f94040bfa82517eea940db947ece
                        notice.key = updatedNotices[0].notice.key;
                        notice.updateMark = getUuid(); // zombieJ: That's why. User may close by key directly.
                        // We need record this but not re-render to avoid upper issue
                        // https://github.com/react-component/notification/issues/129
                        notice.userPassKey = key;
                        updatedNotices.shift();
                    }
                    updatedNotices.push({
                        notice: notice,
                        holderCallback: holderCallback
                    });
                }
                return {
                    notices: updatedNotices
                };
            });
        };
        _this.remove = function(removeKey) {
            _this.setState(function(_ref) {
                var notices = _ref.notices;
                return {
                    notices: notices.filter(function(_ref2) {
                        var _ref2$notice = _ref2.notice, key = _ref2$notice.key, userPassKey = _ref2$notice.userPassKey;
                        var mergedKey = userPassKey || key;
                        return mergedKey !== removeKey;
                    })
                };
            });
        };
        _this.noticePropsMap = {};
        return _this;
    }
    _createClassDefault.default(Notification1, [
        {
            key: "getTransitionName",
            value: function getTransitionName() {
                var _this$props = this.props, prefixCls = _this$props.prefixCls, animation = _this$props.animation;
                var transitionName = this.props.transitionName;
                if (!transitionName && animation) transitionName = "".concat(prefixCls, "-").concat(animation);
                return transitionName;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this2 = this;
                var notices = this.state.notices;
                var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closeIcon = _this$props2.closeIcon, style = _this$props2.style;
                var noticeKeys = [];
                notices.forEach(function(_ref3, index) {
                    var notice = _ref3.notice, holderCallback = _ref3.holderCallback;
                    var updateMark = index === notices.length - 1 ? notice.updateMark : undefined;
                    var key = notice.key, userPassKey = notice.userPassKey;
                    var noticeProps = _objectSpread2Default.default(_objectSpread2Default.default(_objectSpread2Default.default({
                        prefixCls: prefixCls,
                        closeIcon: closeIcon
                    }, notice), notice.props), {}, {
                        key: key,
                        noticeKey: userPassKey || key,
                        updateMark: updateMark,
                        onClose: function onClose(noticeKey) {
                            var _notice$onClose;
                            _this2.remove(noticeKey);
                            (_notice$onClose = notice.onClose) === null || _notice$onClose === void 0 || _notice$onClose.call(notice);
                        },
                        onClick: notice.onClick,
                        children: notice.content
                    }); // Give to motion
                    noticeKeys.push(key);
                    _this2.noticePropsMap[key] = {
                        props: noticeProps,
                        holderCallback: holderCallback
                    };
                });
                return /*#__PURE__*/ _react.createElement("div", {
                    className: _classnamesDefault.default(prefixCls, className),
                    style: style
                }, /*#__PURE__*/ _react.createElement(_rcMotion.CSSMotionList, {
                    keys: noticeKeys,
                    motionName: this.getTransitionName(),
                    onVisibleChanged: function onVisibleChanged(changedVisible, _ref4) {
                        var key = _ref4.key;
                        if (!changedVisible) delete _this2.noticePropsMap[key];
                    }
                }, function(_ref5) {
                    var key = _ref5.key, motionClassName = _ref5.className, motionStyle = _ref5.style, visible = _ref5.visible;
                    var _this2$noticePropsMap = _this2.noticePropsMap[key], noticeProps = _this2$noticePropsMap.props, holderCallback = _this2$noticePropsMap.holderCallback;
                    if (holderCallback) return /*#__PURE__*/ _react.createElement("div", {
                        key: key,
                        className: _classnamesDefault.default(motionClassName, "".concat(prefixCls, "-hook-holder")),
                        style: _objectSpread2Default.default({}, motionStyle),
                        ref: function ref(div) {
                            if (typeof key === 'undefined') return;
                            if (div) {
                                _this2.hookRefs.set(key, div);
                                holderCallback(div, noticeProps);
                            } else _this2.hookRefs.delete(key);
                        }
                    });
                    return /*#__PURE__*/ _react.createElement(_noticeDefault.default, _extendsDefault.default({}, noticeProps, {
                        className: _classnamesDefault.default(motionClassName, noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.className),
                        style: _objectSpread2Default.default(_objectSpread2Default.default({}, motionStyle), noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.style),
                        visible: visible
                    }));
                }));
            }
        }
    ]);
    return Notification1;
}(_react.Component);
Notification.newInstance = void 0;
Notification.defaultProps = {
    prefixCls: 'rc-notification',
    animation: 'fade',
    style: {
        top: 65,
        left: '50%'
    }
};
Notification.newInstance = function newNotificationInstance(properties, callback) {
    var _ref6 = properties || {}, getContainer = _ref6.getContainer, props = _objectWithoutPropertiesDefault.default(_ref6, [
        "getContainer"
    ]);
    var div = document.createElement('div');
    if (getContainer) {
        var root = getContainer();
        root.appendChild(div);
    } else document.body.appendChild(div);
    var called = false;
    function ref(notification) {
        if (called) return;
        called = true;
        callback({
            notice: function notice(noticeProps) {
                notification.add(noticeProps);
            },
            removeNotice: function removeNotice(key) {
                notification.remove(key);
            },
            component: notification,
            destroy: function destroy() {
                _reactDomDefault.default.unmountComponentAtNode(div);
                if (div.parentNode) div.parentNode.removeChild(div);
            },
            // Hooks
            useNotification: function useNotification() {
                return _useNotificationDefault.default(notification);
            }
        });
    } // Only used for test case usage
    _reactDomDefault.default.render(/*#__PURE__*/ _react.createElement(Notification, _extendsDefault.default({}, props, {
        ref: ref
    })), div);
};
exports.default = Notification;

},{"@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","react-dom":"hKAbJ","classnames":"dFgpN","rc-motion":"01wSt","./Notice":"2hScT","./useNotification":"4Iva2","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hKAbJ":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"eMRas"}],"eMRas":[function(require,module,exports) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require('react');
    var Scheduler = require('scheduler');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning('warn', format, args);
        }
    }
    function error1(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning('error', format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // Recoil still uses useMutableSource in www, need to delete
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies1 = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames1 = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies1[registrationName]) error1("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies1[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames1[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames1.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error1('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL1(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error1("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL1('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, '' + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL1(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_SCOPE_TYPE = Symbol.for('react.scope');
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
    var REACT_CACHE_TYPE = Symbol.for('react.cache');
    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix1;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix1 === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix1 = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix1 + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return 'Cache';
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + '.Consumer';
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + '.Provider';
            case DehydratedFragment:
                return 'DehydratedFragment';
            case ForwardRef:
                return getWrappedName$1(type, type.render, 'ForwardRef');
            case Fragment:
                return 'Fragment';
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return 'Portal';
            case HostRoot:
                return 'Root';
            case HostText:
                return 'Text';
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return 'StrictMode';
                return 'Mode';
            case OffscreenComponent:
                return 'Offscreen';
            case Profiler:
                return 'Profiler';
            case ScopeComponent:
                return 'Scope';
            case SuspenseComponent:
                return 'Suspense';
            case SuspenseListComponent:
                return 'SuspenseList';
            case TracingMarkerComponent:
                return 'TracingMarker';
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === 'function') return type.displayName || type.name || null;
                if (typeof type === 'string') return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var current1 = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current1 === null) return null;
        var owner = current1._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current1 === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current1);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame1.getCurrentStack = null;
        current1 = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame1.getCurrentStack = getCurrentFiberStackInDev;
        current1 = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
                return value;
            case 'object':
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error1("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error1("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error1("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error1("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error1("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error1("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, 'name');
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === 'string' || typeof child === 'number') return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error1("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error1("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error1("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error1("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error1("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error1("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error1("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error1("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
                if (isArray(children)) {
                    if (children.length > 1) throw new Error('<textarea> can only have at most one child.');
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes1 = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes1.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error1('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error1('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error1('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error1("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
            if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error1("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== 'object') throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        imagesizes: 'imageSizes',
        imagesrcset: 'imageSrcSet',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-description': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error1('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error1('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error1('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error1("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error1("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error1("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error1("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error1("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error1('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error1('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error1("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error1("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error1("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error1("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error1("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error1('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error1("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error1('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error1('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error1("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error1("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error1("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error1("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error1("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== 'function') throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== 'function') throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options1 = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options1, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options1, options1);
        window.removeEventListener('test', options1, options1);
    } catch (e1) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === 'undefined' || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get1(key) {
        return key._reactInternals;
    }
    function has1(key) {
        return key._reactInternals !== undefined;
    }
    function set1(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ Placement | Update;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var HydratingAndUpdate = /*           */ Hydrating | Update;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error1("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get1(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error('Unable to find node on an unmounted component.');
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error('Unable to find node on an unmounted component.');
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error('Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error('Unable to find node on an unmounted component.');
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error1("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error1('React instrumentation encountered an error: %s.', err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === 'function') {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === 'function') try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*            */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                    */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                                 */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                       */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return 'Sync';
        if (lane & InputContinuousHydrationLane) return 'InputContinuousHydration';
        if (lane & InputContinuousLane) return 'InputContinuous';
        if (lane & DefaultHydrationLane) return 'DefaultHydration';
        if (lane & DefaultLane) return 'Default';
        if (lane & TransitionHydrationLane) return 'TransitionHydration';
        if (lane & TransitionLanes) return 'Transition';
        if (lane & RetryLanes) return 'Retry';
        if (lane & SelectiveHydrationLane) return 'SelectiveHydration';
        if (lane & IdleHydrationLane) return 'IdleHydration';
        if (lane & IdleLane) return 'Idle';
        if (lane & OffscreenLane) return 'Offscreen';
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error1('Should have found matching lanes. This is a bug in React.');
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error1('Should have found matching lanes. This is a bug in React.');
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== 0;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === 0) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === 0) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var synchronouslyHydratedEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return synchronouslyHydratedEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber = getInstanceFromNode(blockedOn);
                if (_fiber !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber2 = getInstanceFromNode(nextBlockedOn);
                if (_fiber2 !== null) attemptContinuousHydration(_fiber2);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            // eslint-disable-next-line no-fallthrough
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            // eslint-disable-next-line no-fallthrough
            case 'beforeblur':
            case 'afterblur':
            // eslint-disable-next-line no-fallthrough
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
                return DiscreteEventPriority;
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'toggle':
            case 'touchmove':
            case 'wheel':
            // eslint-disable-next-line no-fallthrough
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
                return ContinuousEventPriority;
            case 'message':
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root1 = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root1 = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root1 = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root1) return root1.value;
        return root1.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style1 = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style1 = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style1) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        'abort',
        'auxClick',
        'cancel',
        'canPlay',
        'canPlayThrough',
        'click',
        'close',
        'contextMenu',
        'copy',
        'cut',
        'drag',
        'dragEnd',
        'dragEnter',
        'dragExit',
        'dragLeave',
        'dragOver',
        'dragStart',
        'drop',
        'durationChange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'gotPointerCapture',
        'input',
        'invalid',
        'keyDown',
        'keyPress',
        'keyUp',
        'load',
        'loadedData',
        'loadedMetadata',
        'loadStart',
        'lostPointerCapture',
        'mouseDown',
        'mouseMove',
        'mouseOut',
        'mouseOver',
        'mouseUp',
        'paste',
        'pause',
        'play',
        'playing',
        'pointerCancel',
        'pointerDown',
        'pointerMove',
        'pointerOut',
        'pointerOver',
        'pointerUp',
        'progress',
        'rateChange',
        'reset',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'submit',
        'suspend',
        'timeUpdate',
        'touchCancel',
        'touchEnd',
        'touchStart',
        'volumeChange',
        'scroll',
        'toggle',
        'touchMove',
        'waiting',
        'wheel'
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
        registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
        registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
        registerSimpleEvent('dblclick', 'onDoubleClick');
        registerSimpleEvent('focusin', 'onFocus');
        registerSimpleEvent('focusout', 'onBlur');
        registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error1('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error1('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== 'selectionchange') {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent('selectionchange', false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies1,
            possibleRegistrationNames: possibleRegistrationNames1
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error1('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error1('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error1("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error1('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error1('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error('Text content does not match server-rendered HTML.');
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error1("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error1("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) // $FlowFixMe - Should be inferred as not undefined.
        {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error1('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error1('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error1("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
            case 'img':
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                if (newProps.autoFocus) domElement.focus();
                return;
            case 'img':
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node) // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== 'head' && parentType !== 'body';
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error1('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
    var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error('getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index1 = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index1 < 0) {
            error1('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index1]) error1('Unexpected Fiber popped.');
        cursor.current = valueStack[index1];
        valueStack[index1] = null;
        fiberStack[index1] = null;
        index1--;
    }
    function push(cursor, value, fiber) {
        index1++;
        valueStack[index1] = cursor.current;
        fiberStack[index1] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged1() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error1("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentNameFromFiber(fiber) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null)
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error1("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error1("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error1("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error1("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error1("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error1("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error1("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // An array of all update queues that received updates during the current
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var interleavedQueues = null;
    function pushInterleavedQueue(queue) {
        if (interleavedQueues === null) interleavedQueues = [
            queue
        ];
        else interleavedQueues.push(queue);
    }
    function enqueueInterleavedUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (interleavedQueues !== null) {
            for(var i = 0; i < interleavedQueues.length; i++){
                var queue = interleavedQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            interleavedQueues = null;
        }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isInterleavedUpdate(fiber)) {
            var interleaved = sharedQueue.interleaved;
            if (interleaved === null) {
                // This is the first update. Create a circular list.
                update.next = update; // At the end of the current render, this queue's interleaved updates will
                // be transferred to the pending queue.
                pushInterleavedQueue(sharedQueue);
            } else {
                update.next = interleaved.next;
                interleaved.next = update;
            }
            sharedQueue.interleaved = update;
        } else {
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update;
        }
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error1("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved)
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback1(callback, context) {
        if (typeof callback !== 'function') throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback1(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error1("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error1("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error1("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error1("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error1("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error1("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error1("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error1("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error1("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error1("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error1("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error1("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error1("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error1("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error1("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error1("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error1("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error1("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error1("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error1("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error1("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error1("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error1('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error1("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set1(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error1("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error1("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error1("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error1("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error1("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error1("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged1() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged1() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = '';
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error1("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating1 = false;
    var didSuspend1 = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating1) error1('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
    function markDidSuspendWhileHydratingDEV() {
        didSuspend1 = true;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        hydrationErrors = null;
        didSuspend1 = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        hydrationErrors = null;
        didSuspend1 = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspend1) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating1) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating1 = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating1 = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspend1;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                switch(returnFiber.tag){
                    case HostRoot:
                        var parentContainer = returnFiber.stateNode.containerInfo;
                        didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                        break;
                    case HostComponent:
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;
                        didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, isConcurrentMode);
                        break;
                }
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating1) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating1 = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating1 && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating1 = false;
        didSuspend1 = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating1;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== 'object') throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error1('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error1('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, 'ref');
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== 'string') throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error1("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error1("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== 'function') throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error1("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error1("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error('An iterable object provided no iterator.');
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers1 = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error('Resuming work not yet implemented.');
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes1 = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook1 = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error1("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error1("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error1("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error1("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes1 = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook1 = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook1 !== null && currentHook1.next !== null;
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error1("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook1 === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook1.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook1 = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error('Rendered more hooks than during the previous render.');
            currentHook1 = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook1.memoizedState,
                baseState: currentHook1.baseState,
                baseQueue: currentHook1.baseQueue,
                queue: currentHook1.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        var current = currentHook1; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error1("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes1, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved)
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error1('The result of getServerSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error1('The result of getSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes1)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error1('The result of getSnapshot should be cached to avoid an infinite loop');
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes1)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook1 !== null) {
            var prevEffect = currentHook1.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error1("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += 'H' + localId.toString(32);
            id += ':';
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            enqueueUpdate$1(fiber, queue, update);
            var eventTime = requestEventTime();
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitionUpdate(root, queue, lane);
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            enqueueUpdate$1(fiber, queue, update);
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var eventTime = requestEventTime();
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitionUpdate(root, queue, lane);
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
        if (isInterleavedUpdate(fiber)) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
                // This is the first update. Create a circular list.
                update.next = update; // At the end of the current render, this queue's interleaved updates will
                // be transferred to the pending queue.
                pushInterleavedQueue(queue);
            } else {
                update.next = interleaved.next;
                interleaved.next = update;
            }
            queue.interleaved = update;
        } else {
            var pending = queue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            queue.pending = update;
        }
    }
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error1("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime1 = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime1;
    }
    function recordCommitTime() {
        commitTime1 = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== 'function') // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error1("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || 'Unknown');
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null)
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidSuspendWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(value);
                return;
            }
        }
         // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError(value);
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    function getSuspendedCache() {
        return null;
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent;
    var updateHostText;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
                    warnIfUnhydratedTailNodes(workInProgress);
                    resetHydrationState();
                    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
                    return workInProgress;
                }
                if (nextState !== null && nextState.dehydrated !== null) {
                    // We might be inside a hydration state the first time we're picking up this
                    // Suspense boundary, and also after we've reentered it for further hydration.
                    var _wasHydrated3 = popHydrationState(workInProgress);
                    if (current === null) {
                        if (!_wasHydrated3) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        prepareToHydrateHostSuspenseInstance(workInProgress);
                        bubbleProperties(workInProgress);
                        if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            var isTimedOutSuspense = nextState !== null;
                            if (isTimedOutSuspense) {
                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                                var primaryChildFragment = workInProgress.child;
                                if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                            }
                        }
                        return null;
                    } else {
                        // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                        // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                        resetHydrationState();
                        if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                        workInProgress.memoizedState = null;
                         // If nothing suspended, we need to schedule an effect to mark this boundary
                        // as having hydrated so events know that they're free to be invoked.
                        // It's also a signal to replay events and the suspense callback.
                        // If something suspended, schedule an effect to attach retry listeners.
                        // So we might as well always mark this.
                        workInProgress.flags |= Update;
                        bubbleProperties(workInProgress);
                        if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            var _isTimedOutSuspense = nextState !== null;
                            if (_isTimedOutSuspense) {
                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                                var _primaryChildFragment = workInProgress.child;
                                if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                                workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                            }
                        }
                        return null;
                    }
                } // Successfully completed this tree. If this was a forced client render,
                // there may have been recoverable errors during first hydration
                // attempt. If so, add them to a queue so we can log them in the
                // commit phase.
                upgradeHydrationErrorsToRecoverable();
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current === null) popHydrationState(workInProgress);
                else {
                    var _prevState = current.memoizedState;
                    prevDidTimeout = _prevState !== null;
                }
                // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                if (nextDidTimeout && !prevDidTimeout) {
                    var _offscreenFiber = workInProgress.child;
                    _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                    // in the concurrent tree already suspended during this render.
                    // This is a known bug.
                    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment2 = workInProgress.child;
                        if (_primaryChildFragment2 !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState2 = current.memoizedState;
                    var prevIsHidden = _prevState2 !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes1, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateFragment1(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef$1(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error('Simulated error coming from DevTools');
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error1("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef$1(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error('Should have a current fiber. This is a bug in React.');
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent$1(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef$1(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText$1(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error1("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error1('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error1("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error1('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error1('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache()
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                    if (!didSuspend) return updateDehydratedSuspenseComponent(current, workInProgress, _dehydrated, prevState, renderLanes);
                    else if (workInProgress.flags & ForceClientRender) {
                        // Something errored during hydration. Try again without hydrating.
                        workInProgress.flags &= ~ForceClientRender;
                        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                    } else if (workInProgress.memoizedState !== null) {
                        // Something suspended and we should still be in dehydrated mode.
                        // Leave the existing child in place.
                        workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                        // but the normal suspense pass doesn't.
                        workInProgress.flags |= DidCapture;
                        return null;
                    } else {
                        // Suspended but we should no longer be in dehydrated mode.
                        // Therefore we now have to render the fallback.
                        var _nextPrimaryChildren = nextProps.children;
                        var _nextFallbackChildren = nextProps.fallback;
                        var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                        var _primaryChildFragment2 = workInProgress.child;
                        _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes);
                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return fallbackChildFragment;
                    }
                }
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers1(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error1("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, suspenseInstance, suspenseState, renderLanes) {
        // We should never be hydrating at this point because it is the first pass,
        // but after we've already committed once.
        warnIfHydrating();
        if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
        // de-opt to client rendering should have an error message.
        null);
        if (isSuspenseInstanceFallback(suspenseInstance)) // This boundary is in a permanent fallback state. In this case, we'll never
        // get an update and we'll never be able to hydrate the final content. Let's just try the
        // client side render instead.
        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // here on the client. Or, in production, a hash/id that corresponds to
        // the error.
        new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
        // any context has changed, we need to treat is as if the input might have changed.
        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
        if (didReceiveUpdate || hasContextChanged) {
            // This boundary has changed since the first render. This means that we are now unable to
            // hydrate it. We might still be able to hydrate it using a higher priority lane.
            var root = getWorkInProgressRoot();
            if (root !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    // Intentionally mutating since this render will get interrupted. This
                    // is one of the very rare times where we mutate the current tree
                    // during the render phase.
                    suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                    var eventTime = NoTimestamp;
                    scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);
                }
            } // If we have scheduled higher pri work above, this will probably just abort the render
            // since we now have higher priority work, but in case it doesn't, we need to prepare to
            // render something, if we time out. Even if that requires us to delete everything and
            // skip hydration.
            // Delay having to do this as long as the suspense timeout allows us.
            renderDidSuspendDelayIfPossible();
            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
        } else if (isSuspenseInstancePending(suspenseInstance)) {
            // This component is still pending more data from the server, so we can't hydrate its
            // content. We treat it as if this component suspended itself. It might seem as if
            // we could just try to render it client-side instead. However, this will perform a
            // lot of unnecessary work and is unlikely to complete since it often will suspend
            // on missing data anyway. Additionally, the server might be able to render more
            // than we can on the client yet. In that case we'd end up with more fallback states
            // on the client than if we just leave it alone. If the server times out or errors
            // these should update this boundary to the permanent Fallback state instead.
            // Mark it as having captured (i.e. suspended).
            workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
            workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
            var retry = retryDehydratedSuspenseBoundary.bind(null, current);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
        } else {
            // This is the first attempt.
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
            var nextProps = workInProgress.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
            // tree is part of a hydrating tree. This is used to determine if a child
            // node has fully mounted yet, and for scheduling event replaying.
            // Conceptually this is similar to Placement in that a new subtree is
            // inserted into the React tree here. It just happens to not need DOM
            // mutations because it already exists.
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error1('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error1('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error1('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error1('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error1('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error1('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';
        if (isAnArray || isIterable) {
            var type = isAnArray ? 'array' : 'iterable';
            error1("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error1('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error1('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged1()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error1("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error1("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    }
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged1() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent$1(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText$1(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment1(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === 'function') error1("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error1("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    effect.destroy = create();
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = 'useLayoutEffect';
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = 'useInsertionEffect';
                        else hookName = 'useEffect';
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                        else addendum = ' You returned: ' + destroy;
                        error1("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onPostCommit === 'function') onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === 'function') onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === 'function') safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    var instance = node.stateNode;
                    if (isHidden) hideInstance(instance);
                    else unhideInstance(node.stateNode, node.memoizedProps);
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === 'function') error1("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty('current')) error1("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') {
                if (current.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    currentRef(null);
                } finally{
                    recordLayoutEffectDuration(current);
                }
                else currentRef(null);
            } else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, nearestMountedAncestor) {
        onCommitUnmount(current);
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                var updateQueue = current.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                            if (destroy !== undefined) {
                                if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                else if ((tag & Layout) !== NoFlags$1) {
                                    markComponentLayoutEffectUnmountStarted(current);
                                    if (current.mode & ProfileMode) {
                                        startLayoutEffectTimer();
                                        safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                        recordLayoutEffectDuration(current);
                                    } else safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                    markComponentLayoutEffectUnmountStopped();
                                }
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current, nearestMountedAncestor);
                var instance = current.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);
                return;
            case HostComponent:
                safelyDetachRef(current, nearestMountedAncestor);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current, nearestMountedAncestor);
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root;
        while(true){
            commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (parent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === DehydratedFragment) {
                if (currentParentIsContainer) clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                else clearSuspenseBoundary(currentParent, node.stateNode);
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current, nearestMountedAncestor) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);
        detachFiberMutation(current);
    }
    function commitWork(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all
                // destroy functions for all fibers are called before any create functions.
                // This prevents sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current !== null ? current.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                if (current !== null) {
                    var _prevRootState = current.memoizedState;
                    if (_prevRootState.isDehydrated) {
                        var _root = finishedWork.stateNode;
                        commitHydratedContainer(_root.containerInfo);
                    }
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseCallback(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
        }
        throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error('Expected finished root and lanes to be set. This is a bug in React.');
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
    }
    function commitMutationEffects(root, firstChild, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = firstChild;
        commitMutationEffects_begin(root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitMutationEffects_begin(root, lanes) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization
            var deletions = fiber.deletions;
            if (deletions !== null) for(var i = 0; i < deletions.length; i++){
                var childToDelete = deletions[i];
                try {
                    commitDeletion(root, childToDelete, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(childToDelete, fiber, error);
                }
            }
            var child = fiber.child;
            if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitMutationEffects_complete(root, lanes);
        }
    }
    function commitMutationEffects_complete(root, lanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitMutationEffectsOnFiber(fiber, root, lanes);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        // TODO: The factoring of this phase could probably be improved. Consider
        // switching on the type of work before checking the flags. That's what
        // we do in all the other phases. I think this one is only different
        // because of the shared reconciliation logic below.
        var flags = finishedWork.flags;
        if (flags & ContentReset) commitResetTextContent(finishedWork);
        if (flags & Ref) {
            var current = finishedWork.alternate;
            if (current !== null) commitDetachRef(current);
        }
        if (flags & Visibility) switch(finishedWork.tag){
            case SuspenseComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                if (isHidden) {
                    var _current = finishedWork.alternate;
                    var wasHidden = _current !== null && _current.memoizedState !== null;
                    if (!wasHidden) // TODO: Move to passive phase
                    markCommitTimeOfFallback();
                }
                break;
            case OffscreenComponent:
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var _current2 = finishedWork.alternate;
                var _wasHidden = _current2 !== null && _current2.memoizedState !== null;
                var offscreenBoundary = finishedWork;
                // TODO: This needs to run whenever there's an insertion or update
                // inside a hidden Offscreen tree.
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                if (_isHidden) {
                    if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                            nextEffect = offscreenBoundary;
                            var offscreenChild = offscreenBoundary.child;
                            while(offscreenChild !== null){
                                nextEffect = offscreenChild;
                                disappearLayoutEffects_begin(offscreenChild);
                                offscreenChild = offscreenChild.sibling;
                            }
                        }
                    }
                }
                break;
        }
         // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every possible
        // bitmap value, we remove the secondary effects from the effect tag and
        // switch on that value.
        var primaryFlags = flags & (Placement | Update | Hydrating);
        switch(primaryFlags){
            case Placement:
                commitPlacement(finishedWork); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.
                // TODO: findDOMNode doesn't rely on this any more but isMounted does
                // and isMounted is deprecated anyway so we should be able to kill this.
                finishedWork.flags &= ~Placement;
                break;
            case PlacementAndUpdate:
                // Placement
                commitPlacement(finishedWork); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.
                finishedWork.flags &= ~Placement; // Update
                var _current3 = finishedWork.alternate;
                commitWork(_current3, finishedWork);
                break;
            case Hydrating:
                finishedWork.flags &= ~Hydrating;
                break;
            case HydratingAndUpdate:
                finishedWork.flags &= ~Hydrating; // Update
                var _current4 = finishedWork.alternate;
                commitWork(_current4, finishedWork);
                break;
            case Update:
                var _current5 = finishedWork.alternate;
                commitWork(_current5, finishedWork);
                break;
        }
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null)
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, returnFiber);
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    }
    var didWarnWrongReturnPointer = false;
    function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {
        if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {
            didWarnWrongReturnPointer = true;
            error1("Internal React error: Return pointer is inconsistent with parent.");
        }
        // anything, by checking the warning logs for the above invariant
        fiber.return = expectedReturnFiber;
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor('selector.role');
        TEST_NAME_TYPE = symbolFor('selector.test_id');
        TEXT_TYPE = symbolFor('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== 'undefined';
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error1("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress1 = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes1 = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root === null) return null;
         // Mark that the root has a pending update.
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // TODO: Consolidate with `isInterleavedUpdate` check
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
        return root;
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    function isInterleavedUpdate(fiber, lane) {
        return(// Requires some refactoring. Not a big deal though since it's rare for
        // concurrent apps to have more than a single root.
        workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && // then don't treat this as an interleaved update. This pattern is
        // accompanied by a warning but we haven't fully deprecated it yet. We can
        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.
        (executionContext & RenderContext) === NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error1('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if (executionContext === NoContext) // It's only safe to do this conditionally because we always
                // check for pending work before we exit the task.
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error('Root did not complete. This is a bug in React.');
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            default:
                throw new Error('Unknown root exit status.');
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error('Root did not complete. This is a bug in React.');
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes1, fiber);
        subtreeRenderLanes1 = mergeLanes(subtreeRenderLanes1, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes1 = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress1 !== null) {
            var interruptedWork = workInProgress1.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress1 = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes1 = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        enqueueInterleavedUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress1;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress1 = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress1 === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress1 = erroredWork;
                } else erroredWork = workInProgress1;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress1 !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress1 !== null)performUnitOfWork(workInProgress1);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress1 !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress1 !== null && !shouldYield())performUnitOfWork(workInProgress1);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress1 = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes1);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes1); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress1 = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress1 = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress1 = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress1 = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress1 = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error1("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress1 = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                onRecoverableError(recoverableError);
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Cannot flush passive effects while already rendering.');
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error1("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error1("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current1;
        try {
            setCurrentFiber(fiber);
            error1("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress1 && getComponentNameFromFiber(workInProgress1) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';
                    error1("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error1("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error1("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error1('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {};
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = 'DELETED';
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? 'hydrate()' : 'render()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = '18.0.0-fc46dba67-20220329';
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get1(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get1(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw new Error('Unable to find node on an unmounted component.');
            else {
                var keys = Object.keys(component).join(',');
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current1;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error1("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error1("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current1 !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error1("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current1) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error1("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        var root = scheduleUpdateOnFiber(current$1, lane, eventTime);
        if (root !== null) entangleTransitions(root, current$1, lane);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                var eventTime = requestEventTime();
                flushSync(function() {
                    return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current1;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === 'function' ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console['error'](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error('Cannot update an unmounted root.');
        if (typeof arguments[1] === 'function') error1("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error1("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== 'undefined') error1("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error1("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error1("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error('createRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
            else if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error1("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error('hydrateRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error1("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error1("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error1("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error1("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error1("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate1(element, container, callback) {
        error1("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render1(element, container, callback) {
        error1("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error1("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error('Target container is not a DOM element.');
        if (parentComponent == null || !has1(parentComponent)) throw new Error('parentComponent must be a valid React Component');
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error1("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error('Target container is not a DOM element.');
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint) error1('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint) error1('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error1("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate1;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render1;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"react":"b4tPL","scheduler":"lLUEw"}],"lLUEw":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"6RcWe"}],"6RcWe":[function(require,module,exports) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime1 = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime1;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime1 = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === 'function') // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== 'undefined') {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"01wSt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSMotionList", ()=>_cssmotionListDefault.default
);
var _cssmotion = require("./CSSMotion");
var _cssmotionDefault = parcelHelpers.interopDefault(_cssmotion);
var _cssmotionList = require("./CSSMotionList");
var _cssmotionListDefault = parcelHelpers.interopDefault(_cssmotionList);
exports.default = _cssmotionDefault.default;

},{"./CSSMotion":"k2p7A","./CSSMotionList":"7XUkT","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"k2p7A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * `transitionSupport` is used for none transition test case.
 * Default we use browser transition event support check.
 */ parcelHelpers.export(exports, "genCSSMotion", ()=>genCSSMotion
);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp, react/prop-types */ var _react = require("react");
var _findDOMNode = require("rc-util/es/Dom/findDOMNode");
var _findDOMNodeDefault = parcelHelpers.interopDefault(_findDOMNode);
var _ref = require("rc-util/es/ref");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _motion = require("./util/motion");
var _interface = require("./interface");
var _useStatus = require("./hooks/useStatus");
var _useStatusDefault = parcelHelpers.interopDefault(_useStatus);
var _domWrapper = require("./DomWrapper");
var _domWrapperDefault = parcelHelpers.interopDefault(_domWrapper);
var _useStepQueue = require("./hooks/useStepQueue");
function genCSSMotion(config) {
    var transitionSupport = config;
    if (_typeofDefault.default(config) === 'object') transitionSupport = config.transitionSupport;
    function isSupportTransition(props) {
        return !!(props.motionName && transitionSupport);
    }
    var CSSMotion = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
        var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
        var supportMotion = isSupportTransition(props); // Ref to the react node, it may be a HTMLElement
        var nodeRef = _react.useRef(); // Ref to the dom wrapper in case ref can not pass to HTMLElement
        var wrapperNodeRef = _react.useRef();
        function getDomElement() {
            try {
                // Here we're avoiding call for findDOMNode since it's deprecated
                // in strict mode. We're calling it only when node ref is not
                // an instance of DOM HTMLElement. Otherwise use
                // findDOMNode as a final resort
                return nodeRef.current instanceof HTMLElement ? nodeRef.current : _findDOMNodeDefault.default(wrapperNodeRef.current);
            } catch (e) {
                // Only happen when `motionDeadline` trigger but element removed.
                return null;
            }
        }
        var _useStatus1 = _useStatusDefault.default(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArrayDefault.default(_useStatus1, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3]; // Record whether content has rendered
        // Will return null for un-rendered even when `removeOnLeave={false}`
        var renderedRef = _react.useRef(mergedVisible);
        if (mergedVisible) renderedRef.current = true;
         // ====================== Refs ======================
        var setNodeRef = _react.useCallback(function(node) {
            nodeRef.current = node;
            _ref.fillRef(ref, node);
        }, []); // ===================== Render =====================
        var motionChildren;
        var mergedProps = _objectSpread2Default.default(_objectSpread2Default.default({}, eventProps), {}, {
            visible: visible
        });
        if (!children) // No children
        motionChildren = null;
        else if (status === _interface.STATUS_NONE || !isSupportTransition(props)) {
            // Stable children
            if (mergedVisible) motionChildren = children(_objectSpread2Default.default({}, mergedProps), setNodeRef);
            else if (!removeOnLeave && renderedRef.current) motionChildren = children(_objectSpread2Default.default(_objectSpread2Default.default({}, mergedProps), {}, {
                className: leavedClassName
            }), setNodeRef);
            else if (forceRender) motionChildren = children(_objectSpread2Default.default(_objectSpread2Default.default({}, mergedProps), {}, {
                style: {
                    display: 'none'
                }
            }), setNodeRef);
            else motionChildren = null;
        } else {
            var _classNames;
            // In motion
            var statusSuffix;
            if (statusStep === _interface.STEP_PREPARE) statusSuffix = 'prepare';
            else if (_useStepQueue.isActive(statusStep)) statusSuffix = 'active';
            else if (statusStep === _interface.STEP_START) statusSuffix = 'start';
            motionChildren = children(_objectSpread2Default.default(_objectSpread2Default.default({}, mergedProps), {}, {
                className: _classnamesDefault.default(_motion.getTransitionName(motionName, status), (_classNames = {}, _definePropertyDefault.default(_classNames, _motion.getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix)), statusSuffix), _definePropertyDefault.default(_classNames, motionName, typeof motionName === 'string'), _classNames)),
                style: statusStyle
            }), setNodeRef);
        }
        return /*#__PURE__*/ _react.createElement(_domWrapperDefault.default, {
            ref: wrapperNodeRef
        }, motionChildren);
    });
    CSSMotion.displayName = 'CSSMotion';
    return CSSMotion;
}
exports.default = genCSSMotion(_motion.supportTransition);

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","rc-util/es/Dom/findDOMNode":"dwUfQ","rc-util/es/ref":"bvnCQ","classnames":"dFgpN","./util/motion":"loX1n","./interface":"jiBuw","./hooks/useStatus":"jP3R0","./DomWrapper":"ifyWq","./hooks/useStepQueue":"llG0W","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dwUfQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
function findDOMNode(node) {
    if (node instanceof HTMLElement) return node;
    return _reactDomDefault.default.findDOMNode(node);
}
exports.default = findDOMNode;

},{"react-dom":"hKAbJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bvnCQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fillRef", ()=>fillRef
);
/**
 * Merge refs into one ref function to support ref passing.
 */ parcelHelpers.export(exports, "composeRef", ()=>composeRef
);
parcelHelpers.export(exports, "useComposeRef", ()=>useComposeRef
);
parcelHelpers.export(exports, "supportRef", ()=>supportRef
) /* eslint-enable */ ;
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _reactIs = require("react-is");
var _useMemo = require("./hooks/useMemo");
var _useMemoDefault = parcelHelpers.interopDefault(_useMemo);
function fillRef(ref, node) {
    if (typeof ref === 'function') ref(node);
    else if (_typeofDefault.default(ref) === 'object' && ref && 'current' in ref) ref.current = node;
}
function composeRef() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++)refs[_key] = arguments[_key];
    var refList = refs.filter(function(ref) {
        return ref;
    });
    if (refList.length <= 1) return refList[0];
    return function(node) {
        refs.forEach(function(ref) {
            fillRef(ref, node);
        });
    };
}
function useComposeRef() {
    for(var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)refs[_key2] = arguments[_key2];
    return _useMemoDefault.default(function() {
        return composeRef.apply(void 0, refs);
    }, refs, function(prev, next) {
        return prev.length === next.length && prev.every(function(ref, i) {
            return ref === next[i];
        });
    });
}
function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    var type = _reactIs.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node
    if (typeof type === 'function' && !((_type$prototype = type.prototype) === null || _type$prototype === void 0 ? void 0 : _type$prototype.render)) return false;
     // Class component
    if (typeof nodeOrComponent === 'function' && !((_nodeOrComponent$prot = nodeOrComponent.prototype) === null || _nodeOrComponent$prot === void 0 ? void 0 : _nodeOrComponent$prot.render)) return false;
    return true;
}

},{"@babel/runtime/helpers/esm/typeof":"bgxCq","react-is":"3cYn4","./hooks/useMemo":"lhbzA","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"loX1n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getVendorPrefixes", ()=>getVendorPrefixes
);
parcelHelpers.export(exports, "getVendorPrefixedEventName", ()=>getVendorPrefixedEventName
);
parcelHelpers.export(exports, "supportTransition", ()=>supportTransition
);
parcelHelpers.export(exports, "animationEndName", ()=>animationEndName
);
parcelHelpers.export(exports, "transitionEndName", ()=>transitionEndName
);
parcelHelpers.export(exports, "getTransitionName", ()=>getTransitionName
);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _canUseDom = require("rc-util/es/Dom/canUseDom"); // ================= Transition =================
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
// Event wrapper. Copy from react source code
function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
}
function getVendorPrefixes(domSupport, win) {
    var prefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    if (domSupport) {
        if (!('AnimationEvent' in win)) delete prefixes.animationend.animation;
        if (!('TransitionEvent' in win)) delete prefixes.transitionend.transition;
    }
    return prefixes;
}
var vendorPrefixes = getVendorPrefixes(_canUseDomDefault.default(), typeof window !== 'undefined' ? window : {});
var style = {};
if (_canUseDomDefault.default()) {
    var _document$createEleme = document.createElement('div');
    style = _document$createEleme.style;
}
var prefixedEventNames = {};
function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
    var prefixMap = vendorPrefixes[eventName];
    if (prefixMap) {
        var stylePropList = Object.keys(prefixMap);
        var len = stylePropList.length;
        for(var i = 0; i < len; i += 1){
            var styleProp = stylePropList[i];
            if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
                prefixedEventNames[eventName] = prefixMap[styleProp];
                return prefixedEventNames[eventName];
            }
        }
    }
    return '';
}
var internalAnimationEndName = getVendorPrefixedEventName('animationend');
var internalTransitionEndName = getVendorPrefixedEventName('transitionend');
var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
var animationEndName = internalAnimationEndName || 'animationend';
var transitionEndName = internalTransitionEndName || 'transitionend';
function getTransitionName(transitionName, transitionType) {
    if (!transitionName) return null;
    if (_typeofDefault.default(transitionName) === 'object') {
        var type = transitionType.replace(/-\w/g, function(match) {
            return match[1].toUpperCase();
        });
        return transitionName[type];
    }
    return "".concat(transitionName, "-").concat(transitionType);
}

},{"@babel/runtime/helpers/esm/typeof":"bgxCq","rc-util/es/Dom/canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bCk8j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function canUseDom() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
}
exports.default = canUseDom;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jiBuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "STATUS_NONE", ()=>STATUS_NONE
);
parcelHelpers.export(exports, "STATUS_APPEAR", ()=>STATUS_APPEAR
);
parcelHelpers.export(exports, "STATUS_ENTER", ()=>STATUS_ENTER
);
parcelHelpers.export(exports, "STATUS_LEAVE", ()=>STATUS_LEAVE
);
parcelHelpers.export(exports, "STEP_NONE", ()=>STEP_NONE
);
parcelHelpers.export(exports, "STEP_PREPARE", ()=>STEP_PREPARE
);
parcelHelpers.export(exports, "STEP_START", ()=>STEP_START
);
parcelHelpers.export(exports, "STEP_ACTIVE", ()=>STEP_ACTIVE
);
parcelHelpers.export(exports, "STEP_ACTIVATED", ()=>STEP_ACTIVATED
);
var STATUS_NONE = 'none';
var STATUS_APPEAR = 'appear';
var STATUS_ENTER = 'enter';
var STATUS_LEAVE = 'leave';
var STEP_NONE = 'none';
var STEP_PREPARE = 'prepare';
var STEP_START = 'start';
var STEP_ACTIVE = 'active';
var STEP_ACTIVATED = 'end';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jP3R0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useState = require("rc-util/es/hooks/useState");
var _useStateDefault = parcelHelpers.interopDefault(_useState);
var _interface = require("../interface");
var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect");
var _useIsomorphicLayoutEffectDefault = parcelHelpers.interopDefault(_useIsomorphicLayoutEffect);
var _useStepQueue = require("./useStepQueue");
var _useStepQueueDefault = parcelHelpers.interopDefault(_useStepQueue);
var _useDomMotionEvents = require("./useDomMotionEvents");
var _useDomMotionEventsDefault = parcelHelpers.interopDefault(_useDomMotionEvents);
function useStatus(supportMotion, visible, getElement, _ref) {
    var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
    // Used for outer render usage to avoid `visible: false & status: none` to render nothing
    var _useState1 = _useStateDefault.default(), _useState2 = _slicedToArrayDefault.default(_useState1, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
    var _useState3 = _useStateDefault.default(_interface.STATUS_NONE), _useState4 = _slicedToArrayDefault.default(_useState3, 2), status = _useState4[0], setStatus = _useState4[1];
    var _useState5 = _useStateDefault.default(null), _useState6 = _slicedToArrayDefault.default(_useState5, 2), style = _useState6[0], setStyle = _useState6[1];
    var mountedRef = _react.useRef(false);
    var deadlineRef = _react.useRef(null); // =========================== Dom Node ===========================
    var cacheElementRef = _react.useRef(null);
    function getDomElement() {
        var element = getElement();
        return element || cacheElementRef.current;
    } // ========================== Motion End ==========================
    var activeRef = _react.useRef(false);
    function onInternalMotionEnd(event) {
        var element = getDomElement();
        if (event && !event.deadline && event.target !== element) // event exists
        // not initiated by deadline
        // transitionEnd not fired by inner elements
        return;
        var currentActive = activeRef.current;
        var canEnd;
        if (status === _interface.STATUS_APPEAR && currentActive) canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
        else if (status === _interface.STATUS_ENTER && currentActive) canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
        else if (status === _interface.STATUS_LEAVE && currentActive) canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
         // Only update status when `canEnd` and not destroyed
        if (status !== _interface.STATUS_NONE && currentActive && canEnd !== false) {
            setStatus(_interface.STATUS_NONE, true);
            setStyle(null, true);
        }
    }
    var _useDomMotionEvents1 = _useDomMotionEventsDefault.default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArrayDefault.default(_useDomMotionEvents1, 1), patchMotionEvents = _useDomMotionEvents2[0]; // ============================= Step =============================
    var eventHandlers = _react.useMemo(function() {
        var _ref2, _ref3, _ref4;
        switch(status){
            case _interface.STATUS_APPEAR:
                return _ref2 = {}, _definePropertyDefault.default(_ref2, _interface.STEP_PREPARE, onAppearPrepare), _definePropertyDefault.default(_ref2, _interface.STEP_START, onAppearStart), _definePropertyDefault.default(_ref2, _interface.STEP_ACTIVE, onAppearActive), _ref2;
            case _interface.STATUS_ENTER:
                return _ref3 = {}, _definePropertyDefault.default(_ref3, _interface.STEP_PREPARE, onEnterPrepare), _definePropertyDefault.default(_ref3, _interface.STEP_START, onEnterStart), _definePropertyDefault.default(_ref3, _interface.STEP_ACTIVE, onEnterActive), _ref3;
            case _interface.STATUS_LEAVE:
                return _ref4 = {}, _definePropertyDefault.default(_ref4, _interface.STEP_PREPARE, onLeavePrepare), _definePropertyDefault.default(_ref4, _interface.STEP_START, onLeaveStart), _definePropertyDefault.default(_ref4, _interface.STEP_ACTIVE, onLeaveActive), _ref4;
            default:
                return {};
        }
    }, [
        status
    ]);
    var _useStepQueue1 = _useStepQueueDefault.default(status, function(newStep) {
        // Only prepare step can be skip
        if (newStep === _interface.STEP_PREPARE) {
            var onPrepare = eventHandlers[_interface.STEP_PREPARE];
            if (!onPrepare) return _useStepQueue.SkipStep;
            return onPrepare(getDomElement());
        } // Rest step is sync update
        // Rest step is sync update
        if (step in eventHandlers) {
            var _eventHandlers$step;
            setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
        }
        if (step === _interface.STEP_ACTIVE) {
            // Patch events when motion needed
            patchMotionEvents(getDomElement());
            if (motionDeadline > 0) {
                clearTimeout(deadlineRef.current);
                deadlineRef.current = setTimeout(function() {
                    onInternalMotionEnd({
                        deadline: true
                    });
                }, motionDeadline);
            }
        }
        return _useStepQueue.DoStep;
    }), _useStepQueue2 = _slicedToArrayDefault.default(_useStepQueue1, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
    var active = _useStepQueue.isActive(step);
    activeRef.current = active; // ============================ Status ============================
    // Update with new status
    _useIsomorphicLayoutEffectDefault.default(function() {
        setAsyncVisible(visible);
        var isMounted = mountedRef.current;
        mountedRef.current = true;
        if (!supportMotion) return;
        var nextStatus; // Appear
        if (!isMounted && visible && motionAppear) nextStatus = _interface.STATUS_APPEAR;
         // Enter
        if (isMounted && visible && motionEnter) nextStatus = _interface.STATUS_ENTER;
         // Leave
        if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) nextStatus = _interface.STATUS_LEAVE;
         // Update to next status
        if (nextStatus) {
            setStatus(nextStatus);
            startStep();
        }
    }, [
        visible
    ]); // ============================ Effect ============================
    // Reset when motion changed
    _react.useEffect(function() {
        if (status === _interface.STATUS_APPEAR && !motionAppear || status === _interface.STATUS_ENTER && !motionEnter || status === _interface.STATUS_LEAVE && !motionLeave) setStatus(_interface.STATUS_NONE);
    }, [
        motionAppear,
        motionEnter,
        motionLeave
    ]);
    _react.useEffect(function() {
        return function() {
            clearTimeout(deadlineRef.current);
        };
    }, []); // Trigger `onVisibleChanged`
    _react.useEffect(function() {
        if (asyncVisible !== undefined && status === _interface.STATUS_NONE) onVisibleChanged === null || onVisibleChanged === void 0 || onVisibleChanged(asyncVisible);
    }, [
        asyncVisible,
        status
    ]); // ============================ Styles ============================
    var mergedStyle = style;
    if (eventHandlers[_interface.STEP_PREPARE] && step === _interface.STEP_START) mergedStyle = _objectSpread2Default.default({
        transition: 'none'
    }, mergedStyle);
    return [
        status,
        step,
        mergedStyle,
        asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible
    ];
}
exports.default = useStatus;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/hooks/useState":"5a1b3","../interface":"jiBuw","./useIsomorphicLayoutEffect":"iqxUG","./useStepQueue":"llG0W","./useDomMotionEvents":"ghlLG","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5a1b3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
function useState(defaultValue) {
    var destroyRef = _react.useRef(false);
    var _React$useState = _react.useState(defaultValue), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    _react.useEffect(function() {
        return function() {
            destroyRef.current = true;
        };
    }, []);
    function safeSetState(updater, ignoreDestroy) {
        if (ignoreDestroy && destroyRef.current) return;
        setValue(updater);
    }
    return [
        value,
        safeSetState
    ];
}
exports.default = useState;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iqxUG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _canUseDom = require("rc-util/es/Dom/canUseDom"); // It's safe to use `useLayoutEffect` but the warning is annoying
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var useIsomorphicLayoutEffect = _canUseDomDefault.default() ? _react.useLayoutEffect : _react.useEffect;
exports.default = useIsomorphicLayoutEffect;

},{"react":"b4tPL","rc-util/es/Dom/canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"llG0W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SkipStep", ()=>SkipStep
);
parcelHelpers.export(exports, "DoStep", ()=>DoStep
);
parcelHelpers.export(exports, "isActive", ()=>isActive
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useState = require("rc-util/es/hooks/useState");
var _useStateDefault = parcelHelpers.interopDefault(_useState);
var _interface = require("../interface");
var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect");
var _useIsomorphicLayoutEffectDefault = parcelHelpers.interopDefault(_useIsomorphicLayoutEffect);
var _useNextFrame = require("./useNextFrame");
var _useNextFrameDefault = parcelHelpers.interopDefault(_useNextFrame);
var STEP_QUEUE = [
    _interface.STEP_PREPARE,
    _interface.STEP_START,
    _interface.STEP_ACTIVE,
    _interface.STEP_ACTIVATED
];
var SkipStep = false;
var DoStep = true;
function isActive(step) {
    return step === _interface.STEP_ACTIVE || step === _interface.STEP_ACTIVATED;
}
exports.default = function(status, callback) {
    var _useState1 = _useStateDefault.default(_interface.STEP_NONE), _useState2 = _slicedToArrayDefault.default(_useState1, 2), step = _useState2[0], setStep = _useState2[1];
    var _useNextFrame1 = _useNextFrameDefault.default(), _useNextFrame2 = _slicedToArrayDefault.default(_useNextFrame1, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
    function startQueue() {
        setStep(_interface.STEP_PREPARE, true);
    }
    _useIsomorphicLayoutEffectDefault.default(function() {
        if (step !== _interface.STEP_NONE && step !== _interface.STEP_ACTIVATED) {
            var index = STEP_QUEUE.indexOf(step);
            var nextStep = STEP_QUEUE[index + 1];
            var result = callback(step);
            if (result === SkipStep) // Skip when no needed
            setStep(nextStep, true);
            else // Do as frame for step update
            nextFrame(function(info) {
                function doNext() {
                    // Skip since current queue is ood
                    if (info.isCanceled()) return;
                    setStep(nextStep, true);
                }
                if (result === true) doNext();
                else // Only promise should be async
                Promise.resolve(result).then(doNext);
            });
        }
    }, [
        status,
        step
    ]);
    _react.useEffect(function() {
        return function() {
            cancelNextFrame();
        };
    }, []);
    return [
        startQueue,
        step
    ];
};

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/hooks/useState":"5a1b3","../interface":"jiBuw","./useIsomorphicLayoutEffect":"iqxUG","./useNextFrame":"o9nbY","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"o9nbY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
exports.default = function() {
    var nextFrameRef = _react.useRef(null);
    function cancelNextFrame() {
        _rafDefault.default.cancel(nextFrameRef.current);
    }
    function nextFrame(callback) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
        cancelNextFrame();
        var nextFrameId = _rafDefault.default(function() {
            if (delay <= 1) callback({
                isCanceled: function isCanceled() {
                    return nextFrameId !== nextFrameRef.current;
                }
            });
            else nextFrame(callback, delay - 1);
        });
        nextFrameRef.current = nextFrameId;
    }
    _react.useEffect(function() {
        return function() {
            cancelNextFrame();
        };
    }, []);
    return [
        nextFrame,
        cancelNextFrame
    ];
};

},{"react":"b4tPL","rc-util/es/raf":"h9LA9","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"h9LA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var raf = function raf(callback) {
    return +setTimeout(callback, 16);
};
var caf = function caf(num) {
    return clearTimeout(num);
};
if (typeof window !== 'undefined' && 'requestAnimationFrame' in window) {
    raf = function raf(callback) {
        return window.requestAnimationFrame(callback);
    };
    caf = function caf(handle) {
        return window.cancelAnimationFrame(handle);
    };
}
var rafUUID = 0;
var rafIds = new Map();
function cleanup(id) {
    rafIds.delete(id);
}
function wrapperRaf(callback) {
    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    rafUUID += 1;
    var id = rafUUID;
    function callRef(leftTimes) {
        if (leftTimes === 0) {
            // Clean up
            cleanup(id); // Trigger
            callback();
        } else {
            // Next raf
            var realId = raf(function() {
                callRef(leftTimes - 1);
            }); // Bind real raf id
            rafIds.set(id, realId);
        }
    }
    callRef(times);
    return id;
}
exports.default = wrapperRaf;
wrapperRaf.cancel = function(id) {
    var realId = rafIds.get(id);
    cleanup(realId);
    return caf(realId);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ghlLG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _motion = require("../util/motion");
exports.default = function(callback) {
    var cacheElementRef = _react.useRef(); // Cache callback
    var callbackRef = _react.useRef(callback);
    callbackRef.current = callback; // Internal motion event handler
    var onInternalMotionEnd = _react.useCallback(function(event) {
        callbackRef.current(event);
    }, []); // Remove events
    function removeMotionEvents(element) {
        if (element) {
            element.removeEventListener(_motion.transitionEndName, onInternalMotionEnd);
            element.removeEventListener(_motion.animationEndName, onInternalMotionEnd);
        }
    } // Patch events
    function patchMotionEvents(element) {
        if (cacheElementRef.current && cacheElementRef.current !== element) removeMotionEvents(cacheElementRef.current);
        if (element && element !== cacheElementRef.current) {
            element.addEventListener(_motion.transitionEndName, onInternalMotionEnd);
            element.addEventListener(_motion.animationEndName, onInternalMotionEnd); // Save as cache in case dom removed trigger by `motionDeadline`
            cacheElementRef.current = element;
        }
    } // Clean up when removed
    _react.useEffect(function() {
        return function() {
            removeMotionEvents(cacheElementRef.current);
        };
    }, []);
    return [
        patchMotionEvents,
        removeMotionEvents
    ];
};

},{"react":"b4tPL","../util/motion":"loX1n","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ifyWq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var DomWrapper = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(DomWrapper1, _React$Component);
    var _super = _createSuperDefault.default(DomWrapper1);
    function DomWrapper1() {
        _classCallCheckDefault.default(this, DomWrapper1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(DomWrapper1, [
        {
            key: "render",
            value: function render() {
                return this.props.children;
            }
        }
    ]);
    return DomWrapper1;
}(_react.Component);
exports.default = DomWrapper;

},{"@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7XUkT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Generate a CSSMotionList component with config
 * @param transitionSupport No need since CSSMotionList no longer depends on transition support
 * @param CSSMotion CSSMotion component
 */ parcelHelpers.export(exports, "genCSSMotionList", ()=>genCSSMotionList
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
/* eslint react/prop-types: 0 */ var _react = require("react");
var _cssmotion = require("./CSSMotion");
var _cssmotionDefault = parcelHelpers.interopDefault(_cssmotion);
var _motion = require("./util/motion");
var _diff = require("./util/diff");
var _excluded = [
    "component",
    "children",
    "onVisibleChanged"
], _excluded2 = [
    "status"
];
var MOTION_PROP_NAMES = [
    'eventProps',
    'visible',
    'children',
    'motionName',
    'motionAppear',
    'motionEnter',
    'motionLeave',
    'motionLeaveImmediately',
    'motionDeadline',
    'removeOnLeave',
    'leavedClassName',
    'onAppearStart',
    'onAppearActive',
    'onAppearEnd',
    'onEnterStart',
    'onEnterActive',
    'onEnterEnd',
    'onLeaveStart',
    'onLeaveActive',
    'onLeaveEnd'
];
function genCSSMotionList(transitionSupport) {
    var CSSMotion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _cssmotionDefault.default;
    var CSSMotionList1 = /*#__PURE__*/ function(_React$Component) {
        _inheritsDefault.default(CSSMotionList, _React$Component);
        var _super = _createSuperDefault.default(CSSMotionList);
        function CSSMotionList() {
            var _this;
            _classCallCheckDefault.default(this, CSSMotionList);
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            _this = _super.call.apply(_super, [
                this
            ].concat(args));
            _this.state = {
                keyEntities: []
            };
            _this.removeKey = function(removeKey) {
                _this.setState(function(_ref) {
                    var keyEntities = _ref.keyEntities;
                    return {
                        keyEntities: keyEntities.map(function(entity) {
                            if (entity.key !== removeKey) return entity;
                            return _objectSpread2Default.default(_objectSpread2Default.default({}, entity), {}, {
                                status: _diff.STATUS_REMOVED
                            });
                        })
                    };
                });
            };
            return _this;
        }
        _createClassDefault.default(CSSMotionList, [
            {
                key: "render",
                value: function render() {
                    var _this2 = this;
                    var keyEntities = this.state.keyEntities;
                    var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, restProps = _objectWithoutPropertiesDefault.default(_this$props, _excluded);
                    var Component = component || _react.Fragment;
                    var motionProps = {};
                    MOTION_PROP_NAMES.forEach(function(prop) {
                        motionProps[prop] = restProps[prop];
                        delete restProps[prop];
                    });
                    delete restProps.keys;
                    return /*#__PURE__*/ _react.createElement(Component, restProps, keyEntities.map(function(_ref2) {
                        var status = _ref2.status, eventProps = _objectWithoutPropertiesDefault.default(_ref2, _excluded2);
                        var visible = status === _diff.STATUS_ADD || status === _diff.STATUS_KEEP;
                        return /*#__PURE__*/ _react.createElement(CSSMotion, _extendsDefault.default({}, motionProps, {
                            key: eventProps.key,
                            visible: visible,
                            eventProps: eventProps,
                            onVisibleChanged: function onVisibleChanged(changedVisible) {
                                _onVisibleChanged === null || _onVisibleChanged === void 0 || _onVisibleChanged(changedVisible, {
                                    key: eventProps.key
                                });
                                if (!changedVisible) _this2.removeKey(eventProps.key);
                            }
                        }), children);
                    }));
                }
            }
        ], [
            {
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(_ref3, _ref4) {
                    var keys = _ref3.keys;
                    var keyEntities = _ref4.keyEntities;
                    var parsedKeyObjects = _diff.parseKeys(keys);
                    var mixedKeyEntities = _diff.diffKeys(keyEntities, parsedKeyObjects);
                    return {
                        keyEntities: mixedKeyEntities.filter(function(entity) {
                            var prevEntity = keyEntities.find(function(_ref5) {
                                var key = _ref5.key;
                                return entity.key === key;
                            }); // Remove if already mark as removed
                            if (prevEntity && prevEntity.status === _diff.STATUS_REMOVED && entity.status === _diff.STATUS_REMOVE) return false;
                            return true;
                        })
                    };
                }
            }
        ]);
        return CSSMotionList;
    }(_react.Component);
    CSSMotionList1.defaultProps = {
        component: 'div'
    };
    return CSSMotionList1;
}
exports.default = genCSSMotionList(_motion.supportTransition);

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","./CSSMotion":"k2p7A","./util/motion":"loX1n","./util/diff":"2HryU","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2HryU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "STATUS_ADD", ()=>STATUS_ADD
);
parcelHelpers.export(exports, "STATUS_KEEP", ()=>STATUS_KEEP
);
parcelHelpers.export(exports, "STATUS_REMOVE", ()=>STATUS_REMOVE
);
parcelHelpers.export(exports, "STATUS_REMOVED", ()=>STATUS_REMOVED
);
parcelHelpers.export(exports, "wrapKeyToObject", ()=>wrapKeyToObject
);
parcelHelpers.export(exports, "parseKeys", ()=>parseKeys
);
parcelHelpers.export(exports, "diffKeys", ()=>diffKeys
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var STATUS_ADD = 'add';
var STATUS_KEEP = 'keep';
var STATUS_REMOVE = 'remove';
var STATUS_REMOVED = 'removed';
function wrapKeyToObject(key) {
    var keyObj;
    if (key && _typeofDefault.default(key) === 'object' && 'key' in key) keyObj = key;
    else keyObj = {
        key: key
    };
    return _objectSpread2Default.default(_objectSpread2Default.default({}, keyObj), {}, {
        key: String(keyObj.key)
    });
}
function parseKeys() {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return keys.map(wrapKeyToObject);
}
function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep
    prevKeyObjects.forEach(function(keyObj) {
        var hit = false;
        for(var i = currentIndex; i < currentLen; i += 1){
            var currentKeyObj = currentKeyObjects[i];
            if (currentKeyObj.key === keyObj.key) {
                // New added keys should add before current key
                if (currentIndex < i) {
                    list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function(obj) {
                        return _objectSpread2Default.default(_objectSpread2Default.default({}, obj), {}, {
                            status: STATUS_ADD
                        });
                    }));
                    currentIndex = i;
                }
                list.push(_objectSpread2Default.default(_objectSpread2Default.default({}, currentKeyObj), {}, {
                    status: STATUS_KEEP
                }));
                currentIndex += 1;
                hit = true;
                break;
            }
        } // If not hit, it means key is removed
        if (!hit) list.push(_objectSpread2Default.default(_objectSpread2Default.default({}, keyObj), {}, {
            status: STATUS_REMOVE
        }));
    }); // Add rest to the list
    if (currentIndex < currentLen) list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
        return _objectSpread2Default.default(_objectSpread2Default.default({}, obj), {}, {
            status: STATUS_ADD
        });
    }));
    /**
   * Merge same key when it remove and add again:
   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]
   */ var keys = {};
    list.forEach(function(_ref) {
        var key = _ref.key;
        keys[key] = (keys[key] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys).filter(function(key) {
        return keys[key] > 1;
    });
    duplicatedKeys.forEach(function(matchKey) {
        // Remove `STATUS_REMOVE` node.
        list = list.filter(function(_ref2) {
            var key = _ref2.key, status = _ref2.status;
            return key !== matchKey || status !== STATUS_REMOVE;
        }); // Update `STATUS_ADD` to `STATUS_KEEP`
        list.forEach(function(node) {
            if (node.key === matchKey) // eslint-disable-next-line no-param-reassign
            node.status = STATUS_KEEP;
        });
    });
    return list;
}

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/typeof":"bgxCq","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2hScT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Notice
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var Notice = /*#__PURE__*/ function(_Component) {
    _inheritsDefault.default(Notice1, _Component);
    var _super = _createSuperDefault.default(Notice1);
    function Notice1() {
        var _this;
        _classCallCheckDefault.default(this, Notice1);
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _super.call.apply(_super, [
            this
        ].concat(args));
        _this.closeTimer = null;
        _this.close = function(e) {
            if (e) e.stopPropagation();
            _this.clearCloseTimer();
            var _this$props = _this.props, onClose = _this$props.onClose, noticeKey = _this$props.noticeKey;
            if (onClose) onClose(noticeKey);
        };
        _this.startCloseTimer = function() {
            if (_this.props.duration) _this.closeTimer = window.setTimeout(function() {
                _this.close();
            }, _this.props.duration * 1000);
        };
        _this.clearCloseTimer = function() {
            if (_this.closeTimer) {
                clearTimeout(_this.closeTimer);
                _this.closeTimer = null;
            }
        };
        return _this;
    }
    _createClassDefault.default(Notice1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.startCloseTimer();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || this.props.visible !== prevProps.visible && this.props.visible) this.restartCloseTimer();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.clearCloseTimer();
            }
        },
        {
            key: "restartCloseTimer",
            value: function restartCloseTimer() {
                this.clearCloseTimer();
                this.startCloseTimer();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this2 = this;
                var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closable = _this$props2.closable, closeIcon = _this$props2.closeIcon, style = _this$props2.style, onClick = _this$props2.onClick, children = _this$props2.children, holder = _this$props2.holder;
                var componentClass = "".concat(prefixCls, "-notice");
                var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(acc, key) {
                    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') acc[key] = _this2.props[key];
                    return acc;
                }, {});
                var node = /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
                    className: _classnamesDefault.default(componentClass, className, _definePropertyDefault.default({}, "".concat(componentClass, "-closable"), closable)),
                    style: style,
                    onMouseEnter: this.clearCloseTimer,
                    onMouseLeave: this.startCloseTimer,
                    onClick: onClick
                }, dataOrAriaAttributeProps), /*#__PURE__*/ _react.createElement("div", {
                    className: "".concat(componentClass, "-content")
                }, children), closable ? /*#__PURE__*/ _react.createElement("a", {
                    tabIndex: 0,
                    onClick: this.close,
                    className: "".concat(componentClass, "-close")
                }, closeIcon || /*#__PURE__*/ _react.createElement("span", {
                    className: "".concat(componentClass, "-close-x")
                })) : null);
                if (holder) return /*#__PURE__*/ _reactDomDefault.default.createPortal(node, holder);
                return node;
            }
        }
    ]);
    return Notice1;
}(_react.Component);
Notice.defaultProps = {
    onClose: function onClose() {},
    duration: 1.5
};

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","react-dom":"hKAbJ","classnames":"dFgpN","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4Iva2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _notice = require("./Notice");
var _noticeDefault = parcelHelpers.interopDefault(_notice);
function useNotification(notificationInstance) {
    var createdRef = _react.useRef({});
    var _React$useState = _react.useState([]), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), elements = _React$useState2[0], setElements = _React$useState2[1];
    function notify(noticeProps) {
        var firstMount = true;
        notificationInstance.add(noticeProps, function(div, props) {
            var key = props.key;
            if (div && (!createdRef.current[key] || firstMount)) {
                var noticeEle = /*#__PURE__*/ _react.createElement(_noticeDefault.default, _extendsDefault.default({}, props, {
                    holder: div
                }));
                createdRef.current[key] = noticeEle;
                setElements(function(originElements) {
                    var index = originElements.findIndex(function(ele) {
                        return ele.key === props.key;
                    });
                    if (index === -1) return [].concat(_toConsumableArrayDefault.default(originElements), [
                        noticeEle
                    ]);
                    var cloneList = _toConsumableArrayDefault.default(originElements);
                    cloneList[index] = noticeEle;
                    return cloneList;
                });
            }
            firstMount = false;
        });
    }
    return [
        notify,
        /*#__PURE__*/ _react.createElement(_react.Fragment, null, elements)
    ];
}
exports.default = useNotification;

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","./Notice":"2hScT","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"e4Ctf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _loadingOutlined = require("@ant-design/icons-svg/es/asn/LoadingOutlined");
var _loadingOutlinedDefault = parcelHelpers.interopDefault(_loadingOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var LoadingOutlined = function LoadingOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _loadingOutlinedDefault.default
    }));
};
LoadingOutlined.displayName = 'LoadingOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(LoadingOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/LoadingOutlined":"8nriX","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8nriX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var LoadingOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "0 0 1024 1024",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                }
            }
        ]
    },
    "name": "loading",
    "theme": "outlined"
};
exports.default = LoadingOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"krnKi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _context = require("./Context");
var _contextDefault = parcelHelpers.interopDefault(_context);
var _iconBase = require("./IconBase");
var _iconBaseDefault = parcelHelpers.interopDefault(_iconBase);
var _twoTonePrimaryColor = require("./twoTonePrimaryColor");
var _utils = require("../utils"); // Initial setting
var _excluded = [
    "className",
    "icon",
    "spin",
    "rotate",
    "tabIndex",
    "onClick",
    "twoToneColor"
];
// should move it to antd main repo?
_twoTonePrimaryColor.setTwoToneColor('#1890ff');
var Icon = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _classNames;
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var _React$useContext = _react.useContext(_contextDefault.default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? 'anticon' : _React$useContext$pre;
    var classString = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === 'loading'), _classNames), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === undefined && onClick) iconTabIndex = -1;
    var svgStyle = rotate ? {
        msTransform: "rotate(".concat(rotate, "deg)"),
        transform: "rotate(".concat(rotate, "deg)")
    } : undefined;
    var _normalizeTwoToneColo = _utils.normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArrayDefault.default(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /*#__PURE__*/ _react.createElement("span", _objectSpread2Default.default(_objectSpread2Default.default({
        role: "img",
        "aria-label": icon.name
    }, restProps), {}, {
        ref: ref,
        tabIndex: iconTabIndex,
        onClick: onClick,
        className: classString
    }), /*#__PURE__*/ _react.createElement(_iconBaseDefault.default, {
        icon: icon,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        style: svgStyle
    }));
});
Icon.displayName = 'AntdIcon';
Icon.getTwoToneColor = _twoTonePrimaryColor.getTwoToneColor;
Icon.setTwoToneColor = _twoTonePrimaryColor.setTwoToneColor;
exports.default = Icon;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","./Context":"6XDnW","./IconBase":"3bVnm","./twoTonePrimaryColor":"hvpkh","../utils":"9H67m","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3bVnm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _utils = require("../utils");
var _excluded = [
    "icon",
    "className",
    "onClick",
    "style",
    "primaryColor",
    "secondaryColor"
];
var twoToneColorPalette = {
    primaryColor: '#333',
    secondaryColor: '#E6E6E6',
    calculated: false
};
function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || _utils.getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
    return _objectSpread2Default.default({}, twoToneColorPalette);
}
var IconBase = function IconBase(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var colors = twoToneColorPalette;
    if (primaryColor) colors = {
        primaryColor: primaryColor,
        secondaryColor: secondaryColor || _utils.getSecondaryColor(primaryColor)
    };
    _utils.useInsertStyles();
    _utils.warning(_utils.isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!_utils.isIconDefinition(icon)) return null;
    var target = icon;
    if (target && typeof target.icon === 'function') target = _objectSpread2Default.default(_objectSpread2Default.default({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
    });
    return _utils.generate(target.icon, "svg-".concat(target.name), _objectSpread2Default.default({
        className: className,
        onClick: onClick,
        style: style,
        'data-icon': target.name,
        width: '1em',
        height: '1em',
        fill: 'currentColor',
        'aria-hidden': 'true'
    }, restProps));
};
IconBase.displayName = 'IconReact';
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
exports.default = IconBase;

},{"@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","../utils":"9H67m","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9H67m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warning", ()=>warning
);
parcelHelpers.export(exports, "isIconDefinition", ()=>isIconDefinition
);
parcelHelpers.export(exports, "normalizeAttrs", ()=>normalizeAttrs
);
parcelHelpers.export(exports, "generate", ()=>generate
);
parcelHelpers.export(exports, "getSecondaryColor", ()=>getSecondaryColor
);
parcelHelpers.export(exports, "normalizeTwoToneColors", ()=>normalizeTwoToneColors
) // These props make sure that the SVG behaviours like general text.
;
parcelHelpers.export(exports, "svgBaseProps", ()=>svgBaseProps
);
parcelHelpers.export(exports, "iconStyles", ()=>iconStyles
);
parcelHelpers.export(exports, "useInsertStyles", ()=>useInsertStyles
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _colors = require("@ant-design/colors");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _dynamicCSS = require("rc-util/es/Dom/dynamicCSS");
var _context = require("./components/Context");
var _contextDefault = parcelHelpers.interopDefault(_context);
function warning(valid, message) {
    _warningDefault.default(valid, "[@ant-design/icons] ".concat(message));
}
function isIconDefinition(target) {
    return _typeofDefault.default(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (_typeofDefault.default(target.icon) === 'object' || typeof target.icon === 'function');
}
function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key) {
        var val = attrs[key];
        switch(key){
            case 'class':
                acc.className = val;
                delete acc.class;
                break;
            default:
                acc[key] = val;
        }
        return acc;
    }, {});
}
function generate(node, key, rootProps) {
    if (!rootProps) return /*#__PURE__*/ _reactDefault.default.createElement(node.tag, _objectSpread2Default.default({
        key: key
    }, normalizeAttrs(node.attrs)), (node.children || []).map(function(child, index) {
        return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
    return /*#__PURE__*/ _reactDefault.default.createElement(node.tag, _objectSpread2Default.default(_objectSpread2Default.default({
        key: key
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function(child, index) {
        return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
}
function getSecondaryColor(primaryColor) {
    // choose the second color
    return _colors.generate(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) return [];
    return Array.isArray(twoToneColor) ? twoToneColor : [
        twoToneColor
    ];
}
var svgBaseProps = {
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    'aria-hidden': 'true',
    focusable: 'false'
};
var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
var useInsertStyles = function useInsertStyles() {
    var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;
    var _useContext = _react.useContext(_contextDefault.default), csp = _useContext.csp;
    _react.useEffect(function() {
        _dynamicCSS.updateCSS(styleStr, '@ant-design-icons', {
            prepend: true,
            csp: csp
        });
    }, []);
};

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/typeof":"bgxCq","@ant-design/colors":"51wCJ","react":"b4tPL","rc-util/es/warning":"bfz97","rc-util/es/Dom/dynamicCSS":"W9UzB","./components/Context":"6XDnW","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"51wCJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blue", ()=>blue
);
parcelHelpers.export(exports, "cyan", ()=>cyan
);
parcelHelpers.export(exports, "geekblue", ()=>geekblue
);
parcelHelpers.export(exports, "generate", ()=>generate
);
parcelHelpers.export(exports, "gold", ()=>gold
);
parcelHelpers.export(exports, "green", ()=>green
);
parcelHelpers.export(exports, "grey", ()=>grey
);
parcelHelpers.export(exports, "lime", ()=>lime
);
parcelHelpers.export(exports, "magenta", ()=>magenta
);
parcelHelpers.export(exports, "orange", ()=>orange
);
parcelHelpers.export(exports, "presetDarkPalettes", ()=>presetDarkPalettes
);
parcelHelpers.export(exports, "presetPalettes", ()=>presetPalettes
);
parcelHelpers.export(exports, "presetPrimaryColors", ()=>presetPrimaryColors
);
parcelHelpers.export(exports, "purple", ()=>purple
);
parcelHelpers.export(exports, "red", ()=>red
);
parcelHelpers.export(exports, "volcano", ()=>volcano
);
parcelHelpers.export(exports, "yellow", ()=>yellow
);
var _tinycolor = require("@ctrl/tinycolor");
var hueStep = 2; // 色相阶梯
var saturationStep = 0.16; // 饱和度阶梯，浅色部分
var saturationStep2 = 0.05; // 饱和度阶梯，深色部分
var brightnessStep1 = 0.05; // 亮度阶梯，浅色部分
var brightnessStep2 = 0.15; // 亮度阶梯，深色部分
var lightColorCount = 5; // 浅色数量，主色上
var darkColorCount = 4; // 深色数量，主色下
// 暗色主题颜色映射关系表
var darkColorMap = [
    {
        index: 7,
        opacity: 0.15
    },
    {
        index: 6,
        opacity: 0.25
    },
    {
        index: 5,
        opacity: 0.3
    },
    {
        index: 5,
        opacity: 0.45
    },
    {
        index: 5,
        opacity: 0.65
    },
    {
        index: 5,
        opacity: 0.85
    },
    {
        index: 4,
        opacity: 0.9
    },
    {
        index: 3,
        opacity: 0.95
    },
    {
        index: 2,
        opacity: 0.97
    },
    {
        index: 1,
        opacity: 0.98
    }
]; // Wrapper function ported from TinyColor.prototype.toHsv
// Keep it here because of `hsv.h * 360`
function toHsv(_ref) {
    var r = _ref.r, g = _ref.g, b = _ref.b;
    var hsv = _tinycolor.rgbToHsv(r, g, b);
    return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v
    };
} // Wrapper function ported from TinyColor.prototype.toHexString
// Keep it here because of the prefix `#`
function toHex(_ref2) {
    var r = _ref2.r, g = _ref2.g, b = _ref2.b;
    return "#".concat(_tinycolor.rgbToHex(r, g, b, false));
} // Wrapper function ported from TinyColor.prototype.mix, not treeshakable.
// Amount in range [0, 1]
// Assume color1 & color2 has no alpha, since the following src code did so.
function mix(rgb1, rgb2, amount) {
    var p = amount / 100;
    var rgb = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b
    };
    return rgb;
}
function getHue(hsv, i, light) {
    var hue; // 根据色相不同，色相转向不同
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    else hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    if (hue < 0) hue += 360;
    else if (hue >= 360) hue -= 360;
    return hue;
}
function getSaturation(hsv, i, light) {
    // grey color don't change saturation
    if (hsv.h === 0 && hsv.s === 0) return hsv.s;
    var saturation;
    if (light) saturation = hsv.s - saturationStep * i;
    else if (i === darkColorCount) saturation = hsv.s + saturationStep;
    else saturation = hsv.s + saturationStep2 * i;
     // 边界值修正
    if (saturation > 1) saturation = 1;
     // 第一格的 s 限制在 0.06-0.1 之间
    if (light && i === lightColorCount && saturation > 0.1) saturation = 0.1;
    if (saturation < 0.06) saturation = 0.06;
    return Number(saturation.toFixed(2));
}
function getValue(hsv, i, light) {
    var value;
    if (light) value = hsv.v + brightnessStep1 * i;
    else value = hsv.v - brightnessStep2 * i;
    if (value > 1) value = 1;
    return Number(value.toFixed(2));
}
function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var patterns = [];
    var pColor = _tinycolor.inputToRGB(color);
    for(var i = lightColorCount; i > 0; i -= 1){
        var hsv = toHsv(pColor);
        var colorString = toHex(_tinycolor.inputToRGB({
            h: getHue(hsv, i, true),
            s: getSaturation(hsv, i, true),
            v: getValue(hsv, i, true)
        }));
        patterns.push(colorString);
    }
    patterns.push(toHex(pColor));
    for(var _i = 1; _i <= darkColorCount; _i += 1){
        var _hsv = toHsv(pColor);
        var _colorString = toHex(_tinycolor.inputToRGB({
            h: getHue(_hsv, _i),
            s: getSaturation(_hsv, _i),
            v: getValue(_hsv, _i)
        }));
        patterns.push(_colorString);
    } // dark theme patterns
    if (opts.theme === 'dark') return darkColorMap.map(function(_ref3) {
        var index = _ref3.index, opacity = _ref3.opacity;
        var darkColorString = toHex(mix(_tinycolor.inputToRGB(opts.backgroundColor || '#141414'), _tinycolor.inputToRGB(patterns[index]), opacity * 100));
        return darkColorString;
    });
    return patterns;
}
var presetPrimaryColors = {
    red: '#F5222D',
    volcano: '#FA541C',
    orange: '#FA8C16',
    gold: '#FAAD14',
    yellow: '#FADB14',
    lime: '#A0D911',
    green: '#52C41A',
    cyan: '#13C2C2',
    blue: '#1890FF',
    geekblue: '#2F54EB',
    purple: '#722ED1',
    magenta: '#EB2F96',
    grey: '#666666'
};
var presetPalettes = {};
var presetDarkPalettes = {};
Object.keys(presetPrimaryColors).forEach(function(key) {
    presetPalettes[key] = generate(presetPrimaryColors[key]);
    presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes
    presetDarkPalettes[key] = generate(presetPrimaryColors[key], {
        theme: 'dark',
        backgroundColor: '#141414'
    });
    presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
});
var red = presetPalettes.red;
var volcano = presetPalettes.volcano;
var gold = presetPalettes.gold;
var orange = presetPalettes.orange;
var yellow = presetPalettes.yellow;
var lime = presetPalettes.lime;
var green = presetPalettes.green;
var cyan = presetPalettes.cyan;
var blue = presetPalettes.blue;
var geekblue = presetPalettes.geekblue;
var purple = presetPalettes.purple;
var magenta = presetPalettes.magenta;
var grey = presetPalettes.grey;

},{"@ctrl/tinycolor":"3OnV7","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3OnV7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
parcelHelpers.exportAll(_index, exports);
var _cssColorNames = require("./css-color-names");
parcelHelpers.exportAll(_cssColorNames, exports);
var _readability = require("./readability");
parcelHelpers.exportAll(_readability, exports);
var _toMsFilter = require("./to-ms-filter");
parcelHelpers.exportAll(_toMsFilter, exports);
var _fromRatio = require("./from-ratio");
parcelHelpers.exportAll(_fromRatio, exports);
var _formatInput = require("./format-input");
parcelHelpers.exportAll(_formatInput, exports);
var _random = require("./random");
parcelHelpers.exportAll(_random, exports);
var _interfaces = require("./interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _conversion = require("./conversion");
parcelHelpers.exportAll(_conversion, exports);
// kept for backwards compatability with v1
exports.default = _index.tinycolor;

},{"./index":"dhZrZ","./css-color-names":"1VUIa","./readability":"lfEZu","./to-ms-filter":"drH0R","./from-ratio":"9Bian","./format-input":"afheC","./random":"duaYc","./interfaces":"5WmFf","./conversion":"5mqO7","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dhZrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TinyColor", ()=>TinyColor
);
// kept for backwards compatability with v1
parcelHelpers.export(exports, "tinycolor", ()=>tinycolor
);
var _conversion = require("./conversion");
var _cssColorNames = require("./css-color-names");
var _formatInput = require("./format-input");
var _util = require("./util");
var TinyColor = /** @class */ function() {
    function TinyColor1(color, opts) {
        if (color === void 0) color = '';
        if (opts === void 0) opts = {};
        var _a;
        // If input is already a tinycolor, return itself
        if (color instanceof TinyColor1) // eslint-disable-next-line no-constructor-return
        return color;
        if (typeof color === 'number') color = _conversion.numberInputToObject(color);
        this.originalInput = color;
        var rgb = _formatInput.inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
        this.gradientType = opts.gradientType;
        // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this.r < 1) this.r = Math.round(this.r);
        if (this.g < 1) this.g = Math.round(this.g);
        if (this.b < 1) this.b = Math.round(this.b);
        this.isValid = rgb.ok;
    }
    TinyColor1.prototype.isDark = function() {
        return this.getBrightness() < 128;
    };
    TinyColor1.prototype.isLight = function() {
        return !this.isDark();
    };
    /**
     * Returns the perceived brightness of the color, from 0-255.
     */ TinyColor1.prototype.getBrightness = function() {
        // http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    };
    /**
     * Returns the perceived luminance of a color, from 0-1.
     */ TinyColor1.prototype.getLuminance = function() {
        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var R;
        var G;
        var B;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) R = RsRGB / 12.92;
        else // eslint-disable-next-line prefer-exponentiation-operator
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        if (GsRGB <= 0.03928) G = GsRGB / 12.92;
        else // eslint-disable-next-line prefer-exponentiation-operator
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        if (BsRGB <= 0.03928) B = BsRGB / 12.92;
        else // eslint-disable-next-line prefer-exponentiation-operator
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    /**
     * Returns the alpha value of a color, from 0-1.
     */ TinyColor1.prototype.getAlpha = function() {
        return this.a;
    };
    /**
     * Sets the alpha value on the current color.
     *
     * @param alpha - The new alpha value. The accepted range is 0-1.
     */ TinyColor1.prototype.setAlpha = function(alpha) {
        this.a = _util.boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
    };
    /**
     * Returns the object as a HSVA object.
     */ TinyColor1.prototype.toHsv = function() {
        var hsv = _conversion.rgbToHsv(this.r, this.g, this.b);
        return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this.a
        };
    };
    /**
     * Returns the hsva values interpolated into a string with the following format:
     * "hsva(xxx, xxx, xxx, xx)".
     */ TinyColor1.prototype.toHsvString = function() {
        var hsv = _conversion.rgbToHsv(this.r, this.g, this.b);
        var h = Math.round(hsv.h * 360);
        var s = Math.round(hsv.s * 100);
        var v = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
    };
    /**
     * Returns the object as a HSLA object.
     */ TinyColor1.prototype.toHsl = function() {
        var hsl = _conversion.rgbToHsl(this.r, this.g, this.b);
        return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this.a
        };
    };
    /**
     * Returns the hsla values interpolated into a string with the following format:
     * "hsla(xxx, xxx, xxx, xx)".
     */ TinyColor1.prototype.toHslString = function() {
        var hsl = _conversion.rgbToHsl(this.r, this.g, this.b);
        var h = Math.round(hsl.h * 360);
        var s = Math.round(hsl.s * 100);
        var l = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
    };
    /**
     * Returns the hex value of the color.
     * @param allow3Char will shorten hex value to 3 char if possible
     */ TinyColor1.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) allow3Char = false;
        return _conversion.rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    /**
     * Returns the hex value of the color -with a # appened.
     * @param allow3Char will shorten hex value to 3 char if possible
     */ TinyColor1.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) allow3Char = false;
        return '#' + this.toHex(allow3Char);
    };
    /**
     * Returns the hex 8 value of the color.
     * @param allow4Char will shorten hex value to 4 char if possible
     */ TinyColor1.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) allow4Char = false;
        return _conversion.rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    /**
     * Returns the hex 8 value of the color -with a # appened.
     * @param allow4Char will shorten hex value to 4 char if possible
     */ TinyColor1.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) allow4Char = false;
        return '#' + this.toHex8(allow4Char);
    };
    /**
     * Returns the object as a RGBA object.
     */ TinyColor1.prototype.toRgb = function() {
        return {
            r: Math.round(this.r),
            g: Math.round(this.g),
            b: Math.round(this.b),
            a: this.a
        };
    };
    /**
     * Returns the RGBA values interpolated into a string with the following format:
     * "RGBA(xxx, xxx, xxx, xx)".
     */ TinyColor1.prototype.toRgbString = function() {
        var r = Math.round(this.r);
        var g = Math.round(this.g);
        var b = Math.round(this.b);
        return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";
    };
    /**
     * Returns the object as a RGBA object.
     */ TinyColor1.prototype.toPercentageRgb = function() {
        var fmt = function(x) {
            return Math.round(_util.bound01(x, 255) * 100) + "%";
        };
        return {
            r: fmt(this.r),
            g: fmt(this.g),
            b: fmt(this.b),
            a: this.a
        };
    };
    /**
     * Returns the RGBA relative values interpolated into a string
     */ TinyColor1.prototype.toPercentageRgbString = function() {
        var rnd = function(x) {
            return Math.round(_util.bound01(x, 255) * 100);
        };
        return this.a === 1 ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)" : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
    };
    /**
     * The 'real' name of the color -if there is one.
     */ TinyColor1.prototype.toName = function() {
        if (this.a === 0) return 'transparent';
        if (this.a < 1) return false;
        var hex = '#' + _conversion.rgbToHex(this.r, this.g, this.b, false);
        for(var _i = 0, _a = Object.entries(_cssColorNames.names); _i < _a.length; _i++){
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (hex === value) return key;
        }
        return false;
    };
    TinyColor1.prototype.toString = function(format) {
        var formatSet = Boolean(format);
        format = format !== null && format !== void 0 ? format : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');
        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === 'name' && this.a === 0) return this.toName();
            return this.toRgbString();
        }
        if (format === 'rgb') formattedString = this.toRgbString();
        if (format === 'prgb') formattedString = this.toPercentageRgbString();
        if (format === 'hex' || format === 'hex6') formattedString = this.toHexString();
        if (format === 'hex3') formattedString = this.toHexString(true);
        if (format === 'hex4') formattedString = this.toHex8String(true);
        if (format === 'hex8') formattedString = this.toHex8String();
        if (format === 'name') formattedString = this.toName();
        if (format === 'hsl') formattedString = this.toHslString();
        if (format === 'hsv') formattedString = this.toHsvString();
        return formattedString || this.toHexString();
    };
    TinyColor1.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor1.prototype.clone = function() {
        return new TinyColor1(this.toString());
    };
    /**
     * Lighten the color a given amount. Providing 100 will always return white.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.lighten = function(amount) {
        if (amount === void 0) amount = 10;
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = _util.clamp01(hsl.l);
        return new TinyColor1(hsl);
    };
    /**
     * Brighten the color a given amount, from 0 to 100.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.brighten = function(amount) {
        if (amount === void 0) amount = 10;
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor1(rgb);
    };
    /**
     * Darken the color a given amount, from 0 to 100.
     * Providing 100 will always return black.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.darken = function(amount) {
        if (amount === void 0) amount = 10;
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = _util.clamp01(hsl.l);
        return new TinyColor1(hsl);
    };
    /**
     * Mix the color with pure white, from 0 to 100.
     * Providing 0 will do nothing, providing 100 will always return white.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.tint = function(amount) {
        if (amount === void 0) amount = 10;
        return this.mix('white', amount);
    };
    /**
     * Mix the color with pure black, from 0 to 100.
     * Providing 0 will do nothing, providing 100 will always return black.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.shade = function(amount) {
        if (amount === void 0) amount = 10;
        return this.mix('black', amount);
    };
    /**
     * Desaturate the color a given amount, from 0 to 100.
     * Providing 100 will is the same as calling greyscale
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.desaturate = function(amount) {
        if (amount === void 0) amount = 10;
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = _util.clamp01(hsl.s);
        return new TinyColor1(hsl);
    };
    /**
     * Saturate the color a given amount, from 0 to 100.
     * @param amount - valid between 1-100
     */ TinyColor1.prototype.saturate = function(amount) {
        if (amount === void 0) amount = 10;
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = _util.clamp01(hsl.s);
        return new TinyColor1(hsl);
    };
    /**
     * Completely desaturates a color into greyscale.
     * Same as calling `desaturate(100)`
     */ TinyColor1.prototype.greyscale = function() {
        return this.desaturate(100);
    };
    /**
     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
     * Values outside of this range will be wrapped into this range.
     */ TinyColor1.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor1(hsl);
    };
    /**
     * Mix the current color a given amount with another color, from 0 to 100.
     * 0 means no mixing (return current color).
     */ TinyColor1.prototype.mix = function(color, amount) {
        if (amount === void 0) amount = 50;
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor1(color).toRgb();
        var p = amount / 100;
        var rgba = {
            r: (rgb2.r - rgb1.r) * p + rgb1.r,
            g: (rgb2.g - rgb1.g) * p + rgb1.g,
            b: (rgb2.b - rgb1.b) * p + rgb1.b,
            a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return new TinyColor1(rgba);
    };
    TinyColor1.prototype.analogous = function(results, slices) {
        if (results === void 0) results = 6;
        if (slices === void 0) slices = 30;
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [
            this
        ];
        for(hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;){
            hsl.h = (hsl.h + part) % 360;
            ret.push(new TinyColor1(hsl));
        }
        return ret;
    };
    /**
     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
     */ TinyColor1.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor1(hsl);
    };
    TinyColor1.prototype.monochromatic = function(results) {
        if (results === void 0) results = 6;
        var hsv = this.toHsv();
        var h = hsv.h;
        var s = hsv.s;
        var v = hsv.v;
        var res = [];
        var modification = 1 / results;
        while(results--){
            res.push(new TinyColor1({
                h: h,
                s: s,
                v: v
            }));
            v = (v + modification) % 1;
        }
        return res;
    };
    TinyColor1.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h = hsl.h;
        return [
            this,
            new TinyColor1({
                h: (h + 72) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            new TinyColor1({
                h: (h + 216) % 360,
                s: hsl.s,
                l: hsl.l
            }), 
        ];
    };
    /**
     * Compute how the color would appear on a background
     */ TinyColor1.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor1(background).toRgb();
        return new TinyColor1({
            r: bg.r + (fg.r - bg.r) * fg.a,
            g: bg.g + (fg.g - bg.g) * fg.a,
            b: bg.b + (fg.b - bg.b) * fg.a
        });
    };
    /**
     * Alias for `polyad(3)`
     */ TinyColor1.prototype.triad = function() {
        return this.polyad(3);
    };
    /**
     * Alias for `polyad(4)`
     */ TinyColor1.prototype.tetrad = function() {
        return this.polyad(4);
    };
    /**
     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
     */ TinyColor1.prototype.polyad = function(n) {
        var hsl = this.toHsl();
        var h = hsl.h;
        var result = [
            this
        ];
        var increment = 360 / n;
        for(var i = 1; i < n; i++)result.push(new TinyColor1({
            h: (h + i * increment) % 360,
            s: hsl.s,
            l: hsl.l
        }));
        return result;
    };
    /**
     * compare color vs current color
     */ TinyColor1.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor1(color).toRgbString();
    };
    return TinyColor1;
}();
function tinycolor(color, opts) {
    if (color === void 0) color = '';
    if (opts === void 0) opts = {};
    return new TinyColor(color, opts);
}

},{"./conversion":"5mqO7","./css-color-names":"1VUIa","./format-input":"afheC","./util":"3D54C","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5mqO7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
/**
 * Handle bounds / percentage checking to conform to CSS color spec
 * <http://www.w3.org/TR/css3-color/>
 * *Assumes:* r, g, b in [0, 255] or [0, 1]
 * *Returns:* { r, g, b } in [0, 255]
 */ parcelHelpers.export(exports, "rgbToRgb", ()=>rgbToRgb
);
/**
 * Converts an RGB color value to HSL.
 * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
 * *Returns:* { h, s, l } in [0,1]
 */ parcelHelpers.export(exports, "rgbToHsl", ()=>rgbToHsl
);
/**
 * Converts an HSL color value to RGB.
 *
 * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
 * *Returns:* { r, g, b } in the set [0, 255]
 */ parcelHelpers.export(exports, "hslToRgb", ()=>hslToRgb
);
/**
 * Converts an RGB color value to HSV
 *
 * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
 * *Returns:* { h, s, v } in [0,1]
 */ parcelHelpers.export(exports, "rgbToHsv", ()=>rgbToHsv
);
/**
 * Converts an HSV color value to RGB.
 *
 * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
 * *Returns:* { r, g, b } in the set [0, 255]
 */ parcelHelpers.export(exports, "hsvToRgb", ()=>hsvToRgb
);
/**
 * Converts an RGB color to hex
 *
 * Assumes r, g, and b are contained in the set [0, 255]
 * Returns a 3 or 6 character hex
 */ parcelHelpers.export(exports, "rgbToHex", ()=>rgbToHex
);
/**
 * Converts an RGBA color plus alpha transparency to hex
 *
 * Assumes r, g, b are contained in the set [0, 255] and
 * a in [0, 1]. Returns a 4 or 8 character rgba hex
 */ // eslint-disable-next-line max-params
parcelHelpers.export(exports, "rgbaToHex", ()=>rgbaToHex
);
/**
 * Converts an RGBA color to an ARGB Hex8 string
 * Rarely used, but required for "toFilter()"
 */ parcelHelpers.export(exports, "rgbaToArgbHex", ()=>rgbaToArgbHex
);
/** Converts a decimal to a hex value */ parcelHelpers.export(exports, "convertDecimalToHex", ()=>convertDecimalToHex
);
/** Converts a hex value to a decimal */ parcelHelpers.export(exports, "convertHexToDecimal", ()=>convertHexToDecimal
);
/** Parse a base-16 hex value into a base-10 integer */ parcelHelpers.export(exports, "parseIntFromHex", ()=>parseIntFromHex
);
parcelHelpers.export(exports, "numberInputToObject", ()=>numberInputToObject
);
var _util = require("./util");
function rgbToRgb(r, g, b) {
    return {
        r: _util.bound01(r, 255) * 255,
        g: _util.bound01(g, 255) * 255,
        b: _util.bound01(b, 255) * 255
    };
}
function rgbToHsl(r, g, b) {
    r = _util.bound01(r, 255);
    g = _util.bound01(g, 255);
    b = _util.bound01(b, 255);
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
        s = 0;
        h = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            default:
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * (6 * t);
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
}
function hslToRgb(h, s, l) {
    var r;
    var g;
    var b;
    h = _util.bound01(h, 360);
    s = _util.bound01(s, 100);
    l = _util.bound01(l, 100);
    if (s === 0) {
        // achromatic
        g = l;
        b = l;
        r = l;
    } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
function rgbToHsv(r, g, b) {
    r = _util.bound01(r, 255);
    g = _util.bound01(g, 255);
    b = _util.bound01(b, 255);
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;
    if (max === min) h = 0; // achromatic
    else {
        switch(max){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            default:
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        v: v
    };
}
function hsvToRgb(h, s, v) {
    h = _util.bound01(h, 360) * 6;
    s = _util.bound01(s, 100);
    v = _util.bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r = [
        v,
        q,
        p,
        p,
        t,
        v
    ][mod];
    var g = [
        t,
        v,
        v,
        q,
        p,
        p
    ][mod];
    var b = [
        p,
        p,
        t,
        v,
        v,
        q
    ][mod];
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
function rgbToHex(r, g, b, allow3Char) {
    var hex = [
        _util.pad2(Math.round(r).toString(16)),
        _util.pad2(Math.round(g).toString(16)),
        _util.pad2(Math.round(b).toString(16)), 
    ];
    // Return a 3 character hex if possible
    if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    return hex.join('');
}
function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [
        _util.pad2(Math.round(r).toString(16)),
        _util.pad2(Math.round(g).toString(16)),
        _util.pad2(Math.round(b).toString(16)),
        _util.pad2(convertDecimalToHex(a)), 
    ];
    // Return a 4 character hex if possible
    if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    return hex.join('');
}
function rgbaToArgbHex(r, g, b, a) {
    var hex = [
        _util.pad2(convertDecimalToHex(a)),
        _util.pad2(Math.round(r).toString(16)),
        _util.pad2(Math.round(g).toString(16)),
        _util.pad2(Math.round(b).toString(16)), 
    ];
    return hex.join('');
}
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
    return parseInt(val, 16);
}
function numberInputToObject(color) {
    return {
        r: color >> 16,
        g: (color & 65280) >> 8,
        b: color & 255
    };
}

},{"./util":"3D54C","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3D54C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Take input from [0, n] and return it as [0, 1]
 * @hidden
 */ parcelHelpers.export(exports, "bound01", ()=>bound01
);
/**
 * Force a number between 0 and 1
 * @hidden
 */ parcelHelpers.export(exports, "clamp01", ()=>clamp01
);
/**
 * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
 * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
 * @hidden
 */ parcelHelpers.export(exports, "isOnePointZero", ()=>isOnePointZero
);
/**
 * Check to see if string passed in is a percentage
 * @hidden
 */ parcelHelpers.export(exports, "isPercentage", ()=>isPercentage
);
/**
 * Return a valid alpha value [0,1] with all invalid values being set to 1
 * @hidden
 */ parcelHelpers.export(exports, "boundAlpha", ()=>boundAlpha
);
/**
 * Replace a decimal with it's percentage value
 * @hidden
 */ parcelHelpers.export(exports, "convertToPercentage", ()=>convertToPercentage
);
/**
 * Force a hex value to have 2 characters
 * @hidden
 */ parcelHelpers.export(exports, "pad2", ()=>pad2
);
function bound01(n, max) {
    if (isOnePointZero(n)) n = '100%';
    var isPercent = isPercentage(n);
    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    // Automatically convert percentage into number
    if (isPercent) n = parseInt(String(n * max), 10) / 100;
    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) return 1;
    // Convert into [0, 1] range if it isn't already
    if (max === 360) // If n is a hue given in degrees,
    // wrap around out-of-range values into [0, 360] range
    // then convert into [0, 1].
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
    else // If n not a hue given in degrees
    // Convert into [0, 1] range if it isn't already.
    n = n % max / parseFloat(String(max));
    return n;
}
function clamp01(val) {
    return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
}
function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) a = 1;
    return a;
}
function convertToPercentage(n) {
    if (n <= 1) return Number(n) * 100 + "%";
    return n;
}
function pad2(c) {
    return c.length === 1 ? '0' + c : String(c);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1VUIa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "names", ()=>names
);
var names = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    goldenrod: '#daa520',
    gold: '#ffd700',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavenderblush: '#fff0f5',
    lavender: '#e6e6fa',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"afheC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given a string or object, convert that input to RGB
 *
 * Possible string inputs:
 * ```
 * "red"
 * "#f00" or "f00"
 * "#ff0000" or "ff0000"
 * "#ff000000" or "ff000000"
 * "rgb 255 0 0" or "rgb (255, 0, 0)"
 * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
 * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
 * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
 * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
 * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
 * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
 * ```
 */ parcelHelpers.export(exports, "inputToRGB", ()=>inputToRGB
);
/**
 * Permissive string parsing.  Take in a number of formats, and output an object
 * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
 */ parcelHelpers.export(exports, "stringInputToObject", ()=>stringInputToObject
);
/**
 * Check to see if it looks like a CSS unit
 * (see `matchers` above for definition).
 */ parcelHelpers.export(exports, "isValidCSSUnit", ()=>isValidCSSUnit
);
var _conversion = require("./conversion");
var _cssColorNames = require("./css-color-names");
var _util = require("./util");
function inputToRGB(color) {
    var rgb = {
        r: 0,
        g: 0,
        b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color === 'string') color = stringInputToObject(color);
    if (typeof color === 'object') {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = _conversion.rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = _util.convertToPercentage(color.s);
            v = _util.convertToPercentage(color.v);
            rgb = _conversion.hsvToRgb(color.h, s, v);
            ok = true;
            format = 'hsv';
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = _util.convertToPercentage(color.s);
            l = _util.convertToPercentage(color.l);
            rgb = _conversion.hslToRgb(color.h, s, l);
            ok = true;
            format = 'hsl';
        }
        if (Object.prototype.hasOwnProperty.call(color, 'a')) a = color.a;
    }
    a = _util.boundAlpha(a);
    return {
        ok: ok,
        format: color.format || format,
        r: Math.min(255, Math.max(rgb.r, 0)),
        g: Math.min(255, Math.max(rgb.g, 0)),
        b: Math.min(255, Math.max(rgb.b, 0)),
        a: a
    };
}
// <http://www.w3.org/TR/css3-values/#integers>
var CSS_INTEGER = '[-\\+]?\\d+%?';
// <http://www.w3.org/TR/css3-values/#number-value>
var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
// Actual matching.
// Parentheses and commas are optional, but not required.
// Whitespace can take the place of commas or opening paren
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) return false;
    var named = false;
    if (_cssColorNames.names[color]) {
        color = _cssColorNames.names[color];
        named = true;
    } else if (color === 'transparent') return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: 'name'
    };
    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match = matchers.rgb.exec(color);
    if (match) return {
        r: match[1],
        g: match[2],
        b: match[3]
    };
    match = matchers.rgba.exec(color);
    if (match) return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
    };
    match = matchers.hsl.exec(color);
    if (match) return {
        h: match[1],
        s: match[2],
        l: match[3]
    };
    match = matchers.hsla.exec(color);
    if (match) return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
    };
    match = matchers.hsv.exec(color);
    if (match) return {
        h: match[1],
        s: match[2],
        v: match[3]
    };
    match = matchers.hsva.exec(color);
    if (match) return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
    };
    match = matchers.hex8.exec(color);
    if (match) return {
        r: _conversion.parseIntFromHex(match[1]),
        g: _conversion.parseIntFromHex(match[2]),
        b: _conversion.parseIntFromHex(match[3]),
        a: _conversion.convertHexToDecimal(match[4]),
        format: named ? 'name' : 'hex8'
    };
    match = matchers.hex6.exec(color);
    if (match) return {
        r: _conversion.parseIntFromHex(match[1]),
        g: _conversion.parseIntFromHex(match[2]),
        b: _conversion.parseIntFromHex(match[3]),
        format: named ? 'name' : 'hex'
    };
    match = matchers.hex4.exec(color);
    if (match) return {
        r: _conversion.parseIntFromHex(match[1] + match[1]),
        g: _conversion.parseIntFromHex(match[2] + match[2]),
        b: _conversion.parseIntFromHex(match[3] + match[3]),
        a: _conversion.convertHexToDecimal(match[4] + match[4]),
        format: named ? 'name' : 'hex8'
    };
    match = matchers.hex3.exec(color);
    if (match) return {
        r: _conversion.parseIntFromHex(match[1] + match[1]),
        g: _conversion.parseIntFromHex(match[2] + match[2]),
        b: _conversion.parseIntFromHex(match[3] + match[3]),
        format: named ? 'name' : 'hex'
    };
    return false;
}
function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
}

},{"./conversion":"5mqO7","./css-color-names":"1VUIa","./util":"3D54C","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lfEZu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
/**
 * AKA `contrast`
 *
 * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
 */ parcelHelpers.export(exports, "readability", ()=>readability
);
/**
 * Ensure that foreground and background color combinations meet WCAG2 guidelines.
 * The third argument is an object.
 *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
 *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
 * If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
 *
 * Example
 * ```ts
 * new TinyColor().isReadable('#000', '#111') => false
 * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false
 * ```
 */ parcelHelpers.export(exports, "isReadable", ()=>isReadable
);
/**
 * Given a base color and a list of possible foreground or background
 * colors for that base, returns the most readable color.
 * Optionally returns Black or White if the most readable color is unreadable.
 *
 * @param baseColor - the base color.
 * @param colorList - array of colors to pick the most readable one from.
 * @param args - and object with extra arguments
 *
 * Example
 * ```ts
 * new TinyColor().mostReadable('#123', ['#124", "#125'], { includeFallbackColors: false }).toHexString(); // "#112255"
 * new TinyColor().mostReadable('#123', ['#124", "#125'],{ includeFallbackColors: true }).toHexString();  // "#ffffff"
 * new TinyColor().mostReadable('#a8015a', ["#faf3f3"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // "#faf3f3"
 * new TinyColor().mostReadable('#a8015a', ["#faf3f3"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // "#ffffff"
 * ```
 */ parcelHelpers.export(exports, "mostReadable", ()=>mostReadable
);
var _index = require("./index");
function readability(color1, color2) {
    var c1 = new _index.TinyColor(color1);
    var c2 = new _index.TinyColor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
}
function isReadable(color1, color2, wcag2) {
    var _a, _b;
    if (wcag2 === void 0) wcag2 = {
        level: 'AA',
        size: 'small'
    };
    var readabilityLevel = readability(color1, color2);
    switch(((_a = wcag2.level) !== null && _a !== void 0 ? _a : 'AA') + ((_b = wcag2.size) !== null && _b !== void 0 ? _b : 'small')){
        case 'AAsmall':
        case 'AAAlarge':
            return readabilityLevel >= 4.5;
        case 'AAlarge':
            return readabilityLevel >= 3;
        case 'AAAsmall':
            return readabilityLevel >= 7;
        default:
            return false;
    }
}
function mostReadable(baseColor, colorList, args) {
    if (args === void 0) args = {
        includeFallbackColors: false,
        level: 'AA',
        size: 'small'
    };
    var bestColor = null;
    var bestScore = 0;
    var includeFallbackColors = args.includeFallbackColors, level = args.level, size = args.size;
    for(var _i = 0, colorList_1 = colorList; _i < colorList_1.length; _i++){
        var color = colorList_1[_i];
        var score = readability(baseColor, color);
        if (score > bestScore) {
            bestScore = score;
            bestColor = new _index.TinyColor(color);
        }
    }
    if (isReadable(baseColor, bestColor, {
        level: level,
        size: size
    }) || !includeFallbackColors) return bestColor;
    args.includeFallbackColors = false;
    return mostReadable(baseColor, [
        '#fff',
        '#000'
    ], args);
}

},{"./index":"dhZrZ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"drH0R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns the color represented as a Microsoft filter for use in old versions of IE.
 */ parcelHelpers.export(exports, "toMsFilter", ()=>toMsFilter
);
var _conversion = require("./conversion");
var _index = require("./index");
function toMsFilter(firstColor, secondColor) {
    var color = new _index.TinyColor(firstColor);
    var hex8String = '#' + _conversion.rgbaToArgbHex(color.r, color.g, color.b, color.a);
    var secondHex8String = hex8String;
    var gradientType = color.gradientType ? 'GradientType = 1, ' : '';
    if (secondColor) {
        var s = new _index.TinyColor(secondColor);
        secondHex8String = '#' + _conversion.rgbaToArgbHex(s.r, s.g, s.b, s.a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
}

},{"./conversion":"5mqO7","./index":"dhZrZ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9Bian":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * If input is an object, force 1 into "1.0" to handle ratios properly
 * String input requires "1.0" as input, so 1 will be treated as 1
 */ parcelHelpers.export(exports, "fromRatio", ()=>fromRatio
);
/** old random function */ parcelHelpers.export(exports, "legacyRandom", ()=>legacyRandom
);
var _index = require("./index");
var _util = require("./util");
function fromRatio(ratio, opts) {
    var newColor = {
        r: _util.convertToPercentage(ratio.r),
        g: _util.convertToPercentage(ratio.g),
        b: _util.convertToPercentage(ratio.b)
    };
    if (ratio.a !== undefined) newColor.a = Number(ratio.a);
    return new _index.TinyColor(newColor, opts);
}
function legacyRandom() {
    return new _index.TinyColor({
        r: Math.random(),
        g: Math.random(),
        b: Math.random()
    });
}

},{"./index":"dhZrZ","./util":"3D54C","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"duaYc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "random", ()=>random
);
parcelHelpers.export(exports, "bounds", ()=>bounds
);
// randomColor by David Merfield under the CC0 license
// https://github.com/davidmerfield/randomColor/
var _index = require("./index");
function random(options) {
    if (options === void 0) options = {};
    // Check if we need to generate multiple colors
    if (options.count !== undefined && options.count !== null) {
        var totalColors = options.count;
        var colors = [];
        options.count = undefined;
        while(totalColors > colors.length){
            // Since we're generating multiple colors,
            // incremement the seed. Otherwise we'd just
            // generate the same color each time...
            options.count = null;
            if (options.seed) options.seed += 1;
            colors.push(random(options));
        }
        options.count = totalColors;
        return colors;
    }
    // First we pick a hue (H)
    var h = pickHue(options.hue, options.seed);
    // Then use H to determine saturation (S)
    var s = pickSaturation(h, options);
    // Then use S and H to determine brightness (B).
    var v = pickBrightness(h, s, options);
    var res = {
        h: h,
        s: s,
        v: v
    };
    if (options.alpha !== undefined) res.a = options.alpha;
    // Then we return the HSB color in the desired format
    return new _index.TinyColor(res);
}
function pickHue(hue, seed) {
    var hueRange = getHueRange(hue);
    var res = randomWithin(hueRange, seed);
    // Instead of storing red as two seperate ranges,
    // we group them, using negative numbers
    if (res < 0) res = 360 + res;
    return res;
}
function pickSaturation(hue, options) {
    if (options.hue === 'monochrome') return 0;
    if (options.luminosity === 'random') return randomWithin([
        0,
        100
    ], options.seed);
    var saturationRange = getColorInfo(hue).saturationRange;
    var sMin = saturationRange[0];
    var sMax = saturationRange[1];
    switch(options.luminosity){
        case 'bright':
            sMin = 55;
            break;
        case 'dark':
            sMin = sMax - 10;
            break;
        case 'light':
            sMax = 55;
            break;
        default:
            break;
    }
    return randomWithin([
        sMin,
        sMax
    ], options.seed);
}
function pickBrightness(H, S, options) {
    var bMin = getMinimumBrightness(H, S);
    var bMax = 100;
    switch(options.luminosity){
        case 'dark':
            bMax = bMin + 20;
            break;
        case 'light':
            bMin = (bMax + bMin) / 2;
            break;
        case 'random':
            bMin = 0;
            bMax = 100;
            break;
        default:
            break;
    }
    return randomWithin([
        bMin,
        bMax
    ], options.seed);
}
function getMinimumBrightness(H, S) {
    var lowerBounds = getColorInfo(H).lowerBounds;
    for(var i = 0; i < lowerBounds.length - 1; i++){
        var s1 = lowerBounds[i][0];
        var v1 = lowerBounds[i][1];
        var s2 = lowerBounds[i + 1][0];
        var v2 = lowerBounds[i + 1][1];
        if (S >= s1 && S <= s2) {
            var m = (v2 - v1) / (s2 - s1);
            var b = v1 - m * s1;
            return m * S + b;
        }
    }
    return 0;
}
function getHueRange(colorInput) {
    var num = parseInt(colorInput, 10);
    if (!Number.isNaN(num) && num < 360 && num > 0) return [
        num,
        num
    ];
    if (typeof colorInput === 'string') {
        var namedColor = bounds.find(function(n) {
            return n.name === colorInput;
        });
        if (namedColor) {
            var color = defineColor(namedColor);
            if (color.hueRange) return color.hueRange;
        }
        var parsed = new _index.TinyColor(colorInput);
        if (parsed.isValid) {
            var hue = parsed.toHsv().h;
            return [
                hue,
                hue
            ];
        }
    }
    return [
        0,
        360
    ];
}
function getColorInfo(hue) {
    // Maps red colors to make picking hue easier
    if (hue >= 334 && hue <= 360) hue -= 360;
    for(var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++){
        var bound = bounds_1[_i];
        var color = defineColor(bound);
        if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) return color;
    }
    throw Error('Color not found');
}
function randomWithin(range, seed) {
    if (seed === undefined) return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));
    // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/
    var max = range[1] || 1;
    var min = range[0] || 0;
    seed = (seed * 9301 + 49297) % 233280;
    var rnd = seed / 233280;
    return Math.floor(min + rnd * (max - min));
}
function defineColor(bound) {
    var sMin = bound.lowerBounds[0][0];
    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];
    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];
    var bMax = bound.lowerBounds[0][1];
    return {
        name: bound.name,
        hueRange: bound.hueRange,
        lowerBounds: bound.lowerBounds,
        saturationRange: [
            sMin,
            sMax
        ],
        brightnessRange: [
            bMin,
            bMax
        ]
    };
}
var bounds = [
    {
        name: 'monochrome',
        hueRange: null,
        lowerBounds: [
            [
                0,
                0
            ],
            [
                100,
                0
            ], 
        ]
    },
    {
        name: 'red',
        hueRange: [
            -26,
            18
        ],
        lowerBounds: [
            [
                20,
                100
            ],
            [
                30,
                92
            ],
            [
                40,
                89
            ],
            [
                50,
                85
            ],
            [
                60,
                78
            ],
            [
                70,
                70
            ],
            [
                80,
                60
            ],
            [
                90,
                55
            ],
            [
                100,
                50
            ], 
        ]
    },
    {
        name: 'orange',
        hueRange: [
            19,
            46
        ],
        lowerBounds: [
            [
                20,
                100
            ],
            [
                30,
                93
            ],
            [
                40,
                88
            ],
            [
                50,
                86
            ],
            [
                60,
                85
            ],
            [
                70,
                70
            ],
            [
                100,
                70
            ], 
        ]
    },
    {
        name: 'yellow',
        hueRange: [
            47,
            62
        ],
        lowerBounds: [
            [
                25,
                100
            ],
            [
                40,
                94
            ],
            [
                50,
                89
            ],
            [
                60,
                86
            ],
            [
                70,
                84
            ],
            [
                80,
                82
            ],
            [
                90,
                80
            ],
            [
                100,
                75
            ], 
        ]
    },
    {
        name: 'green',
        hueRange: [
            63,
            178
        ],
        lowerBounds: [
            [
                30,
                100
            ],
            [
                40,
                90
            ],
            [
                50,
                85
            ],
            [
                60,
                81
            ],
            [
                70,
                74
            ],
            [
                80,
                64
            ],
            [
                90,
                50
            ],
            [
                100,
                40
            ], 
        ]
    },
    {
        name: 'blue',
        hueRange: [
            179,
            257
        ],
        lowerBounds: [
            [
                20,
                100
            ],
            [
                30,
                86
            ],
            [
                40,
                80
            ],
            [
                50,
                74
            ],
            [
                60,
                60
            ],
            [
                70,
                52
            ],
            [
                80,
                44
            ],
            [
                90,
                39
            ],
            [
                100,
                35
            ], 
        ]
    },
    {
        name: 'purple',
        hueRange: [
            258,
            282
        ],
        lowerBounds: [
            [
                20,
                100
            ],
            [
                30,
                87
            ],
            [
                40,
                79
            ],
            [
                50,
                70
            ],
            [
                60,
                65
            ],
            [
                70,
                59
            ],
            [
                80,
                52
            ],
            [
                90,
                45
            ],
            [
                100,
                42
            ], 
        ]
    },
    {
        name: 'pink',
        hueRange: [
            283,
            334
        ],
        lowerBounds: [
            [
                20,
                100
            ],
            [
                30,
                90
            ],
            [
                40,
                86
            ],
            [
                60,
                84
            ],
            [
                80,
                80
            ],
            [
                90,
                75
            ],
            [
                100,
                73
            ], 
        ]
    }, 
];

},{"./index":"dhZrZ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5WmFf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"W9UzB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "injectCSS", ()=>injectCSS
);
parcelHelpers.export(exports, "removeCSS", ()=>removeCSS
);
parcelHelpers.export(exports, "updateCSS", ()=>updateCSS
);
var _canUseDom = require("./canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var MARK_KEY = "rc-util-key";
function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, mark = _ref.mark;
    if (mark) return mark.startsWith('data-') ? mark : "data-".concat(mark);
    return MARK_KEY;
}
function getContainer(option) {
    if (option.attachTo) return option.attachTo;
    var head = document.querySelector('head');
    return head || document.body;
}
function injectCSS(css) {
    var _option$csp;
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!_canUseDomDefault.default()) return null;
    var styleNode = document.createElement('style');
    if ((_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce) {
        var _option$csp2;
        styleNode.nonce = (_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce;
    }
    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (option.prepend && container.prepend) // Use `prepend` first
    container.prepend(styleNode);
    else if (option.prepend && firstChild) // Fallback to `insertBefore` like IE not support `prepend`
    container.insertBefore(styleNode, firstChild);
    else container.appendChild(styleNode);
    return styleNode;
}
var containerCache = new Map();
function findExistNode(key) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var container = getContainer(option);
    return Array.from(containerCache.get(container).children).find(function(node) {
        return node.tagName === 'STYLE' && node.getAttribute(getMark(option)) === key;
    });
}
function removeCSS(key) {
    var _existNode$parentNode;
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var existNode = findExistNode(key, option);
    existNode === null || existNode === void 0 || (_existNode$parentNode = existNode.parentNode) === null || _existNode$parentNode === void 0 || _existNode$parentNode.removeChild(existNode);
}
function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var container = getContainer(option); // Get real parent
    if (!containerCache.has(container)) {
        var placeholderStyle = injectCSS('', option);
        var parentNode = placeholderStyle.parentNode;
        containerCache.set(container, parentNode);
        parentNode.removeChild(placeholderStyle);
    }
    var existNode = findExistNode(key, option);
    if (existNode) {
        var _option$csp3, _option$csp4;
        if (((_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce) && existNode.nonce !== ((_option$csp4 = option.csp) === null || _option$csp4 === void 0 ? void 0 : _option$csp4.nonce)) {
            var _option$csp5;
            existNode.nonce = (_option$csp5 = option.csp) === null || _option$csp5 === void 0 ? void 0 : _option$csp5.nonce;
        }
        if (existNode.innerHTML !== css) existNode.innerHTML = css;
        return existNode;
    }
    var newNode = injectCSS(css, option);
    newNode.setAttribute(getMark(option), key);
    return newNode;
}

},{"./canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hvpkh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setTwoToneColor", ()=>setTwoToneColor
);
parcelHelpers.export(exports, "getTwoToneColor", ()=>getTwoToneColor
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _iconBase = require("./IconBase");
var _iconBaseDefault = parcelHelpers.interopDefault(_iconBase);
var _utils = require("../utils");
function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = _utils.normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArrayDefault.default(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return _iconBaseDefault.default.setTwoToneColors({
        primaryColor: primaryColor,
        secondaryColor: secondaryColor
    });
}
function getTwoToneColor() {
    var colors = _iconBaseDefault.default.getTwoToneColors();
    if (!colors.calculated) return colors.primaryColor;
    return [
        colors.primaryColor,
        colors.secondaryColor
    ];
}

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","./IconBase":"3bVnm","../utils":"9H67m","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bdz6H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _exclamationCircleFilled = require("@ant-design/icons-svg/es/asn/ExclamationCircleFilled");
var _exclamationCircleFilledDefault = parcelHelpers.interopDefault(_exclamationCircleFilled);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var ExclamationCircleFilled = function ExclamationCircleFilled(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _exclamationCircleFilledDefault.default
    }));
};
ExclamationCircleFilled.displayName = 'ExclamationCircleFilled';
exports.default = /*#__PURE__*/ _react.forwardRef(ExclamationCircleFilled);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/ExclamationCircleFilled":"iaA6a","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iaA6a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var ExclamationCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                }
            }
        ]
    },
    "name": "exclamation-circle",
    "theme": "filled"
};
exports.default = ExclamationCircleFilled;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ewXaJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _closeCircleFilled = require("@ant-design/icons-svg/es/asn/CloseCircleFilled");
var _closeCircleFilledDefault = parcelHelpers.interopDefault(_closeCircleFilled);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var CloseCircleFilled = function CloseCircleFilled(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _closeCircleFilledDefault.default
    }));
};
CloseCircleFilled.displayName = 'CloseCircleFilled';
exports.default = /*#__PURE__*/ _react.forwardRef(CloseCircleFilled);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/CloseCircleFilled":"7Erai","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7Erai":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var CloseCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                }
            }
        ]
    },
    "name": "close-circle",
    "theme": "filled"
};
exports.default = CloseCircleFilled;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fJoE9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _checkCircleFilled = require("@ant-design/icons-svg/es/asn/CheckCircleFilled");
var _checkCircleFilledDefault = parcelHelpers.interopDefault(_checkCircleFilled);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var CheckCircleFilled = function CheckCircleFilled(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _checkCircleFilledDefault.default
    }));
};
CheckCircleFilled.displayName = 'CheckCircleFilled';
exports.default = /*#__PURE__*/ _react.forwardRef(CheckCircleFilled);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/CheckCircleFilled":"dnklr","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dnklr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var CheckCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"
                }
            }
        ]
    },
    "name": "check-circle",
    "theme": "filled"
};
exports.default = CheckCircleFilled;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lLqec":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _infoCircleFilled = require("@ant-design/icons-svg/es/asn/InfoCircleFilled");
var _infoCircleFilledDefault = parcelHelpers.interopDefault(_infoCircleFilled);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var InfoCircleFilled = function InfoCircleFilled(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _infoCircleFilledDefault.default
    }));
};
InfoCircleFilled.displayName = 'InfoCircleFilled';
exports.default = /*#__PURE__*/ _react.forwardRef(InfoCircleFilled);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/InfoCircleFilled":"ixECy","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ixECy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var InfoCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                }
            }
        ]
    },
    "name": "info-circle",
    "theme": "filled"
};
exports.default = InfoCircleFilled;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bgl55":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useNotification = require("rc-notification/es/useNotification");
var _useNotificationDefault = parcelHelpers.interopDefault(_useNotification);
var _configProvider = require("../../config-provider");
var _ = require("..");
function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {
    var useMessage = function useMessage() {
        // We can only get content by render
        var getPrefixCls;
        var getPopupContainer; // We create a proxy to handle delay created instance
        var innerInstance = null;
        var proxy = {
            add: function add(noticeProps, holderCallback) {
                innerInstance === null || innerInstance === void 0 || innerInstance.component.add(noticeProps, holderCallback);
            }
        };
        var _useRCNotification = _useNotificationDefault.default(proxy), _useRCNotification2 = _slicedToArrayDefault.default(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
        function notify(args) {
            var customizePrefixCls = args.prefixCls;
            var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);
            var rootPrefixCls = getPrefixCls();
            var target = args.key || _.getKeyThenIncreaseKey();
            var closePromise = new Promise(function(resolve) {
                var callback = function callback() {
                    if (typeof args.onClose === 'function') args.onClose();
                    return resolve(true);
                };
                getRcNotificationInstance(_extendsDefault.default(_extendsDefault.default({}, args), {
                    prefixCls: mergedPrefixCls,
                    rootPrefixCls: rootPrefixCls,
                    getPopupContainer: getPopupContainer
                }), function(_ref) {
                    var prefixCls = _ref.prefixCls, instance = _ref.instance;
                    innerInstance = instance;
                    hookNotify(getRCNoticeProps(_extendsDefault.default(_extendsDefault.default({}, args), {
                        key: target,
                        onClose: callback
                    }), prefixCls));
                });
            });
            var result = function result() {
                if (innerInstance) innerInstance.removeNotice(target);
            };
            result.then = function(filled, rejected) {
                return closePromise.then(filled, rejected);
            };
            result.promise = closePromise;
            return result;
        } // Fill functions
        var hookApiRef = _react.useRef({});
        hookApiRef.current.open = notify;
        _.typeList.forEach(function(type) {
            return _.attachTypeApi(hookApiRef.current, type);
        });
        return [
            hookApiRef.current,
            /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, {
                key: "holder"
            }, function(context) {
                getPrefixCls = context.getPrefixCls;
                getPopupContainer = context.getPopupContainer;
                return holder;
            })
        ];
    };
    return useMessage;
}
exports.default = createUseMessage;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-notification/es/useNotification":"4Iva2","../../config-provider":"dg9FJ","..":"d9tKv","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bKlv4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInstance", ()=>getInstance
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _regenerator = require("@babel/runtime/regenerator");
var _regeneratorDefault = parcelHelpers.interopDefault(_regenerator);
var _react = require("react");
var _rcNotification = require("rc-notification");
var _rcNotificationDefault = parcelHelpers.interopDefault(_rcNotification);
var _closeOutlined = require("@ant-design/icons/es/icons/CloseOutlined");
var _closeOutlinedDefault = parcelHelpers.interopDefault(_closeOutlined);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _checkCircleOutlined = require("@ant-design/icons/es/icons/CheckCircleOutlined");
var _checkCircleOutlinedDefault = parcelHelpers.interopDefault(_checkCircleOutlined);
var _closeCircleOutlined = require("@ant-design/icons/es/icons/CloseCircleOutlined");
var _closeCircleOutlinedDefault = parcelHelpers.interopDefault(_closeCircleOutlined);
var _exclamationCircleOutlined = require("@ant-design/icons/es/icons/ExclamationCircleOutlined");
var _exclamationCircleOutlinedDefault = parcelHelpers.interopDefault(_exclamationCircleOutlined);
var _infoCircleOutlined = require("@ant-design/icons/es/icons/InfoCircleOutlined");
var _infoCircleOutlinedDefault = parcelHelpers.interopDefault(_infoCircleOutlined);
var _useNotification = require("./hooks/useNotification");
var _useNotificationDefault = parcelHelpers.interopDefault(_useNotification);
var _configProvider = require("../config-provider");
var _configProviderDefault = parcelHelpers.interopDefault(_configProvider);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPrefixCls = '';
var defaultPlacement = 'topRight';
var defaultGetContainer;
var defaultCloseIcon;
var rtl = false;
var maxCount;
function setNotificationConfig(options) {
    var duration = options.duration, placement = options.placement, bottom = options.bottom, top = options.top, getContainer = options.getContainer, closeIcon = options.closeIcon, prefixCls = options.prefixCls;
    if (prefixCls !== undefined) defaultPrefixCls = prefixCls;
    if (duration !== undefined) defaultDuration = duration;
    if (placement !== undefined) defaultPlacement = placement;
    else if (options.rtl) defaultPlacement = 'topLeft';
    if (bottom !== undefined) defaultBottom = bottom;
    if (top !== undefined) defaultTop = top;
    if (getContainer !== undefined) defaultGetContainer = getContainer;
    if (closeIcon !== undefined) defaultCloseIcon = closeIcon;
    if (options.rtl !== undefined) rtl = options.rtl;
    if (options.maxCount !== undefined) maxCount = options.maxCount;
}
function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;
    var style;
    switch(placement){
        case 'top':
            style = {
                left: '50%',
                transform: 'translateX(-50%)',
                right: 'auto',
                top: top,
                bottom: 'auto'
            };
            break;
        case 'topLeft':
            style = {
                left: 0,
                top: top,
                bottom: 'auto'
            };
            break;
        case 'topRight':
            style = {
                right: 0,
                top: top,
                bottom: 'auto'
            };
            break;
        case 'bottom':
            style = {
                left: '50%',
                transform: 'translateX(-50%)',
                right: 'auto',
                top: 'auto',
                bottom: bottom
            };
            break;
        case 'bottomLeft':
            style = {
                left: 0,
                top: 'auto',
                bottom: bottom
            };
            break;
        default:
            style = {
                right: 0,
                top: 'auto',
                bottom: bottom
            };
            break;
    }
    return style;
}
function getNotificationInstance(args, callback) {
    var _args$placement = args.placement, placement = _args$placement === void 0 ? defaultPlacement : _args$placement, top = args.top, bottom = args.bottom, _args$getContainer = args.getContainer, getContainer = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer, customizePrefixCls = args.prefixCls;
    var _globalConfig = _configProvider.globalConfig(), getPrefixCls = _globalConfig.getPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls('notification', customizePrefixCls || defaultPrefixCls);
    var iconPrefixCls = getIconPrefixCls();
    var cacheKey = "".concat(prefixCls, "-").concat(placement);
    var cacheInstance = notificationInstance[cacheKey];
    if (cacheInstance) {
        Promise.resolve(cacheInstance).then(function(instance) {
            callback({
                prefixCls: "".concat(prefixCls, "-notice"),
                iconPrefixCls: iconPrefixCls,
                instance: instance
            });
        });
        return;
    }
    var notificationClass = _classnamesDefault.default("".concat(prefixCls, "-").concat(placement), _definePropertyDefault.default({}, "".concat(prefixCls, "-rtl"), rtl === true));
    notificationInstance[cacheKey] = new Promise(function(resolve) {
        _rcNotificationDefault.default.newInstance({
            prefixCls: prefixCls,
            className: notificationClass,
            style: getPlacementStyle(placement, top, bottom),
            getContainer: getContainer,
            maxCount: maxCount
        }, function(notification) {
            resolve(notification);
            callback({
                prefixCls: "".concat(prefixCls, "-notice"),
                iconPrefixCls: iconPrefixCls,
                instance: notification
            });
        });
    });
}
var typeToIcon = {
    success: _checkCircleOutlinedDefault.default,
    info: _infoCircleOutlinedDefault.default,
    error: _closeCircleOutlinedDefault.default,
    warning: _exclamationCircleOutlinedDefault.default
};
function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var durationArg = args.duration, icon = args.icon, type = args.type, description = args.description, message = args.message, btn = args.btn, onClose = args.onClose, onClick = args.onClick, key = args.key, style = args.style, className = args.className, _args$closeIcon = args.closeIcon, closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;
    var duration = durationArg === undefined ? defaultDuration : durationArg;
    var iconNode = null;
    if (icon) iconNode = /*#__PURE__*/ _react.createElement("span", {
        className: "".concat(prefixCls, "-icon")
    }, args.icon);
    else if (type) iconNode = /*#__PURE__*/ _react.createElement(typeToIcon[type] || null, {
        className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(type)
    });
    var closeIconToRender = /*#__PURE__*/ _react.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /*#__PURE__*/ _react.createElement(_closeOutlinedDefault.default, {
        className: "".concat(prefixCls, "-close-icon")
    }));
    var autoMarginTag = !description && iconNode ? /*#__PURE__*/ _react.createElement("span", {
        className: "".concat(prefixCls, "-message-single-line-auto-margin")
    }) : null;
    return {
        content: /*#__PURE__*/ _react.createElement(_configProviderDefault.default, {
            iconPrefixCls: iconPrefixCls
        }, /*#__PURE__*/ _react.createElement("div", {
            className: iconNode ? "".concat(prefixCls, "-with-icon") : '',
            role: "alert"
        }, iconNode, /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-message")
        }, autoMarginTag, message), /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-description")
        }, description), btn ? /*#__PURE__*/ _react.createElement("span", {
            className: "".concat(prefixCls, "-btn")
        }, btn) : null)),
        duration: duration,
        closable: true,
        closeIcon: closeIconToRender,
        onClose: onClose,
        onClick: onClick,
        key: key,
        style: style || {},
        className: _classnamesDefault.default(className, _definePropertyDefault.default({}, "".concat(prefixCls, "-").concat(type), !!type))
    };
}
function notice(args) {
    getNotificationInstance(args, function(_ref) {
        var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
        instance.notice(getRCNoticeProps(args, prefixCls, iconPrefixCls));
    });
}
var api = {
    open: notice,
    close: function close(key) {
        Object.keys(notificationInstance).forEach(function(cacheKey) {
            return Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
                instance.removeNotice(key);
            });
        });
    },
    config: setNotificationConfig,
    destroy: function destroy() {
        Object.keys(notificationInstance).forEach(function(cacheKey) {
            Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
                instance.destroy();
            });
            delete notificationInstance[cacheKey]; // lgtm[js/missing-await]
        });
    }
};
[
    'success',
    'info',
    'warning',
    'error'
].forEach(function(type) {
    api[type] = function(args) {
        return api.open(_extendsDefault.default(_extendsDefault.default({}, args), {
            type: type
        }));
    };
});
api.warn = api.warning;
api.useNotification = _useNotificationDefault.default(getNotificationInstance, getRCNoticeProps);
var getInstance = function getInstance(cacheKey) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/ _regeneratorDefault.default.mark(function _callee() {
        return _regeneratorDefault.default.wrap(function _callee$(_context) {
            while(true)switch(_context.prev = _context.next){
                case 0:
                    return _context.abrupt("return", null);
                case 1:
                case "end":
                    return _context.stop();
            }
        }, _callee);
    }));
};
exports.default = api;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/regenerator":"hhhh4","react":"b4tPL","rc-notification":"gjTsj","@ant-design/icons/es/icons/CloseOutlined":"9ps37","classnames":"dFgpN","@ant-design/icons/es/icons/CheckCircleOutlined":"a7ZEs","@ant-design/icons/es/icons/CloseCircleOutlined":"iP5ko","@ant-design/icons/es/icons/ExclamationCircleOutlined":"bFqQX","@ant-design/icons/es/icons/InfoCircleOutlined":"gxdFh","./hooks/useNotification":"mi07P","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9ps37":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _closeOutlined = require("@ant-design/icons-svg/es/asn/CloseOutlined");
var _closeOutlinedDefault = parcelHelpers.interopDefault(_closeOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var CloseOutlined = function CloseOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _closeOutlinedDefault.default
    }));
};
CloseOutlined.displayName = 'CloseOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(CloseOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/CloseOutlined":"7wU17","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7wU17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var CloseOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                }
            }
        ]
    },
    "name": "close",
    "theme": "outlined"
};
exports.default = CloseOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"a7ZEs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _checkCircleOutlined = require("@ant-design/icons-svg/es/asn/CheckCircleOutlined");
var _checkCircleOutlinedDefault = parcelHelpers.interopDefault(_checkCircleOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var CheckCircleOutlined = function CheckCircleOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _checkCircleOutlinedDefault.default
    }));
};
CheckCircleOutlined.displayName = 'CheckCircleOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(CheckCircleOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/CheckCircleOutlined":"cvsDp","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cvsDp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var CheckCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            }
        ]
    },
    "name": "check-circle",
    "theme": "outlined"
};
exports.default = CheckCircleOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iP5ko":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _closeCircleOutlined = require("@ant-design/icons-svg/es/asn/CloseCircleOutlined");
var _closeCircleOutlinedDefault = parcelHelpers.interopDefault(_closeCircleOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var CloseCircleOutlined = function CloseCircleOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _closeCircleOutlinedDefault.default
    }));
};
CloseCircleOutlined.displayName = 'CloseCircleOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(CloseCircleOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/CloseCircleOutlined":"5pVK4","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5pVK4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var CloseCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            }
        ]
    },
    "name": "close-circle",
    "theme": "outlined"
};
exports.default = CloseCircleOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bFqQX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _exclamationCircleOutlined = require("@ant-design/icons-svg/es/asn/ExclamationCircleOutlined");
var _exclamationCircleOutlinedDefault = parcelHelpers.interopDefault(_exclamationCircleOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _exclamationCircleOutlinedDefault.default
    }));
};
ExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(ExclamationCircleOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/ExclamationCircleOutlined":"hlJOT","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hlJOT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var ExclamationCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                }
            }
        ]
    },
    "name": "exclamation-circle",
    "theme": "outlined"
};
exports.default = ExclamationCircleOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gxdFh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _infoCircleOutlined = require("@ant-design/icons-svg/es/asn/InfoCircleOutlined");
var _infoCircleOutlinedDefault = parcelHelpers.interopDefault(_infoCircleOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var InfoCircleOutlined = function InfoCircleOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _infoCircleOutlinedDefault.default
    }));
};
InfoCircleOutlined.displayName = 'InfoCircleOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(InfoCircleOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/InfoCircleOutlined":"2eaXs","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2eaXs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var InfoCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"
                }
            }
        ]
    },
    "name": "info-circle",
    "theme": "outlined"
};
exports.default = InfoCircleOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"mi07P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useNotification = require("rc-notification/es/useNotification");
var _useNotificationDefault = parcelHelpers.interopDefault(_useNotification);
var _configProvider = require("../../config-provider");
function createUseNotification(getNotificationInstance, getRCNoticeProps) {
    var useNotification = function useNotification() {
        // We can only get content by render
        var getPrefixCls; // We create a proxy to handle delay created instance
        var innerInstance = null;
        var proxy = {
            add: function add(noticeProps, holderCallback) {
                innerInstance === null || innerInstance === void 0 || innerInstance.component.add(noticeProps, holderCallback);
            }
        };
        var _useRCNotification = _useNotificationDefault.default(proxy), _useRCNotification2 = _slicedToArrayDefault.default(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
        function notify(args) {
            var customizePrefixCls = args.prefixCls;
            var mergedPrefixCls = getPrefixCls('notification', customizePrefixCls);
            getNotificationInstance(_extendsDefault.default(_extendsDefault.default({}, args), {
                prefixCls: mergedPrefixCls
            }), function(_ref) {
                var prefixCls = _ref.prefixCls, instance = _ref.instance;
                innerInstance = instance;
                hookNotify(getRCNoticeProps(args, prefixCls));
            });
        } // Fill functions
        var hookApiRef = _react.useRef({});
        hookApiRef.current.open = notify;
        [
            'success',
            'info',
            'warning',
            'error'
        ].forEach(function(type) {
            hookApiRef.current[type] = function(args) {
                return hookApiRef.current.open(_extendsDefault.default(_extendsDefault.default({}, args), {
                    type: type
                }));
            };
        });
        return [
            hookApiRef.current,
            /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, {
                key: "holder"
            }, function(context) {
                getPrefixCls = context.getPrefixCls;
                return holder;
            })
        ];
    };
    return useNotification;
}
exports.default = createUseNotification;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-notification/es/useNotification":"4Iva2","../../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hVEz0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getStyle", ()=>getStyle
);
parcelHelpers.export(exports, "registerTheme", ()=>registerTheme
);
/* eslint-disable import/prefer-default-export, prefer-destructuring */ var _dynamicCSS = require("rc-util/es/Dom/dynamicCSS");
var _canUseDom = require("rc-util/es/Dom/canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var _tinycolor = require("@ctrl/tinycolor");
var _colors = require("@ant-design/colors");
var _devWarning = require("../_util/devWarning");
var _devWarningDefault = parcelHelpers.interopDefault(_devWarning);
var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
function getStyle(globalPrefixCls, theme) {
    var variables = {};
    var formatColor = function formatColor(color, updater) {
        var clone = color.clone();
        clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;
        return clone.toRgbString();
    };
    var fillColor = function fillColor(colorVal, type) {
        var baseColor = new _tinycolor.TinyColor(colorVal);
        var colorPalettes = _colors.generate(baseColor.toRgbString());
        variables["".concat(type, "-color")] = formatColor(baseColor);
        variables["".concat(type, "-color-disabled")] = colorPalettes[1];
        variables["".concat(type, "-color-hover")] = colorPalettes[4];
        variables["".concat(type, "-color-active")] = colorPalettes[7];
        variables["".concat(type, "-color-outline")] = baseColor.clone().setAlpha(0.2).toRgbString();
        variables["".concat(type, "-color-deprecated-bg")] = colorPalettes[1];
        variables["".concat(type, "-color-deprecated-border")] = colorPalettes[3];
    }; // ================ Primary Color ================
    if (theme.primaryColor) {
        fillColor(theme.primaryColor, 'primary');
        var primaryColor = new _tinycolor.TinyColor(theme.primaryColor);
        var primaryColors = _colors.generate(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard
        primaryColors.forEach(function(color, index) {
            variables["primary-".concat(index + 1)] = color;
        }); // Deprecated
        variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function(c) {
            return c.lighten(35);
        });
        variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function(c) {
            return c.lighten(20);
        });
        variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function(c) {
            return c.tint(20);
        });
        variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function(c) {
            return c.tint(50);
        });
        variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function(c) {
            return c.setAlpha(c.getAlpha() * 0.12);
        });
        var primaryActiveColor = new _tinycolor.TinyColor(primaryColors[0]);
        variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function(c) {
            return c.setAlpha(c.getAlpha() * 0.3);
        });
        variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function(c) {
            return c.darken(2);
        });
    } // ================ Success Color ================
    if (theme.successColor) fillColor(theme.successColor, 'success');
     // ================ Warning Color ================
    if (theme.warningColor) fillColor(theme.warningColor, 'warning');
     // ================= Error Color =================
    if (theme.errorColor) fillColor(theme.errorColor, 'error');
     // ================= Info Color ==================
    if (theme.infoColor) fillColor(theme.infoColor, 'info');
     // Convert to css variables
    var cssList = Object.keys(variables).map(function(key) {
        return "--".concat(globalPrefixCls, "-").concat(key, ": ").concat(variables[key], ";");
    });
    return "\n  :root {\n    ".concat(cssList.join('\n'), "\n  }\n  ").trim();
}
function registerTheme(globalPrefixCls, theme) {
    var style = getStyle(globalPrefixCls, theme);
    if (_canUseDomDefault.default()) _dynamicCSS.updateCSS(style, "".concat(dynamicStyleMark, "-dynamic-theme"));
    else _devWarningDefault.default(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.');
}

},{"rc-util/es/Dom/dynamicCSS":"W9UzB","rc-util/es/Dom/canUseDom":"bCk8j","@ctrl/tinycolor":"3OnV7","@ant-design/colors":"51wCJ","../_util/devWarning":"dPrhV","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gNbuN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>UnreachableException
);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var UnreachableException = /*#__PURE__*/ _createClassDefault.default(function UnreachableException1(value) {
    _classCallCheckDefault.default(this, UnreachableException1);
    this.error = new Error("unreachable case: ".concat(JSON.stringify(value)));
});

},{"@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"isYsF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Wave
);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _dynamicCSS = require("rc-util/es/Dom/dynamicCSS");
var _ref = require("rc-util/es/ref");
var _raf = require("./raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _configProvider = require("../config-provider");
var _reactNode = require("./reactNode");
var styleForPseudo; // Where el is the DOM element you'd like to test for visibility
function isHidden(element) {
    return !element || element.offsetParent === null || element.hidden;
}
function isNotGrey(color) {
    // eslint-disable-next-line no-useless-escape
    var match = (color || '').match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
    if (match && match[1] && match[2] && match[3]) return !(match[1] === match[2] && match[2] === match[3]);
    return true;
}
var Wave = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(Wave1, _React$Component);
    var _super = _createSuperDefault.default(Wave1);
    function Wave1() {
        var _this;
        _classCallCheckDefault.default(this, Wave1);
        _this = _super.apply(this, arguments);
        _this.containerRef = /*#__PURE__*/ _react.createRef();
        _this.animationStart = false;
        _this.destroyed = false;
        _this.onClick = function(node, waveColor) {
            var _a, _b;
            var _this$props = _this.props, insertExtraNode = _this$props.insertExtraNode, disabled = _this$props.disabled;
            if (disabled || !node || isHidden(node) || node.className.indexOf('-leave') >= 0) return;
            _this.extraNode = document.createElement('div');
            var _assertThisInitialize = _assertThisInitializedDefault.default(_this), extraNode = _assertThisInitialize.extraNode;
            var getPrefixCls = _this.context.getPrefixCls;
            extraNode.className = "".concat(getPrefixCls(''), "-click-animating-node");
            var attributeName = _this.getAttributeName();
            node.setAttribute(attributeName, 'true'); // Not white or transparent or grey
            if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && waveColor !== 'transparent') {
                extraNode.style.borderColor = waveColor;
                var nodeRoot = ((_a = node.getRootNode) === null || _a === void 0 ? void 0 : _a.call(node)) || node.ownerDocument;
                var nodeBody = nodeRoot instanceof Document ? nodeRoot.body : (_b = nodeRoot.firstChild) !== null && _b !== void 0 ? _b : nodeRoot;
                styleForPseudo = _dynamicCSS.updateCSS("\n      [".concat(getPrefixCls(''), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(''), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }"), 'antd-wave', {
                    csp: _this.csp,
                    attachTo: nodeBody
                });
            }
            if (insertExtraNode) node.appendChild(extraNode);
            [
                'transition',
                'animation'
            ].forEach(function(name) {
                node.addEventListener("".concat(name, "start"), _this.onTransitionStart);
                node.addEventListener("".concat(name, "end"), _this.onTransitionEnd);
            });
        };
        _this.onTransitionStart = function(e) {
            if (_this.destroyed) return;
            var node = _this.containerRef.current;
            if (!e || e.target !== node || _this.animationStart) return;
            _this.resetEffect(node);
        };
        _this.onTransitionEnd = function(e) {
            if (!e || e.animationName !== 'fadeEffect') return;
            _this.resetEffect(e.target);
        };
        _this.bindAnimationEvent = function(node) {
            if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) return;
            var onClick = function onClick(e) {
                // Fix radio button click twice
                if (e.target.tagName === 'INPUT' || isHidden(e.target)) return;
                _this.resetEffect(node); // Get wave color from target
                var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
                _this.clickWaveTimeoutId = window.setTimeout(function() {
                    return _this.onClick(node, waveColor);
                }, 0);
                _rafDefault.default.cancel(_this.animationStartId);
                _this.animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.
                _this.animationStartId = _rafDefault.default(function() {
                    _this.animationStart = false;
                }, 10);
            };
            node.addEventListener('click', onClick, true);
            return {
                cancel: function cancel() {
                    node.removeEventListener('click', onClick, true);
                }
            };
        };
        _this.renderWave = function(_ref1) {
            var csp = _ref1.csp;
            var children = _this.props.children;
            _this.csp = csp;
            if (!/*#__PURE__*/ _react.isValidElement(children)) return children;
            var ref = _this.containerRef;
            if (_ref.supportRef(children)) ref = _ref.composeRef(children.ref, _this.containerRef);
            return _reactNode.cloneElement(children, {
                ref: ref
            });
        };
        return _this;
    }
    _createClassDefault.default(Wave1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var node = this.containerRef.current;
                if (!node || node.nodeType !== 1) return;
                this.instance = this.bindAnimationEvent(node);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this.instance) this.instance.cancel();
                if (this.clickWaveTimeoutId) clearTimeout(this.clickWaveTimeoutId);
                this.destroyed = true;
            }
        },
        {
            key: "getAttributeName",
            value: function getAttributeName() {
                var getPrefixCls = this.context.getPrefixCls;
                var insertExtraNode = this.props.insertExtraNode;
                return insertExtraNode ? "".concat(getPrefixCls(''), "-click-animating") : "".concat(getPrefixCls(''), "-click-animating-without-extra-node");
            }
        },
        {
            key: "resetEffect",
            value: function resetEffect(node) {
                var _this2 = this;
                if (!node || node === this.extraNode || !(node instanceof Element)) return;
                var insertExtraNode = this.props.insertExtraNode;
                var attributeName = this.getAttributeName();
                node.setAttribute(attributeName, 'false'); // edge has bug on `removeAttribute` #14466
                if (styleForPseudo) styleForPseudo.innerHTML = '';
                if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) node.removeChild(this.extraNode);
                [
                    'transition',
                    'animation'
                ].forEach(function(name) {
                    node.removeEventListener("".concat(name, "start"), _this2.onTransitionStart);
                    node.removeEventListener("".concat(name, "end"), _this2.onTransitionEnd);
                });
            }
        },
        {
            key: "render",
            value: function render() {
                return /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, null, this.renderWave);
            }
        }
    ]);
    return Wave1;
}(_react.Component);
Wave.contextType = _configProvider.ConfigContext;

},{"@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/assertThisInitialized":"5wGTe","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","rc-util/es/Dom/dynamicCSS":"W9UzB","rc-util/es/ref":"bvnCQ","./raf":"h9YUF","../config-provider":"dg9FJ","./reactNode":"hPDx5","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"h9YUF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var id = 0;
var ids = {}; // Support call raf with delay specified frame
function wrapperRaf(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var myId = id++;
    var restFrames = delayFrames;
    function internalCallback() {
        restFrames -= 1;
        if (restFrames <= 0) {
            callback();
            delete ids[myId];
        } else ids[myId] = _rafDefault.default(internalCallback);
    }
    ids[myId] = _rafDefault.default(internalCallback);
    return myId;
}
exports.default = wrapperRaf;
wrapperRaf.cancel = function cancel(pid) {
    if (pid === undefined) return;
    _rafDefault.default.cancel(ids[pid]);
    delete ids[pid];
};
wrapperRaf.ids = ids; // export this for test usage

},{"rc-util/es/raf":"h9LA9","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hPDx5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidElement", ()=>isValidElement
);
parcelHelpers.export(exports, "replaceElement", ()=>replaceElement
);
parcelHelpers.export(exports, "cloneElement", ()=>cloneElement
);
var _react = require("react");
var isValidElement = _react.isValidElement;
function replaceElement(element, replacement, props) {
    if (!isValidElement(element)) return replacement;
    return /*#__PURE__*/ _react.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);
}
function cloneElement(element, props) {
    return replaceElement(element, element, props);
}

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cMtUJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tuple", ()=>tuple
);
parcelHelpers.export(exports, "tupleNum", ()=>tupleNum
);
var tuple = function tuple() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return args;
};
var tupleNum = function tupleNum() {
    for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
    return args;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lIxIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _loadingOutlined = require("@ant-design/icons/es/icons/LoadingOutlined");
var _loadingOutlinedDefault = parcelHelpers.interopDefault(_loadingOutlined);
var getCollapsedWidth = function getCollapsedWidth() {
    return {
        width: 0,
        opacity: 0,
        transform: 'scale(0)'
    };
};
var getRealWidth = function getRealWidth(node) {
    return {
        width: node.scrollWidth,
        opacity: 1,
        transform: 'scale(1)'
    };
};
var LoadingIcon = function LoadingIcon(_ref) {
    var prefixCls = _ref.prefixCls, loading = _ref.loading, existIcon = _ref.existIcon;
    var visible = !!loading;
    if (existIcon) return /*#__PURE__*/ _reactDefault.default.createElement("span", {
        className: "".concat(prefixCls, "-loading-icon")
    }, /*#__PURE__*/ _reactDefault.default.createElement(_loadingOutlinedDefault.default, null));
    return /*#__PURE__*/ _reactDefault.default.createElement(_rcMotionDefault.default, {
        visible: visible // We do not really use this motionName
        ,
        motionName: "".concat(prefixCls, "-loading-icon-motion"),
        removeOnLeave: true,
        onAppearStart: getCollapsedWidth,
        onAppearActive: getRealWidth,
        onEnterStart: getCollapsedWidth,
        onEnterActive: getRealWidth,
        onLeaveStart: getRealWidth,
        onLeaveActive: getCollapsedWidth
    }, function(_ref2, ref) {
        var className = _ref2.className, style = _ref2.style;
        return /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: "".concat(prefixCls, "-loading-icon"),
            style: style,
            ref: ref
        }, /*#__PURE__*/ _reactDefault.default.createElement(_loadingOutlinedDefault.default, {
            className: className
        }));
    });
};
exports.default = LoadingIcon;

},{"react":"b4tPL","rc-motion":"01wSt","@ant-design/icons/es/icons/LoadingOutlined":"e4Ctf","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lQUWy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _grid = require("./Grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _meta = require("./Meta");
var _metaDefault = parcelHelpers.interopDefault(_meta);
var _tabs = require("../tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _row = require("../row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("../col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _configProvider = require("../config-provider");
var _sizeContext = require("../config-provider/SizeContext");
var _sizeContextDefault = parcelHelpers.interopDefault(_sizeContext);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function getAction(actions) {
    var actionList = actions.map(function(action, index) {
        return(/*#__PURE__*/ // eslint-disable-next-line react/no-array-index-key
        _react.createElement("li", {
            style: {
                width: "".concat(100 / actions.length, "%")
            },
            key: "action-".concat(index)
        }, /*#__PURE__*/ _react.createElement("span", null, action)));
    });
    return actionList;
}
var Card = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _extends2, _classNames;
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var size = _react.useContext(_sizeContextDefault.default);
    var onTabChange = function onTabChange(key) {
        var _a;
        (_a = props.onTabChange) === null || _a === void 0 || _a.call(props, key);
    };
    var isContainGrid = function isContainGrid() {
        var containGrid;
        _react.Children.forEach(props.children, function(element) {
            if (element && element.type && element.type === _gridDefault.default) containGrid = true;
        });
        return containGrid;
    };
    var customizePrefixCls = props.prefixCls, className = props.className, extra = props.extra, _props$headStyle = props.headStyle, headStyle = _props$headStyle === void 0 ? {} : _props$headStyle, _props$bodyStyle = props.bodyStyle, bodyStyle = _props$bodyStyle === void 0 ? {} : _props$bodyStyle, title = props.title, loading = props.loading, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customizeSize = props.size, type = props.type, cover = props.cover, actions = props.actions, tabList = props.tabList, children = props.children, activeTabKey = props.activeTabKey, defaultActiveTabKey = props.defaultActiveTabKey, tabBarExtraContent = props.tabBarExtraContent, hoverable = props.hoverable, _props$tabProps = props.tabProps, tabProps = _props$tabProps === void 0 ? {} : _props$tabProps, others = __rest(props, [
        "prefixCls",
        "className",
        "extra",
        "headStyle",
        "bodyStyle",
        "title",
        "loading",
        "bordered",
        "size",
        "type",
        "cover",
        "actions",
        "tabList",
        "children",
        "activeTabKey",
        "defaultActiveTabKey",
        "tabBarExtraContent",
        "hoverable",
        "tabProps"
    ]);
    var prefixCls = getPrefixCls('card', customizePrefixCls);
    var loadingBlockStyle = bodyStyle.padding === 0 || bodyStyle.padding === '0px' ? {
        padding: 24
    } : undefined;
    var block = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-loading-block")
    });
    var loadingBlock = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-loading-content"),
        style: loadingBlockStyle
    }, /*#__PURE__*/ _react.createElement(_rowDefault.default, {
        gutter: 8
    }, /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 22
    }, block)), /*#__PURE__*/ _react.createElement(_rowDefault.default, {
        gutter: 8
    }, /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 8
    }, block), /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 15
    }, block)), /*#__PURE__*/ _react.createElement(_rowDefault.default, {
        gutter: 8
    }, /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 6
    }, block), /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 18
    }, block)), /*#__PURE__*/ _react.createElement(_rowDefault.default, {
        gutter: 8
    }, /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 13
    }, block), /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 9
    }, block)), /*#__PURE__*/ _react.createElement(_rowDefault.default, {
        gutter: 8
    }, /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 4
    }, block), /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 3
    }, block), /*#__PURE__*/ _react.createElement(_colDefault.default, {
        span: 16
    }, block)));
    var hasActiveTabKey = activeTabKey !== undefined;
    var extraProps = _extendsDefault.default(_extendsDefault.default({}, tabProps), (_extends2 = {}, _definePropertyDefault.default(_extends2, hasActiveTabKey ? 'activeKey' : 'defaultActiveKey', hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _definePropertyDefault.default(_extends2, "tabBarExtraContent", tabBarExtraContent), _extends2));
    var head;
    var tabs = tabList && tabList.length ? /*#__PURE__*/ _react.createElement(_tabsDefault.default, _extendsDefault.default({
        size: "large"
    }, extraProps, {
        className: "".concat(prefixCls, "-head-tabs"),
        onChange: onTabChange
    }), tabList.map(function(item) {
        return /*#__PURE__*/ _react.createElement(_tabsDefault.default.TabPane, {
            tab: item.tab,
            disabled: item.disabled,
            key: item.key
        });
    })) : null;
    if (title || extra || tabs) head = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-head"),
        style: headStyle
    }, /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-head-wrapper")
    }, title && /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-head-title")
    }, title), extra && /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-extra")
    }, extra)), tabs);
    var coverDom = cover ? /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-cover")
    }, cover) : null;
    var body = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-body"),
        style: bodyStyle
    }, loading ? loadingBlock : children);
    var actionDom = actions && actions.length ? /*#__PURE__*/ _react.createElement("ul", {
        className: "".concat(prefixCls, "-actions")
    }, getAction(actions)) : null;
    var divProps = _omitDefault.default(others, [
        'onTabChange'
    ]);
    var mergedSize = customizeSize || size;
    var classString = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-loading"), loading), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-bordered"), bordered), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-hoverable"), hoverable), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-contain-grid"), isContainGrid()), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-contain-tabs"), tabList && tabList.length), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-type-").concat(type), !!type), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        ref: ref
    }, divProps, {
        className: classString
    }), head, coverDom, body, actionDom);
});
Card.Grid = _gridDefault.default;
Card.Meta = _metaDefault.default;
exports.default = Card;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","classnames":"dFgpN","rc-util/es/omit":"9TJfY","./Grid":"dTy1O","./Meta":"fu1xf","../tabs":"h1YUY","../row":"63sKn","../col":"hY9cv","../config-provider":"dg9FJ","../config-provider/SizeContext":"g9GAC","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dTy1O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var Grid = function Grid(_a) {
    var prefixCls = _a.prefixCls, className = _a.className, _a$hoverable = _a.hoverable, hoverable = _a$hoverable === void 0 ? true : _a$hoverable, props = __rest(_a, [
        "prefixCls",
        "className",
        "hoverable"
    ]);
    return /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, null, function(_ref) {
        var getPrefixCls = _ref.getPrefixCls;
        var prefix = getPrefixCls('card', prefixCls);
        var classString = _classnamesDefault.default("".concat(prefix, "-grid"), className, _definePropertyDefault.default({}, "".concat(prefix, "-grid-hoverable"), hoverable));
        return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, props, {
            className: classString
        }));
    });
};
exports.default = Grid;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fu1xf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var Meta = function Meta(props) {
    return /*#__PURE__*/ _react.createElement(_configProvider.ConfigConsumer, null, function(_ref) {
        var getPrefixCls = _ref.getPrefixCls;
        var customizePrefixCls = props.prefixCls, className = props.className, avatar = props.avatar, title = props.title, description = props.description, others = __rest(props, [
            "prefixCls",
            "className",
            "avatar",
            "title",
            "description"
        ]);
        var prefixCls = getPrefixCls('card', customizePrefixCls);
        var classString = _classnamesDefault.default("".concat(prefixCls, "-meta"), className);
        var avatarDom = avatar ? /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-meta-avatar")
        }, avatar) : null;
        var titleDom = title ? /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-meta-title")
        }, title) : null;
        var descriptionDom = description ? /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-meta-description")
        }, description) : null;
        var MetaDetail = titleDom || descriptionDom ? /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-meta-detail")
        }, titleDom, descriptionDom) : null;
        return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, others, {
            className: classString
        }), avatarDom, MetaDetail);
    });
};
exports.default = Meta;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"h1YUY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _rcTabs = require("rc-tabs");
var _rcTabsDefault = parcelHelpers.interopDefault(_rcTabs);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _ellipsisOutlined = require("@ant-design/icons/es/icons/EllipsisOutlined");
var _ellipsisOutlinedDefault = parcelHelpers.interopDefault(_ellipsisOutlined);
var _plusOutlined = require("@ant-design/icons/es/icons/PlusOutlined");
var _plusOutlinedDefault = parcelHelpers.interopDefault(_plusOutlined);
var _closeOutlined = require("@ant-design/icons/es/icons/CloseOutlined");
var _closeOutlinedDefault = parcelHelpers.interopDefault(_closeOutlined);
var _devWarning = require("../_util/devWarning");
var _devWarningDefault = parcelHelpers.interopDefault(_devWarning);
var _configProvider = require("../config-provider");
var _sizeContext = require("../config-provider/SizeContext");
var _sizeContextDefault = parcelHelpers.interopDefault(_sizeContext);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function Tabs(_a) {
    var type = _a.type, className = _a.className, propSize = _a.size, _onEdit = _a.onEdit, hideAdd = _a.hideAdd, centered = _a.centered, addIcon = _a.addIcon, props = __rest(_a, [
        "type",
        "className",
        "size",
        "onEdit",
        "hideAdd",
        "centered",
        "addIcon"
    ]);
    var customizePrefixCls = props.prefixCls, _props$moreIcon = props.moreIcon, moreIcon = _props$moreIcon === void 0 ? /*#__PURE__*/ _react.createElement(_ellipsisOutlinedDefault.default, null) : _props$moreIcon;
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var prefixCls = getPrefixCls('tabs', customizePrefixCls);
    var editable;
    if (type === 'editable-card') editable = {
        onEdit: function onEdit(editType, _ref) {
            var key = _ref.key, event = _ref.event;
            _onEdit === null || _onEdit === void 0 || _onEdit(editType === 'add' ? event : key, editType);
        },
        removeIcon: /*#__PURE__*/ _react.createElement(_closeOutlinedDefault.default, null),
        addIcon: addIcon || /*#__PURE__*/ _react.createElement(_plusOutlinedDefault.default, null),
        showAdd: hideAdd !== true
    };
    var rootPrefixCls = getPrefixCls();
    _devWarningDefault.default(!('onPrevClick' in props) && !('onNextClick' in props), 'Tabs', '`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.');
    return /*#__PURE__*/ _react.createElement(_sizeContextDefault.default.Consumer, null, function(contextSize) {
        var _classNames;
        var size = propSize !== undefined ? propSize : contextSize;
        return /*#__PURE__*/ _react.createElement(_rcTabsDefault.default, _extendsDefault.default({
            direction: direction,
            moreTransitionName: "".concat(rootPrefixCls, "-slide-up")
        }, props, {
            className: _classnamesDefault.default((_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(size), size), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-card"), [
                'card',
                'editable-card'
            ].includes(type)), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-editable-card"), type === 'editable-card'), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-centered"), centered), _classNames), className),
            editable: editable,
            moreIcon: moreIcon,
            prefixCls: prefixCls
        }));
    });
}
Tabs.TabPane = _rcTabs.TabPane;
exports.default = Tabs;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","rc-tabs":"hWQPL","classnames":"dFgpN","@ant-design/icons/es/icons/EllipsisOutlined":"5yqWH","@ant-design/icons/es/icons/PlusOutlined":"boSG6","@ant-design/icons/es/icons/CloseOutlined":"9ps37","../_util/devWarning":"dPrhV","../config-provider":"dg9FJ","../config-provider/SizeContext":"g9GAC","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hWQPL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TabPane", ()=>_tabPaneDefault.default
);
var _tabs = require("./Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _tabPane = require("./TabPanelList/TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
exports.default = _tabsDefault.default;

},{"./Tabs":"aCI8o","./TabPanelList/TabPane":"aoHnX","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aCI8o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// Accessibility https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _toArray = require("rc-util/es/Children/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _isMobile = require("rc-util/es/isMobile");
var _isMobileDefault = parcelHelpers.interopDefault(_isMobile);
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _tabNavList = require("./TabNavList");
var _tabNavListDefault = parcelHelpers.interopDefault(_tabNavList);
var _tabPanelList = require("./TabPanelList");
var _tabPanelListDefault = parcelHelpers.interopDefault(_tabPanelList);
var _tabPane = require("./TabPanelList/TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _excluded = [
    "id",
    "prefixCls",
    "className",
    "children",
    "direction",
    "activeKey",
    "defaultActiveKey",
    "editable",
    "animated",
    "tabPosition",
    "tabBarGutter",
    "tabBarStyle",
    "tabBarExtraContent",
    "locale",
    "moreIcon",
    "moreTransitionName",
    "destroyInactiveTabPane",
    "renderTabBar",
    "onChange",
    "onTabClick",
    "onTabScroll"
];
/**
 * Should added antd:
 * - type
 *
 * Removed:
 * - onNextClick
 * - onPrevClick
 * - keyboard
 */ // Used for accessibility
var uuid = 0;
function parseTabList(children) {
    return _toArrayDefault.default(children).map(function(node) {
        if (/*#__PURE__*/ _react.isValidElement(node)) {
            var key = node.key !== undefined ? String(node.key) : undefined;
            return _objectSpread2Default.default(_objectSpread2Default.default({
                key: key
            }, node.props), {}, {
                node: node
            });
        }
        return null;
    }).filter(function(tab) {
        return tab;
    });
}
function Tabs(_ref, ref) {
    var _classNames;
    var id = _ref.id, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? 'rc-tabs' : _ref$prefixCls, className = _ref.className, children = _ref.children, direction = _ref.direction, activeKey = _ref.activeKey, defaultActiveKey = _ref.defaultActiveKey, editable = _ref.editable, _ref$animated = _ref.animated, animated = _ref$animated === void 0 ? {
        inkBar: true,
        tabPane: false
    } : _ref$animated, _ref$tabPosition = _ref.tabPosition, tabPosition = _ref$tabPosition === void 0 ? 'top' : _ref$tabPosition, tabBarGutter = _ref.tabBarGutter, tabBarStyle = _ref.tabBarStyle, tabBarExtraContent = _ref.tabBarExtraContent, locale = _ref.locale, moreIcon = _ref.moreIcon, moreTransitionName = _ref.moreTransitionName, destroyInactiveTabPane = _ref.destroyInactiveTabPane, renderTabBar = _ref.renderTabBar, onChange = _ref.onChange, onTabClick = _ref.onTabClick, onTabScroll = _ref.onTabScroll, restProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var tabs = parseTabList(children);
    var rtl = direction === 'rtl';
    var mergedAnimated;
    if (animated === false) mergedAnimated = {
        inkBar: false,
        tabPane: false
    };
    else if (animated === true) mergedAnimated = {
        inkBar: true,
        tabPane: true
    };
    else mergedAnimated = _objectSpread2Default.default({
        inkBar: true,
        tabPane: false
    }, _typeofDefault.default(animated) === 'object' ? animated : {});
     // ======================== Mobile ========================
    var _useState = _react.useState(false), _useState2 = _slicedToArrayDefault.default(_useState, 2), mobile = _useState2[0], setMobile = _useState2[1];
    _react.useEffect(function() {
        // Only update on the client side
        setMobile(_isMobileDefault.default());
    }, []); // ====================== Active Key ======================
    var _useMergedState1 = _useMergedStateDefault.default(function() {
        var _tabs$;
        return (_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key;
    }, {
        value: activeKey,
        defaultValue: defaultActiveKey
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), mergedActiveKey = _useMergedState2[0], setMergedActiveKey = _useMergedState2[1];
    var _useState3 = _react.useState(function() {
        return tabs.findIndex(function(tab) {
            return tab.key === mergedActiveKey;
        });
    }), _useState4 = _slicedToArrayDefault.default(_useState3, 2), activeIndex = _useState4[0], setActiveIndex = _useState4[1]; // Reset active key if not exist anymore
    _react.useEffect(function() {
        var newActiveIndex = tabs.findIndex(function(tab) {
            return tab.key === mergedActiveKey;
        });
        if (newActiveIndex === -1) {
            var _tabs$newActiveIndex;
            newActiveIndex = Math.max(0, Math.min(activeIndex, tabs.length - 1));
            setMergedActiveKey((_tabs$newActiveIndex = tabs[newActiveIndex]) === null || _tabs$newActiveIndex === void 0 ? void 0 : _tabs$newActiveIndex.key);
        }
        setActiveIndex(newActiveIndex);
    }, [
        tabs.map(function(tab) {
            return tab.key;
        }).join('_'),
        mergedActiveKey,
        activeIndex
    ]); // ===================== Accessibility ====================
    var _useMergedState3 = _useMergedStateDefault.default(null, {
        value: id
    }), _useMergedState4 = _slicedToArrayDefault.default(_useMergedState3, 2), mergedId = _useMergedState4[0], setMergedId = _useMergedState4[1];
    var mergedTabPosition = tabPosition;
    if (mobile && ![
        'left',
        'right'
    ].includes(tabPosition)) mergedTabPosition = 'top';
     // Async generate id to avoid ssr mapping failed
    _react.useEffect(function() {
        if (!id) {
            setMergedId("rc-tabs-".concat(uuid));
            uuid += 1;
        }
    }, []); // ======================== Events ========================
    function onInternalTabClick(key, e) {
        onTabClick === null || onTabClick === void 0 || onTabClick(key, e);
        var isActiveChanged = key !== mergedActiveKey;
        setMergedActiveKey(key);
        if (isActiveChanged) onChange === null || onChange === void 0 || onChange(key);
    } // ======================== Render ========================
    var sharedProps = {
        id: mergedId,
        activeKey: mergedActiveKey,
        animated: mergedAnimated,
        tabPosition: mergedTabPosition,
        rtl: rtl,
        mobile: mobile
    };
    var tabNavBar;
    var tabNavBarProps = _objectSpread2Default.default(_objectSpread2Default.default({}, sharedProps), {}, {
        editable: editable,
        locale: locale,
        moreIcon: moreIcon,
        moreTransitionName: moreTransitionName,
        tabBarGutter: tabBarGutter,
        onTabClick: onInternalTabClick,
        onTabScroll: onTabScroll,
        extra: tabBarExtraContent,
        style: tabBarStyle,
        panes: children
    });
    if (renderTabBar) tabNavBar = renderTabBar(tabNavBarProps, _tabNavListDefault.default);
    else tabNavBar = /*#__PURE__*/ _react.createElement(_tabNavListDefault.default, tabNavBarProps);
    return /*#__PURE__*/ _react.createElement(_tabContextDefault.default.Provider, {
        value: {
            tabs: tabs,
            prefixCls: prefixCls
        }
    }, /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        ref: ref,
        id: id,
        className: _classnamesDefault.default(prefixCls, "".concat(prefixCls, "-").concat(mergedTabPosition), (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-mobile"), mobile), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-editable"), editable), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), rtl), _classNames), className)
    }, restProps), tabNavBar, /*#__PURE__*/ _react.createElement(_tabPanelListDefault.default, _extendsDefault.default({
        destroyInactiveTabPane: destroyInactiveTabPane
    }, sharedProps, {
        animated: mergedAnimated
    }))));
}
var ForwardTabs = /*#__PURE__*/ _react.forwardRef(Tabs);
ForwardTabs.TabPane = _tabPaneDefault.default;
exports.default = ForwardTabs;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","classnames":"dFgpN","rc-util/es/Children/toArray":"ijisy","rc-util/es/isMobile":"6m4Jz","rc-util/es/hooks/useMergedState":"jUfJa","./TabNavList":"9m866","./TabPanelList":"jvPov","./TabPanelList/TabPane":"aoHnX","./TabContext":"j4iht","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6m4Jz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    if (typeof navigator === 'undefined' || typeof window === 'undefined') return false;
    var agent = navigator.userAgent || navigator.vendor || window.opera;
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4))) return true;
    return false;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jUfJa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useState = require("./useState");
var _useStateDefault = parcelHelpers.interopDefault(_useState);
function useControlledState(defaultStateValue, option) {
    var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
    var _useState1 = _useStateDefault.default(function() {
        if (value !== undefined) return value;
        if (defaultValue !== undefined) return typeof defaultValue === 'function' ? defaultValue() : defaultValue;
        return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;
    }), _useState2 = _slicedToArrayDefault.default(_useState1, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
    var mergedValue = value !== undefined ? value : innerValue;
    if (postState) mergedValue = postState(mergedValue);
     // setState
    var onChangeRef = _react.useRef(onChange);
    onChangeRef.current = onChange;
    var triggerChange = _react.useCallback(function(newValue, ignoreDestroy) {
        setInnerValue(newValue, ignoreDestroy);
        if (mergedValue !== newValue && onChangeRef.current) onChangeRef.current(newValue, mergedValue);
    }, [
        mergedValue,
        onChangeRef
    ]); // Effect of reset value to `undefined`
    var firstRenderRef = _react.useRef(true);
    _react.useEffect(function() {
        if (firstRenderRef.current) {
            firstRenderRef.current = false;
            return;
        }
        if (value === undefined) setInnerValue(value);
    }, [
        value
    ]);
    return [
        mergedValue,
        triggerChange
    ];
}
exports.default = useControlledState;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","./useState":"5a1b3","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9m866":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _rcResizeObserver = require("rc-resize-observer");
var _rcResizeObserverDefault = parcelHelpers.interopDefault(_rcResizeObserver);
var _useRaf = require("../hooks/useRaf");
var _useRafDefault = parcelHelpers.interopDefault(_useRaf);
var _tabNode = require("./TabNode");
var _tabNodeDefault = parcelHelpers.interopDefault(_tabNode);
var _useOffsets = require("../hooks/useOffsets");
var _useOffsetsDefault = parcelHelpers.interopDefault(_useOffsets);
var _useVisibleRange = require("../hooks/useVisibleRange");
var _useVisibleRangeDefault = parcelHelpers.interopDefault(_useVisibleRange);
var _operationNode = require("./OperationNode");
var _operationNodeDefault = parcelHelpers.interopDefault(_operationNode);
var _tabContext = require("../TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _useTouchMove = require("../hooks/useTouchMove");
var _useTouchMoveDefault = parcelHelpers.interopDefault(_useTouchMove);
var _useRefs = require("../hooks/useRefs");
var _useRefsDefault = parcelHelpers.interopDefault(_useRefs);
var _addButton = require("./AddButton");
var _addButtonDefault = parcelHelpers.interopDefault(_addButton);
var _useSyncState = require("../hooks/useSyncState");
var _useSyncStateDefault = parcelHelpers.interopDefault(_useSyncState);
var ExtraContent = function ExtraContent(_ref) {
    var position = _ref.position, prefixCls = _ref.prefixCls, extra = _ref.extra;
    if (!extra) return null;
    var content; // Parse extra
    var assertExtra = {};
    if (extra && _typeofDefault.default(extra) === 'object' && !/*#__PURE__*/ _react.isValidElement(extra)) assertExtra = extra;
    else assertExtra.right = extra;
    if (position === 'right') content = assertExtra.right;
    if (position === 'left') content = assertExtra.left;
    return content ? /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-extra-content")
    }, content) : null;
};
function TabNavList(props, ref) {
    var _classNames;
    var _React$useContext = _react.useContext(_tabContextDefault.default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var className = props.className, style = props.style, id = props.id, animated = props.animated, activeKey = props.activeKey, rtl = props.rtl, extra = props.extra, editable = props.editable, locale = props.locale, tabPosition = props.tabPosition, tabBarGutter = props.tabBarGutter, children = props.children, onTabClick = props.onTabClick, onTabScroll = props.onTabScroll;
    var tabsWrapperRef = _react.useRef();
    var tabListRef = _react.useRef();
    var operationsRef = _react.useRef();
    var innerAddButtonRef = _react.useRef();
    var _useRefs1 = _useRefsDefault.default(), _useRefs2 = _slicedToArrayDefault.default(_useRefs1, 2), getBtnRef = _useRefs2[0], removeBtnRef = _useRefs2[1];
    var tabPositionTopOrBottom = tabPosition === 'top' || tabPosition === 'bottom';
    var _useSyncState1 = _useSyncStateDefault.default(0, function(next, prev) {
        if (tabPositionTopOrBottom && onTabScroll) onTabScroll({
            direction: next > prev ? 'left' : 'right'
        });
    }), _useSyncState2 = _slicedToArrayDefault.default(_useSyncState1, 2), transformLeft = _useSyncState2[0], setTransformLeft = _useSyncState2[1];
    var _useSyncState3 = _useSyncStateDefault.default(0, function(next, prev) {
        if (!tabPositionTopOrBottom && onTabScroll) onTabScroll({
            direction: next > prev ? 'top' : 'bottom'
        });
    }), _useSyncState4 = _slicedToArrayDefault.default(_useSyncState3, 2), transformTop = _useSyncState4[0], setTransformTop = _useSyncState4[1];
    var _useState = _react.useState(0), _useState2 = _slicedToArrayDefault.default(_useState, 2), wrapperScrollWidth = _useState2[0], setWrapperScrollWidth = _useState2[1];
    var _useState3 = _react.useState(0), _useState4 = _slicedToArrayDefault.default(_useState3, 2), wrapperScrollHeight = _useState4[0], setWrapperScrollHeight = _useState4[1];
    var _useState5 = _react.useState(null), _useState6 = _slicedToArrayDefault.default(_useState5, 2), wrapperWidth = _useState6[0], setWrapperWidth = _useState6[1];
    var _useState7 = _react.useState(null), _useState8 = _slicedToArrayDefault.default(_useState7, 2), wrapperHeight = _useState8[0], setWrapperHeight = _useState8[1];
    var _useState9 = _react.useState(0), _useState10 = _slicedToArrayDefault.default(_useState9, 2), addWidth = _useState10[0], setAddWidth = _useState10[1];
    var _useState11 = _react.useState(0), _useState12 = _slicedToArrayDefault.default(_useState11, 2), addHeight = _useState12[0], setAddHeight = _useState12[1];
    var _useRafState = _useRaf.useRafState(new Map()), _useRafState2 = _slicedToArrayDefault.default(_useRafState, 2), tabSizes = _useRafState2[0], setTabSizes = _useRafState2[1];
    var tabOffsets = _useOffsetsDefault.default(tabs, tabSizes, wrapperScrollWidth); // ========================== Util =========================
    var operationsHiddenClassName = "".concat(prefixCls, "-nav-operations-hidden");
    var transformMin = 0;
    var transformMax = 0;
    if (!tabPositionTopOrBottom) {
        transformMin = Math.min(0, wrapperHeight - wrapperScrollHeight);
        transformMax = 0;
    } else if (rtl) {
        transformMin = 0;
        transformMax = Math.max(0, wrapperScrollWidth - wrapperWidth);
    } else {
        transformMin = Math.min(0, wrapperWidth - wrapperScrollWidth);
        transformMax = 0;
    }
    function alignInRange(value) {
        if (value < transformMin) return transformMin;
        if (value > transformMax) return transformMax;
        return value;
    } // ========================= Mobile ========================
    var touchMovingRef = _react.useRef();
    var _useState13 = _react.useState(), _useState14 = _slicedToArrayDefault.default(_useState13, 2), lockAnimation = _useState14[0], setLockAnimation = _useState14[1];
    function doLockAnimation() {
        setLockAnimation(Date.now());
    }
    function clearTouchMoving() {
        window.clearTimeout(touchMovingRef.current);
    }
    _useTouchMoveDefault.default(tabsWrapperRef, function(offsetX, offsetY) {
        function doMove(setState, offset) {
            setState(function(value) {
                var newValue = alignInRange(value + offset);
                return newValue;
            });
        }
        if (tabPositionTopOrBottom) {
            // Skip scroll if place is enough
            if (wrapperWidth >= wrapperScrollWidth) return false;
            doMove(setTransformLeft, offsetX);
        } else {
            if (wrapperHeight >= wrapperScrollHeight) return false;
            doMove(setTransformTop, offsetY);
        }
        clearTouchMoving();
        doLockAnimation();
        return true;
    });
    _react.useEffect(function() {
        clearTouchMoving();
        if (lockAnimation) touchMovingRef.current = window.setTimeout(function() {
            setLockAnimation(0);
        }, 100);
        return clearTouchMoving;
    }, [
        lockAnimation
    ]); // ========================= Scroll ========================
    function scrollToTab() {
        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : activeKey;
        var tabOffset = tabOffsets.get(key) || {
            width: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0
        };
        if (tabPositionTopOrBottom) {
            // ============ Align with top & bottom ============
            var newTransform = transformLeft; // RTL
            if (rtl) {
                if (tabOffset.right < transformLeft) newTransform = tabOffset.right;
                else if (tabOffset.right + tabOffset.width > transformLeft + wrapperWidth) newTransform = tabOffset.right + tabOffset.width - wrapperWidth;
            } else if (tabOffset.left < -transformLeft) newTransform = -tabOffset.left;
            else if (tabOffset.left + tabOffset.width > -transformLeft + wrapperWidth) newTransform = -(tabOffset.left + tabOffset.width - wrapperWidth);
            setTransformTop(0);
            setTransformLeft(alignInRange(newTransform));
        } else {
            // ============ Align with left & right ============
            var _newTransform = transformTop;
            if (tabOffset.top < -transformTop) _newTransform = -tabOffset.top;
            else if (tabOffset.top + tabOffset.height > -transformTop + wrapperHeight) _newTransform = -(tabOffset.top + tabOffset.height - wrapperHeight);
            setTransformLeft(0);
            setTransformTop(alignInRange(_newTransform));
        }
    } // ========================== Tab ==========================
    // Render tab node & collect tab offset
    var _useVisibleRange1 = _useVisibleRangeDefault.default(tabOffsets, {
        width: wrapperWidth,
        height: wrapperHeight,
        left: transformLeft,
        top: transformTop
    }, {
        width: wrapperScrollWidth,
        height: wrapperScrollHeight
    }, {
        width: addWidth,
        height: addHeight
    }, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        tabs: tabs
    })), _useVisibleRange2 = _slicedToArrayDefault.default(_useVisibleRange1, 2), visibleStart = _useVisibleRange2[0], visibleEnd = _useVisibleRange2[1];
    var tabNodeStyle = {};
    if (tabPosition === 'top' || tabPosition === 'bottom') tabNodeStyle[rtl ? 'marginRight' : 'marginLeft'] = tabBarGutter;
    else tabNodeStyle.marginTop = tabBarGutter;
    var tabNodes = tabs.map(function(tab, i) {
        var key = tab.key;
        return /*#__PURE__*/ _react.createElement(_tabNodeDefault.default, {
            id: id,
            prefixCls: prefixCls,
            key: key,
            tab: tab,
            style: i === 0 ? undefined : tabNodeStyle,
            closable: tab.closable,
            editable: editable,
            active: key === activeKey,
            renderWrapper: children,
            removeAriaLabel: locale === null || locale === void 0 ? void 0 : locale.removeAriaLabel,
            ref: getBtnRef(key),
            onClick: function onClick(e) {
                onTabClick(key, e);
            },
            onRemove: function onRemove() {
                removeBtnRef(key);
            },
            onFocus: function onFocus() {
                scrollToTab(key);
                doLockAnimation();
                if (!tabsWrapperRef.current) return;
                 // Focus element will make scrollLeft change which we should reset back
                if (!rtl) tabsWrapperRef.current.scrollLeft = 0;
                tabsWrapperRef.current.scrollTop = 0;
            }
        });
    });
    var onListHolderResize = _useRafDefault.default(function() {
        var _tabsWrapperRef$curre, _tabsWrapperRef$curre2, _innerAddButtonRef$cu, _innerAddButtonRef$cu2, _tabListRef$current, _tabListRef$current2;
        // Update wrapper records
        var offsetWidth = ((_tabsWrapperRef$curre = tabsWrapperRef.current) === null || _tabsWrapperRef$curre === void 0 ? void 0 : _tabsWrapperRef$curre.offsetWidth) || 0;
        var offsetHeight = ((_tabsWrapperRef$curre2 = tabsWrapperRef.current) === null || _tabsWrapperRef$curre2 === void 0 ? void 0 : _tabsWrapperRef$curre2.offsetHeight) || 0;
        var newAddWidth = ((_innerAddButtonRef$cu = innerAddButtonRef.current) === null || _innerAddButtonRef$cu === void 0 ? void 0 : _innerAddButtonRef$cu.offsetWidth) || 0;
        var newAddHeight = ((_innerAddButtonRef$cu2 = innerAddButtonRef.current) === null || _innerAddButtonRef$cu2 === void 0 ? void 0 : _innerAddButtonRef$cu2.offsetHeight) || 0;
        setWrapperWidth(offsetWidth);
        setWrapperHeight(offsetHeight);
        setAddWidth(newAddWidth);
        setAddHeight(newAddHeight);
        var newWrapperScrollWidth = (((_tabListRef$current = tabListRef.current) === null || _tabListRef$current === void 0 ? void 0 : _tabListRef$current.offsetWidth) || 0) - newAddWidth;
        var newWrapperScrollHeight = (((_tabListRef$current2 = tabListRef.current) === null || _tabListRef$current2 === void 0 ? void 0 : _tabListRef$current2.offsetHeight) || 0) - newAddHeight;
        setWrapperScrollWidth(newWrapperScrollWidth);
        setWrapperScrollHeight(newWrapperScrollHeight); // Update buttons records
        setTabSizes(function() {
            var newSizes = new Map();
            tabs.forEach(function(_ref2) {
                var key = _ref2.key;
                var btnNode = getBtnRef(key).current;
                if (btnNode) newSizes.set(key, {
                    width: btnNode.offsetWidth,
                    height: btnNode.offsetHeight,
                    left: btnNode.offsetLeft,
                    top: btnNode.offsetTop
                });
            });
            return newSizes;
        });
    }); // ======================== Dropdown =======================
    var startHiddenTabs = tabs.slice(0, visibleStart);
    var endHiddenTabs = tabs.slice(visibleEnd + 1);
    var hiddenTabs = [].concat(_toConsumableArrayDefault.default(startHiddenTabs), _toConsumableArrayDefault.default(endHiddenTabs)); // =================== Link & Operations ===================
    var _useState15 = _react.useState(), _useState16 = _slicedToArrayDefault.default(_useState15, 2), inkStyle = _useState16[0], setInkStyle = _useState16[1];
    var activeTabOffset = tabOffsets.get(activeKey); // Delay set ink style to avoid remove tab blink
    var inkBarRafRef = _react.useRef();
    function cleanInkBarRaf() {
        _rafDefault.default.cancel(inkBarRafRef.current);
    }
    _react.useEffect(function() {
        var newInkStyle = {};
        if (activeTabOffset) {
            if (tabPositionTopOrBottom) {
                if (rtl) newInkStyle.right = activeTabOffset.right;
                else newInkStyle.left = activeTabOffset.left;
                newInkStyle.width = activeTabOffset.width;
            } else {
                newInkStyle.top = activeTabOffset.top;
                newInkStyle.height = activeTabOffset.height;
            }
        }
        cleanInkBarRaf();
        inkBarRafRef.current = _rafDefault.default(function() {
            setInkStyle(newInkStyle);
        });
        return cleanInkBarRaf;
    }, [
        activeTabOffset,
        tabPositionTopOrBottom,
        rtl
    ]); // ========================= Effect ========================
    _react.useEffect(function() {
        scrollToTab();
    }, [
        activeKey,
        activeTabOffset,
        tabOffsets,
        tabPositionTopOrBottom
    ]); // Should recalculate when rtl changed
    _react.useEffect(function() {
        onListHolderResize();
    }, [
        rtl,
        tabBarGutter,
        activeKey,
        tabs.map(function(tab) {
            return tab.key;
        }).join('_')
    ]); // ========================= Render ========================
    var hasDropdown = !!hiddenTabs.length;
    var wrapPrefix = "".concat(prefixCls, "-nav-wrap");
    var pingLeft;
    var pingRight;
    var pingTop;
    var pingBottom;
    if (tabPositionTopOrBottom) {
        if (rtl) {
            pingRight = transformLeft > 0;
            pingLeft = transformLeft + wrapperWidth < wrapperScrollWidth;
        } else {
            pingLeft = transformLeft < 0;
            pingRight = -transformLeft + wrapperWidth < wrapperScrollWidth;
        }
    } else {
        pingTop = transformTop < 0;
        pingBottom = -transformTop + wrapperHeight < wrapperScrollHeight;
    }
    return /*#__PURE__*/ _react.createElement("div", {
        ref: ref,
        role: "tablist",
        className: _classnamesDefault.default("".concat(prefixCls, "-nav"), className),
        style: style,
        onKeyDown: function onKeyDown() {
            // No need animation when use keyboard
            doLockAnimation();
        }
    }, /*#__PURE__*/ _react.createElement(ExtraContent, {
        position: "left",
        extra: extra,
        prefixCls: prefixCls
    }), /*#__PURE__*/ _react.createElement(_rcResizeObserverDefault.default, {
        onResize: onListHolderResize
    }, /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default(wrapPrefix, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(wrapPrefix, "-ping-left"), pingLeft), _definePropertyDefault.default(_classNames, "".concat(wrapPrefix, "-ping-right"), pingRight), _definePropertyDefault.default(_classNames, "".concat(wrapPrefix, "-ping-top"), pingTop), _definePropertyDefault.default(_classNames, "".concat(wrapPrefix, "-ping-bottom"), pingBottom), _classNames)),
        ref: tabsWrapperRef
    }, /*#__PURE__*/ _react.createElement(_rcResizeObserverDefault.default, {
        onResize: onListHolderResize
    }, /*#__PURE__*/ _react.createElement("div", {
        ref: tabListRef,
        className: "".concat(prefixCls, "-nav-list"),
        style: {
            transform: "translate(".concat(transformLeft, "px, ").concat(transformTop, "px)"),
            transition: lockAnimation ? 'none' : undefined
        }
    }, tabNodes, /*#__PURE__*/ _react.createElement(_addButtonDefault.default, {
        ref: innerAddButtonRef,
        prefixCls: prefixCls,
        locale: locale,
        editable: editable,
        style: _objectSpread2Default.default(_objectSpread2Default.default({}, tabNodes.length === 0 ? undefined : tabNodeStyle), {}, {
            visibility: hasDropdown ? 'hidden' : null
        })
    }), /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-ink-bar"), _definePropertyDefault.default({}, "".concat(prefixCls, "-ink-bar-animated"), animated.inkBar)),
        style: inkStyle
    }))))), /*#__PURE__*/ _react.createElement(_operationNodeDefault.default, _extendsDefault.default({}, props, {
        removeAriaLabel: locale === null || locale === void 0 ? void 0 : locale.removeAriaLabel,
        ref: operationsRef,
        prefixCls: prefixCls,
        tabs: hiddenTabs,
        className: !hasDropdown && operationsHiddenClassName,
        tabMoving: !!lockAnimation
    })), /*#__PURE__*/ _react.createElement(ExtraContent, {
        position: "right",
        extra: extra,
        prefixCls: prefixCls
    }));
/* eslint-enable */ }
exports.default = /*#__PURE__*/ _react.forwardRef(TabNavList);

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","classnames":"dFgpN","rc-util/es/raf":"h9LA9","rc-resize-observer":"j1QfD","../hooks/useRaf":"bjLPM","./TabNode":"bOFy9","../hooks/useOffsets":"cOHyK","../hooks/useVisibleRange":"9r3VR","./OperationNode":"6mSxz","../TabContext":"j4iht","../hooks/useTouchMove":"3u9dj","../hooks/useRefs":"bzXIE","./AddButton":"5cbyx","../hooks/useSyncState":"ahT9T","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"j1QfD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _toArray = require("rc-util/es/Children/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _warning = require("rc-util/es/warning");
var _singleObserver = require("./SingleObserver");
var _singleObserverDefault = parcelHelpers.interopDefault(_singleObserver);
var _collection = require("./Collection");
var INTERNAL_PREFIX_KEY = 'rc-observer-key';
function ResizeObserver(props) {
    var children = props.children;
    var childNodes = typeof children === 'function' ? [
        children
    ] : _toArrayDefault.default(children);
    if (childNodes.length > 1) _warning.warning(false, 'Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.');
    else if (childNodes.length === 0) _warning.warning(false, '`children` of ResizeObserver is empty. Nothing is in observe.');
    return childNodes.map(function(child, index) {
        var key = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index);
        return /*#__PURE__*/ _react.createElement(_singleObserverDefault.default, _extendsDefault.default({}, props, {
            key: key
        }), child);
    });
}
ResizeObserver.Collection = _collection.Collection;
exports.default = ResizeObserver;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","rc-util/es/Children/toArray":"ijisy","rc-util/es/warning":"bfz97","./SingleObserver":"1A1pB","./Collection":"eq37V","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1A1pB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _ref = require("rc-util/es/ref");
var _react = require("react");
var _findDOMNode = require("rc-util/es/Dom/findDOMNode");
var _findDOMNodeDefault = parcelHelpers.interopDefault(_findDOMNode);
var _observerUtil = require("../utils/observerUtil");
var _domWrapper = require("./DomWrapper");
var _domWrapperDefault = parcelHelpers.interopDefault(_domWrapper);
var _collection = require("../Collection");
function SingleObserver(props) {
    var children = props.children, disabled = props.disabled;
    var elementRef = _react.useRef(null);
    var wrapperRef = _react.useRef(null);
    var onCollectionResize = _react.useContext(_collection.CollectionContext); // =========================== Children ===========================
    var isRenderProps = typeof children === 'function';
    var mergedChildren = isRenderProps ? children(elementRef) : children; // ============================= Size =============================
    var sizeRef = _react.useRef({
        width: -1,
        height: -1,
        offsetWidth: -1,
        offsetHeight: -1
    }); // ============================= Ref ==============================
    var canRef = !isRenderProps && /*#__PURE__*/ _react.isValidElement(mergedChildren) && _ref.supportRef(mergedChildren);
    var originRef = canRef ? mergedChildren.ref : null;
    var mergedRef = _react.useMemo(function() {
        return _ref.composeRef(originRef, elementRef);
    }, [
        originRef,
        elementRef
    ]); // =========================== Observe ============================
    var propsRef = _react.useRef(props);
    propsRef.current = props; // Handler
    var onInternalResize = _react.useCallback(function(target) {
        var _propsRef$current = propsRef.current, onResize = _propsRef$current.onResize, data = _propsRef$current.data;
        var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
        var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
        /**
     * Resize observer trigger when content size changed.
     * In most case we just care about element size,
     * let's use `boundary` instead of `contentRect` here to avoid shaking.
     */ var fixedWidth = Math.floor(width);
        var fixedHeight = Math.floor(height);
        if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
            var size = {
                width: fixedWidth,
                height: fixedHeight,
                offsetWidth: offsetWidth,
                offsetHeight: offsetHeight
            };
            sizeRef.current = size; // IE is strange, right?
            var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
            var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
            var sizeInfo = _objectSpread2Default.default(_objectSpread2Default.default({}, size), {}, {
                offsetWidth: mergedOffsetWidth,
                offsetHeight: mergedOffsetHeight
            }); // Let collection know what happened
            onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(sizeInfo, target, data);
            if (onResize) // defer the callback but not defer to next frame
            Promise.resolve().then(function() {
                onResize(sizeInfo, target);
            });
        }
    }, []); // Dynamic observe
    _react.useEffect(function() {
        var currentElement = _findDOMNodeDefault.default(elementRef.current) || _findDOMNodeDefault.default(wrapperRef.current);
        if (currentElement && !disabled) _observerUtil.observe(currentElement, onInternalResize);
        return function() {
            return _observerUtil.unobserve(currentElement, onInternalResize);
        };
    }, [
        elementRef.current,
        disabled
    ]); // ============================ Render ============================
    return /*#__PURE__*/ _react.createElement(_domWrapperDefault.default, {
        ref: wrapperRef
    }, canRef ? /*#__PURE__*/ _react.cloneElement(mergedChildren, {
        ref: mergedRef
    }) : mergedChildren);
}
exports.default = SingleObserver;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","rc-util/es/ref":"bvnCQ","react":"b4tPL","rc-util/es/Dom/findDOMNode":"dwUfQ","../utils/observerUtil":"1Cqcf","./DomWrapper":"cWNxf","../Collection":"eq37V","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1Cqcf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_el", ()=>_el
);
parcelHelpers.export(exports, "_rs", ()=>_rs
);
// ============================== Observe ==============================
parcelHelpers.export(exports, "observe", ()=>observe
);
parcelHelpers.export(exports, "unobserve", ()=>unobserve
);
var _resizeObserverPolyfill = require("resize-observer-polyfill"); // =============================== Const ===============================
var _resizeObserverPolyfillDefault = parcelHelpers.interopDefault(_resizeObserverPolyfill);
var elementListeners = new Map();
function onResize(entities) {
    entities.forEach(function(entity) {
        var _elementListeners$get;
        var target = entity.target;
        (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 || _elementListeners$get.forEach(function(listener) {
            return listener(target);
        });
    });
} // Note: ResizeObserver polyfill not support option to measure border-box resize
var resizeObserver = new _resizeObserverPolyfillDefault.default(onResize); // Dev env only
var _el = elementListeners; // eslint-disable-line
var _rs = onResize; // eslint-disable-line
function observe(element, callback) {
    if (!elementListeners.has(element)) {
        elementListeners.set(element, new Set());
        resizeObserver.observe(element);
    }
    elementListeners.get(element).add(callback);
}
function unobserve(element, callback) {
    if (elementListeners.has(element)) {
        elementListeners.get(element).delete(callback);
        if (!elementListeners.get(element).size) {
            resizeObserver.unobserve(element);
            elementListeners.delete(element);
        }
    }
}

},{"resize-observer-polyfill":"30EOW","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"30EOW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */ /* eslint-disable require-jsdoc, valid-jsdoc */ var MapShim = function() {
    if (typeof Map !== 'undefined') return Map;
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */ function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index1) {
            if (entry[0] === key) {
                result = index1;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ function() {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */ get: function() {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */ class_1.prototype.get = function(key) {
            var index2 = getIndex(this.__entries__, key);
            var entry = this.__entries__[index2];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */ class_1.prototype.set = function(key, value) {
            var index3 = getIndex(this.__entries__, key);
            if (~index3) this.__entries__[index3][1] = value;
            else this.__entries__.push([
                key,
                value
            ]);
        };
        /**
         * @param {*} key
         * @returns {void}
         */ class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index4 = getIndex(entries, key);
            if (~index4) entries.splice(index4, 1);
        };
        /**
         * @param {*} key
         * @returns {void}
         */ class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */ class_1.prototype.clear = function() {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */ class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) ctx = null;
            for(var _i = 0, _a = this.__entries__; _i < _a.length; _i++){
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }();
}();
/**
 * Detects whether window and document objects are available in current environment.
 */ var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
// Returns global object of a current environment.
var global$1 = function() {
    if (typeof global !== 'undefined' && global.Math === Math) return global;
    if (typeof self !== 'undefined' && self.Math === Math) return self;
    if (typeof window !== 'undefined' && window.Math === Math) return window;
    // eslint-disable-next-line no-new-func
    return Function('return this')();
}();
/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */ var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === 'function') // It's required to use a bounded function because IE sometimes throws
    // an "Invalid calling object" error if rAF is invoked without the global
    // object on the left hand side.
    return requestAnimationFrame.bind(global$1);
    return function(callback) {
        return setTimeout(function() {
            return callback(Date.now());
        }, 1000 / 60);
    };
}();
// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */ function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */ function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) proxy();
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */ function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */ function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) return;
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        } else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}
// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = [
    'top',
    'right',
    'bottom',
    'left',
    'width',
    'height',
    'size',
    'weight'
];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */ var ResizeObserverController = /** @class */ function() {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */ function ResizeObserverController1() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */ this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */ this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */ this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */ this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */ ResizeObserverController1.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) this.observers_.push(observer);
        // Add listeners if they haven't been added yet.
        if (!this.connected_) this.connect_();
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */ ResizeObserverController1.prototype.removeObserver = function(observer) {
        var observers1 = this.observers_;
        var index5 = observers1.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index5) observers1.splice(index5, 1);
        // Remove listeners if controller has no connected observers.
        if (!observers1.length && this.connected_) this.disconnect_();
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */ ResizeObserverController1.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) this.refresh();
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */ ResizeObserverController1.prototype.updateObservers_ = function() {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function(observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function(observer) {
            return observer.broadcastActive();
        });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */ ResizeObserverController1.prototype.connect_ = function() {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) return;
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        } else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */ ResizeObserverController1.prototype.disconnect_ = function() {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) return;
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) this.mutationsObserver_.disconnect();
        if (this.mutationEventsAdded_) document.removeEventListener('DOMSubtreeModified', this.refresh);
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */ ResizeObserverController1.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function(key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) this.refresh();
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */ ResizeObserverController1.getInstance = function() {
        if (!this.instance_) this.instance_ = new ResizeObserverController1();
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */ ResizeObserverController1.instance_ = null;
    return ResizeObserverController1;
}();
/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */ var defineConfigurable = function(target, props) {
    for(var _i = 0, _a = Object.keys(props); _i < _a.length; _i++){
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
};
/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */ var getWindowOf = function(target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
};
// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */ function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */ function getBordersSize(styles) {
    var positions = [];
    for(var _i = 1; _i < arguments.length; _i++)positions[_i - 1] = arguments[_i];
    return positions.reduce(function(size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */ function getPaddings(styles) {
    var positions = [
        'top',
        'right',
        'bottom',
        'left'
    ];
    var paddings = {};
    for(var _i = 0, positions_1 = positions; _i < positions_1.length; _i++){
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */ function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */ function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) return emptyRect;
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) width -= getBordersSize(styles, 'left', 'right') + horizPad;
        if (Math.round(height + vertPad) !== clientHeight) height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) width -= vertScrollbar;
        if (Math.abs(horizScrollbar) !== 1) height -= horizScrollbar;
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */ var isSVGGraphicsElement = function() {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') return function(target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
}();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */ function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */ function getContentRect(target) {
    if (!isBrowser) return emptyRect;
    if (isSVGGraphicsElement(target)) return getSVGContentRect(target);
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */ function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x,
        y: y,
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */ function createRectInit(x, y, width, height) {
    return {
        x: x,
        y: y,
        width: width,
        height: height
    };
}
/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */ var ResizeObservation = /** @class */ function() {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */ function ResizeObservation1(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */ this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */ this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */ this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */ ResizeObservation1.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */ ResizeObservation1.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation1;
}();
var ResizeObserverEntry = /** @class */ function() {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */ function ResizeObserverEntry1(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, {
            target: target,
            contentRect: contentRect
        });
    }
    return ResizeObserverEntry1;
}();
var ResizeObserverSPI = /** @class */ function() {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */ function ResizeObserverSPI1(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */ this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */ this.observations_ = new MapShim();
        if (typeof callback !== 'function') throw new TypeError('The callback provided as parameter 1 is not a function.');
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */ ResizeObserverSPI1.prototype.observe = function(target) {
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) return;
        if (!(target instanceof getWindowOf(target).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) return;
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */ ResizeObserverSPI1.prototype.unobserve = function(target) {
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) return;
        if (!(target instanceof getWindowOf(target).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) return;
        observations.delete(target);
        if (!observations.size) this.controller_.removeObserver(this);
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */ ResizeObserverSPI1.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */ ResizeObserverSPI1.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
            if (observation.isActive()) _this.activeObservations_.push(observation);
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */ ResizeObserverSPI1.prototype.broadcastActive = function() {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) return;
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function(observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */ ResizeObserverSPI1.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */ ResizeObserverSPI1.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI1;
}();
// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */ var ResizeObserver = /** @class */ function() {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */ function ResizeObserver1(callback) {
        if (!(this instanceof ResizeObserver1)) throw new TypeError('Cannot call a class as a function.');
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver1;
}();
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function(method) {
    ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});
var index = function() {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') return global$1.ResizeObserver;
    return ResizeObserver;
}();
exports.default = index;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cWNxf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>DomWrapper
);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
/**
 * Fallback to findDOMNode if origin ref do not provide any dom element
 */ var DomWrapper = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(DomWrapper1, _React$Component);
    var _super = _createSuperDefault.default(DomWrapper1);
    function DomWrapper1() {
        _classCallCheckDefault.default(this, DomWrapper1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(DomWrapper1, [
        {
            key: "render",
            value: function render() {
                return this.props.children;
            }
        }
    ]);
    return DomWrapper1;
}(_react.Component);

},{"@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eq37V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CollectionContext", ()=>CollectionContext
);
/**
 * Collect all the resize event from children ResizeObserver
 */ parcelHelpers.export(exports, "Collection", ()=>Collection
);
var _react = require("react");
var CollectionContext = /*#__PURE__*/ _react.createContext(null);
function Collection(_ref) {
    var children = _ref.children, onBatchResize = _ref.onBatchResize;
    var resizeIdRef = _react.useRef(0);
    var resizeInfosRef = _react.useRef([]);
    var onCollectionResize = _react.useContext(CollectionContext);
    var onResize = _react.useCallback(function(size, element, data) {
        resizeIdRef.current += 1;
        var currentId = resizeIdRef.current;
        resizeInfosRef.current.push({
            size: size,
            element: element,
            data: data
        });
        Promise.resolve().then(function() {
            if (currentId === resizeIdRef.current) {
                onBatchResize === null || onBatchResize === void 0 || onBatchResize(resizeInfosRef.current);
                resizeInfosRef.current = [];
            }
        }); // Continue bubbling if parent exist
        onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(size, element, data);
    }, [
        onBatchResize,
        onCollectionResize
    ]);
    return /*#__PURE__*/ _react.createElement(CollectionContext.Provider, {
        value: onResize
    }, children);
}

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bjLPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRafState", ()=>useRafState
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
function useRaf(callback) {
    var rafRef = _react.useRef();
    var removedRef = _react.useRef(false);
    function trigger() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        if (!removedRef.current) {
            _rafDefault.default.cancel(rafRef.current);
            rafRef.current = _rafDefault.default(function() {
                callback.apply(void 0, args);
            });
        }
    }
    _react.useEffect(function() {
        return function() {
            removedRef.current = true;
            _rafDefault.default.cancel(rafRef.current);
        };
    }, []);
    return trigger;
}
exports.default = useRaf;
function useRafState(defaultState) {
    var batchRef = _react.useRef([]);
    var _useState = _react.useState({}), _useState2 = _slicedToArrayDefault.default(_useState, 2), forceUpdate = _useState2[1];
    var state = _react.useRef(typeof defaultState === 'function' ? defaultState() : defaultState);
    var flushUpdate = useRaf(function() {
        var current = state.current;
        batchRef.current.forEach(function(callback) {
            current = callback(current);
        });
        batchRef.current = [];
        state.current = current;
        forceUpdate({});
    });
    function updater(callback) {
        batchRef.current.push(callback);
        flushUpdate();
    }
    return [
        state.current,
        updater
    ];
}

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/raf":"h9LA9","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bOFy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
function TabNode(_ref, ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, id = _ref.id, active = _ref.active, _ref$tab = _ref.tab, key = _ref$tab.key, tab = _ref$tab.tab, disabled = _ref$tab.disabled, closeIcon = _ref$tab.closeIcon, closable = _ref.closable, renderWrapper = _ref.renderWrapper, removeAriaLabel = _ref.removeAriaLabel, editable = _ref.editable, onClick = _ref.onClick, onRemove = _ref.onRemove, onFocus = _ref.onFocus, style = _ref.style;
    var tabPrefix = "".concat(prefixCls, "-tab");
    _react.useEffect(function() {
        return onRemove;
    }, []);
    var removable = editable && closable !== false && !disabled;
    function onInternalClick(e) {
        if (disabled) return;
        onClick(e);
    }
    function onRemoveTab(event) {
        event.preventDefault();
        event.stopPropagation();
        editable.onEdit('remove', {
            key: key,
            event: event
        });
    }
    var node = /*#__PURE__*/ _react.createElement("div", {
        key: key,
        ref: ref,
        className: _classnamesDefault.default(tabPrefix, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(tabPrefix, "-with-remove"), removable), _definePropertyDefault.default(_classNames, "".concat(tabPrefix, "-active"), active), _definePropertyDefault.default(_classNames, "".concat(tabPrefix, "-disabled"), disabled), _classNames)),
        style: style,
        onClick: onInternalClick
    }, /*#__PURE__*/ _react.createElement("div", {
        role: "tab",
        "aria-selected": active,
        id: id && "".concat(id, "-tab-").concat(key),
        className: "".concat(tabPrefix, "-btn"),
        "aria-controls": id && "".concat(id, "-panel-").concat(key),
        "aria-disabled": disabled,
        tabIndex: disabled ? null : 0,
        onClick: function onClick(e) {
            e.stopPropagation();
            onInternalClick(e);
        },
        onKeyDown: function onKeyDown(e) {
            if ([
                _keyCodeDefault.default.SPACE,
                _keyCodeDefault.default.ENTER
            ].includes(e.which)) {
                e.preventDefault();
                onInternalClick(e);
            }
        },
        onFocus: onFocus
    }, tab), removable && /*#__PURE__*/ _react.createElement("button", {
        type: "button",
        "aria-label": removeAriaLabel || 'remove',
        tabIndex: 0,
        className: "".concat(tabPrefix, "-remove"),
        onClick: function onClick(e) {
            e.stopPropagation();
            onRemoveTab(e);
        }
    }, closeIcon || editable.removeIcon || '×'));
    return renderWrapper ? renderWrapper(node) : node;
}
exports.default = /*#__PURE__*/ _react.forwardRef(TabNode);

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","rc-util/es/KeyCode":"1ukEC","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1ukEC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @ignore
 * some key-codes definition and utils from closure-library
 * @author yiminghe@gmail.com
 */ var KeyCode = {
    /**
   * MAC_ENTER
   */ MAC_ENTER: 3,
    /**
   * BACKSPACE
   */ BACKSPACE: 8,
    /**
   * TAB
   */ TAB: 9,
    /**
   * NUMLOCK on FF/Safari Mac
   */ NUM_CENTER: 12,
    /**
   * ENTER
   */ ENTER: 13,
    /**
   * SHIFT
   */ SHIFT: 16,
    /**
   * CTRL
   */ CTRL: 17,
    /**
   * ALT
   */ ALT: 18,
    /**
   * PAUSE
   */ PAUSE: 19,
    /**
   * CAPS_LOCK
   */ CAPS_LOCK: 20,
    /**
   * ESC
   */ ESC: 27,
    /**
   * SPACE
   */ SPACE: 32,
    /**
   * PAGE_UP
   */ PAGE_UP: 33,
    /**
   * PAGE_DOWN
   */ PAGE_DOWN: 34,
    /**
   * END
   */ END: 35,
    /**
   * HOME
   */ HOME: 36,
    /**
   * LEFT
   */ LEFT: 37,
    /**
   * UP
   */ UP: 38,
    /**
   * RIGHT
   */ RIGHT: 39,
    /**
   * DOWN
   */ DOWN: 40,
    /**
   * PRINT_SCREEN
   */ PRINT_SCREEN: 44,
    /**
   * INSERT
   */ INSERT: 45,
    /**
   * DELETE
   */ DELETE: 46,
    /**
   * ZERO
   */ ZERO: 48,
    /**
   * ONE
   */ ONE: 49,
    /**
   * TWO
   */ TWO: 50,
    /**
   * THREE
   */ THREE: 51,
    /**
   * FOUR
   */ FOUR: 52,
    /**
   * FIVE
   */ FIVE: 53,
    /**
   * SIX
   */ SIX: 54,
    /**
   * SEVEN
   */ SEVEN: 55,
    /**
   * EIGHT
   */ EIGHT: 56,
    /**
   * NINE
   */ NINE: 57,
    /**
   * QUESTION_MARK
   */ QUESTION_MARK: 63,
    /**
   * A
   */ A: 65,
    /**
   * B
   */ B: 66,
    /**
   * C
   */ C: 67,
    /**
   * D
   */ D: 68,
    /**
   * E
   */ E: 69,
    /**
   * F
   */ F: 70,
    /**
   * G
   */ G: 71,
    /**
   * H
   */ H: 72,
    /**
   * I
   */ I: 73,
    /**
   * J
   */ J: 74,
    /**
   * K
   */ K: 75,
    /**
   * L
   */ L: 76,
    /**
   * M
   */ M: 77,
    /**
   * N
   */ N: 78,
    /**
   * O
   */ O: 79,
    /**
   * P
   */ P: 80,
    /**
   * Q
   */ Q: 81,
    /**
   * R
   */ R: 82,
    /**
   * S
   */ S: 83,
    /**
   * T
   */ T: 84,
    /**
   * U
   */ U: 85,
    /**
   * V
   */ V: 86,
    /**
   * W
   */ W: 87,
    /**
   * X
   */ X: 88,
    /**
   * Y
   */ Y: 89,
    /**
   * Z
   */ Z: 90,
    /**
   * META
   */ META: 91,
    /**
   * WIN_KEY_RIGHT
   */ WIN_KEY_RIGHT: 92,
    /**
   * CONTEXT_MENU
   */ CONTEXT_MENU: 93,
    /**
   * NUM_ZERO
   */ NUM_ZERO: 96,
    /**
   * NUM_ONE
   */ NUM_ONE: 97,
    /**
   * NUM_TWO
   */ NUM_TWO: 98,
    /**
   * NUM_THREE
   */ NUM_THREE: 99,
    /**
   * NUM_FOUR
   */ NUM_FOUR: 100,
    /**
   * NUM_FIVE
   */ NUM_FIVE: 101,
    /**
   * NUM_SIX
   */ NUM_SIX: 102,
    /**
   * NUM_SEVEN
   */ NUM_SEVEN: 103,
    /**
   * NUM_EIGHT
   */ NUM_EIGHT: 104,
    /**
   * NUM_NINE
   */ NUM_NINE: 105,
    /**
   * NUM_MULTIPLY
   */ NUM_MULTIPLY: 106,
    /**
   * NUM_PLUS
   */ NUM_PLUS: 107,
    /**
   * NUM_MINUS
   */ NUM_MINUS: 109,
    /**
   * NUM_PERIOD
   */ NUM_PERIOD: 110,
    /**
   * NUM_DIVISION
   */ NUM_DIVISION: 111,
    /**
   * F1
   */ F1: 112,
    /**
   * F2
   */ F2: 113,
    /**
   * F3
   */ F3: 114,
    /**
   * F4
   */ F4: 115,
    /**
   * F5
   */ F5: 116,
    /**
   * F6
   */ F6: 117,
    /**
   * F7
   */ F7: 118,
    /**
   * F8
   */ F8: 119,
    /**
   * F9
   */ F9: 120,
    /**
   * F10
   */ F10: 121,
    /**
   * F11
   */ F11: 122,
    /**
   * F12
   */ F12: 123,
    /**
   * NUMLOCK
   */ NUMLOCK: 144,
    /**
   * SEMICOLON
   */ SEMICOLON: 186,
    /**
   * DASH
   */ DASH: 189,
    /**
   * EQUALS
   */ EQUALS: 187,
    /**
   * COMMA
   */ COMMA: 188,
    /**
   * PERIOD
   */ PERIOD: 190,
    /**
   * SLASH
   */ SLASH: 191,
    /**
   * APOSTROPHE
   */ APOSTROPHE: 192,
    /**
   * SINGLE_QUOTE
   */ SINGLE_QUOTE: 222,
    /**
   * OPEN_SQUARE_BRACKET
   */ OPEN_SQUARE_BRACKET: 219,
    /**
   * BACKSLASH
   */ BACKSLASH: 220,
    /**
   * CLOSE_SQUARE_BRACKET
   */ CLOSE_SQUARE_BRACKET: 221,
    /**
   * WIN_KEY
   */ WIN_KEY: 224,
    /**
   * MAC_FF_META
   */ MAC_FF_META: 224,
    /**
   * WIN_IME
   */ WIN_IME: 229,
    // ======================== Function ========================
    /**
   * whether text and modified key is entered at the same time.
   */ isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
        var keyCode = e.keyCode;
        if (e.altKey && !e.ctrlKey || e.metaKey || keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) return false;
         // The following keys are quite harmless, even in combination with
        // CTRL, ALT or SHIFT.
        switch(keyCode){
            case KeyCode.ALT:
            case KeyCode.CAPS_LOCK:
            case KeyCode.CONTEXT_MENU:
            case KeyCode.CTRL:
            case KeyCode.DOWN:
            case KeyCode.END:
            case KeyCode.ESC:
            case KeyCode.HOME:
            case KeyCode.INSERT:
            case KeyCode.LEFT:
            case KeyCode.MAC_FF_META:
            case KeyCode.META:
            case KeyCode.NUMLOCK:
            case KeyCode.NUM_CENTER:
            case KeyCode.PAGE_DOWN:
            case KeyCode.PAGE_UP:
            case KeyCode.PAUSE:
            case KeyCode.PRINT_SCREEN:
            case KeyCode.RIGHT:
            case KeyCode.SHIFT:
            case KeyCode.UP:
            case KeyCode.WIN_KEY:
            case KeyCode.WIN_KEY_RIGHT:
                return false;
            default:
                return true;
        }
    },
    /**
   * whether character is entered.
   */ isCharacterKey: function isCharacterKey(keyCode) {
        if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) return true;
        if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) return true;
        if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) return true;
         // Safari sends zero key code for non-latin characters.
        if (window.navigator.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) return true;
        switch(keyCode){
            case KeyCode.SPACE:
            case KeyCode.QUESTION_MARK:
            case KeyCode.NUM_PLUS:
            case KeyCode.NUM_MINUS:
            case KeyCode.NUM_PERIOD:
            case KeyCode.NUM_DIVISION:
            case KeyCode.SEMICOLON:
            case KeyCode.DASH:
            case KeyCode.EQUALS:
            case KeyCode.COMMA:
            case KeyCode.PERIOD:
            case KeyCode.SLASH:
            case KeyCode.APOSTROPHE:
            case KeyCode.SINGLE_QUOTE:
            case KeyCode.OPEN_SQUARE_BRACKET:
            case KeyCode.BACKSLASH:
            case KeyCode.CLOSE_SQUARE_BRACKET:
                return true;
            default:
                return false;
        }
    }
};
exports.default = KeyCode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cOHyK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var DEFAULT_SIZE = {
    width: 0,
    height: 0,
    left: 0,
    top: 0
};
function useOffsets(tabs, tabSizes, holderScrollWidth) {
    return _react.useMemo(function() {
        var _tabs$;
        var map = new Map();
        var lastOffset = tabSizes.get((_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key) || DEFAULT_SIZE;
        var rightOffset = lastOffset.left + lastOffset.width;
        for(var i = 0; i < tabs.length; i += 1){
            var key = tabs[i].key;
            var data = tabSizes.get(key); // Reuse last one when not exist yet
            if (!data) {
                var _tabs;
                data = tabSizes.get((_tabs = tabs[i - 1]) === null || _tabs === void 0 ? void 0 : _tabs.key) || DEFAULT_SIZE;
            }
            var entity = map.get(key) || _objectSpread2Default.default({}, data); // Right
            entity.right = rightOffset - entity.left - entity.width; // Update entity
            map.set(key, entity);
        }
        return map;
    }, [
        tabs.map(function(tab) {
            return tab.key;
        }).join('_'),
        tabSizes,
        holderScrollWidth
    ]);
}
exports.default = useOffsets;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9r3VR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var DEFAULT_SIZE = {
    width: 0,
    height: 0,
    left: 0,
    top: 0,
    right: 0
};
function useVisibleRange(tabOffsets, containerSize, tabContentNodeSize, addNodeSize, _ref) {
    var tabs = _ref.tabs, tabPosition = _ref.tabPosition, rtl = _ref.rtl;
    var unit;
    var position;
    var transformSize;
    if ([
        'top',
        'bottom'
    ].includes(tabPosition)) {
        unit = 'width';
        position = rtl ? 'right' : 'left';
        transformSize = Math.abs(containerSize.left);
    } else {
        unit = 'height';
        position = 'top';
        transformSize = -containerSize.top;
    }
    var basicSize = containerSize[unit];
    var tabContentSize = tabContentNodeSize[unit];
    var addSize = addNodeSize[unit];
    var mergedBasicSize = basicSize;
    if (tabContentSize + addSize > basicSize && tabContentSize < basicSize) mergedBasicSize = basicSize - addSize;
    return _react.useMemo(function() {
        if (!tabs.length) return [
            0,
            0
        ];
        var len = tabs.length;
        var endIndex = len;
        for(var i = 0; i < len; i += 1){
            var offset = tabOffsets.get(tabs[i].key) || DEFAULT_SIZE;
            if (offset[position] + offset[unit] > transformSize + mergedBasicSize) {
                endIndex = i - 1;
                break;
            }
        }
        var startIndex = 0;
        for(var _i = len - 1; _i >= 0; _i -= 1){
            var _offset = tabOffsets.get(tabs[_i].key) || DEFAULT_SIZE;
            if (_offset[position] < transformSize) {
                startIndex = _i + 1;
                break;
            }
        }
        return [
            startIndex,
            endIndex
        ];
    }, [
        tabOffsets,
        transformSize,
        mergedBasicSize,
        tabPosition,
        tabs.map(function(tab) {
            return tab.key;
        }).join('_'),
        rtl
    ]);
}
exports.default = useVisibleRange;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6mSxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
var _rcMenu = require("rc-menu");
var _rcMenuDefault = parcelHelpers.interopDefault(_rcMenu);
var _rcDropdown = require("rc-dropdown");
var _rcDropdownDefault = parcelHelpers.interopDefault(_rcDropdown);
var _addButton = require("./AddButton");
var _addButtonDefault = parcelHelpers.interopDefault(_addButton);
function OperationNode(_ref, ref) {
    var prefixCls = _ref.prefixCls, id = _ref.id, tabs = _ref.tabs, locale = _ref.locale, mobile = _ref.mobile, _ref$moreIcon = _ref.moreIcon, moreIcon = _ref$moreIcon === void 0 ? 'More' : _ref$moreIcon, moreTransitionName = _ref.moreTransitionName, style = _ref.style, className = _ref.className, editable = _ref.editable, tabBarGutter = _ref.tabBarGutter, rtl = _ref.rtl, removeAriaLabel = _ref.removeAriaLabel, onTabClick = _ref.onTabClick;
    // ======================== Dropdown ========================
    var _useState = _react.useState(false), _useState2 = _slicedToArrayDefault.default(_useState, 2), open = _useState2[0], setOpen = _useState2[1];
    var _useState3 = _react.useState(null), _useState4 = _slicedToArrayDefault.default(_useState3, 2), selectedKey = _useState4[0], setSelectedKey = _useState4[1];
    var popupId = "".concat(id, "-more-popup");
    var dropdownPrefix = "".concat(prefixCls, "-dropdown");
    var selectedItemId = selectedKey !== null ? "".concat(popupId, "-").concat(selectedKey) : null;
    var dropdownAriaLabel = locale === null || locale === void 0 ? void 0 : locale.dropdownAriaLabel;
    function onRemoveTab(event, key) {
        event.preventDefault();
        event.stopPropagation();
        editable.onEdit('remove', {
            key: key,
            event: event
        });
    }
    var menu = /*#__PURE__*/ _react.createElement(_rcMenuDefault.default, {
        onClick: function onClick(_ref2) {
            var key = _ref2.key, domEvent = _ref2.domEvent;
            onTabClick(key, domEvent);
            setOpen(false);
        },
        id: popupId,
        tabIndex: -1,
        role: "listbox",
        "aria-activedescendant": selectedItemId,
        selectedKeys: [
            selectedKey
        ],
        "aria-label": dropdownAriaLabel !== undefined ? dropdownAriaLabel : 'expanded dropdown'
    }, tabs.map(function(tab) {
        var removable = editable && tab.closable !== false && !tab.disabled;
        return /*#__PURE__*/ _react.createElement(_rcMenu.MenuItem, {
            key: tab.key,
            id: "".concat(popupId, "-").concat(tab.key),
            role: "option",
            "aria-controls": id && "".concat(id, "-panel-").concat(tab.key),
            disabled: tab.disabled
        }, /*#__PURE__*/ _react.createElement("span", null, tab.tab), removable && /*#__PURE__*/ _react.createElement("button", {
            type: "button",
            "aria-label": removeAriaLabel || 'remove',
            tabIndex: 0,
            className: "".concat(dropdownPrefix, "-menu-item-remove"),
            onClick: function onClick(e) {
                e.stopPropagation();
                onRemoveTab(e, tab.key);
            }
        }, tab.closeIcon || editable.removeIcon || '×'));
    }));
    function selectOffset(offset) {
        var enabledTabs = tabs.filter(function(tab) {
            return !tab.disabled;
        });
        var selectedIndex = enabledTabs.findIndex(function(tab) {
            return tab.key === selectedKey;
        }) || 0;
        var len = enabledTabs.length;
        for(var i = 0; i < len; i += 1){
            selectedIndex = (selectedIndex + offset + len) % len;
            var tab1 = enabledTabs[selectedIndex];
            if (!tab1.disabled) {
                setSelectedKey(tab1.key);
                return;
            }
        }
    }
    function onKeyDown(e) {
        var which = e.which;
        if (!open) {
            if ([
                _keyCodeDefault.default.DOWN,
                _keyCodeDefault.default.SPACE,
                _keyCodeDefault.default.ENTER
            ].includes(which)) {
                setOpen(true);
                e.preventDefault();
            }
            return;
        }
        switch(which){
            case _keyCodeDefault.default.UP:
                selectOffset(-1);
                e.preventDefault();
                break;
            case _keyCodeDefault.default.DOWN:
                selectOffset(1);
                e.preventDefault();
                break;
            case _keyCodeDefault.default.ESC:
                setOpen(false);
                break;
            case _keyCodeDefault.default.SPACE:
            case _keyCodeDefault.default.ENTER:
                if (selectedKey !== null) onTabClick(selectedKey, e);
                break;
        }
    } // ========================= Effect =========================
    _react.useEffect(function() {
        // We use query element here to avoid React strict warning
        var ele = document.getElementById(selectedItemId);
        if (ele && ele.scrollIntoView) ele.scrollIntoView(false);
    }, [
        selectedKey
    ]);
    _react.useEffect(function() {
        if (!open) setSelectedKey(null);
    }, [
        open
    ]); // ========================= Render =========================
    var moreStyle = _definePropertyDefault.default({}, rtl ? 'marginRight' : 'marginLeft', tabBarGutter);
    if (!tabs.length) {
        moreStyle.visibility = 'hidden';
        moreStyle.order = 1;
    }
    var overlayClassName = _classnamesDefault.default(_definePropertyDefault.default({}, "".concat(dropdownPrefix, "-rtl"), rtl));
    var moreNode = mobile ? null : /*#__PURE__*/ _react.createElement(_rcDropdownDefault.default, {
        prefixCls: dropdownPrefix,
        overlay: menu,
        trigger: [
            'hover'
        ],
        visible: open,
        transitionName: moreTransitionName,
        onVisibleChange: setOpen,
        overlayClassName: overlayClassName,
        mouseEnterDelay: 0.1,
        mouseLeaveDelay: 0.1
    }, /*#__PURE__*/ _react.createElement("button", {
        type: "button",
        className: "".concat(prefixCls, "-nav-more"),
        style: moreStyle,
        tabIndex: -1,
        "aria-hidden": "true",
        "aria-haspopup": "listbox",
        "aria-controls": popupId,
        id: "".concat(id, "-more"),
        "aria-expanded": open,
        onKeyDown: onKeyDown
    }, moreIcon));
    return /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-nav-operations"), className),
        style: style,
        ref: ref
    }, moreNode, /*#__PURE__*/ _react.createElement(_addButtonDefault.default, {
        prefixCls: prefixCls,
        locale: locale,
        editable: editable
    }));
}
exports.default = /*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(OperationNode), function(_, next) {
    return(// We'd better remove syntactic sugar in `rc-menu` since this has perf issue
    next.tabMoving);
});

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","rc-util/es/KeyCode":"1ukEC","rc-menu":"iesKx","rc-dropdown":"eoMNg","./AddButton":"5cbyx","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iesKx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SubMenu", ()=>_subMenuDefault.default
);
parcelHelpers.export(exports, "Item", ()=>_menuItemDefault.default
);
parcelHelpers.export(exports, "MenuItem", ()=>_menuItemDefault.default
);
parcelHelpers.export(exports, "MenuItemGroup", ()=>_menuItemGroupDefault.default
);
parcelHelpers.export(exports, "ItemGroup", ()=>_menuItemGroupDefault.default
);
parcelHelpers.export(exports, "Divider", ()=>_dividerDefault.default
);
parcelHelpers.export(exports, "useFullPath", ()=>useFullPath
);
var _menu = require("./Menu");
var _menuDefault = parcelHelpers.interopDefault(_menu);
var _menuItem = require("./MenuItem");
var _menuItemDefault = parcelHelpers.interopDefault(_menuItem);
var _subMenu = require("./SubMenu");
var _subMenuDefault = parcelHelpers.interopDefault(_subMenu);
var _menuItemGroup = require("./MenuItemGroup");
var _menuItemGroupDefault = parcelHelpers.interopDefault(_menuItemGroup);
var _pathContext = require("./context/PathContext");
var _divider = require("./Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
/** @private Only used for antd internal. Do not use in your production. */ var useFullPath = _pathContext.useFullPath;
var ExportMenu = _menuDefault.default;
ExportMenu.Item = _menuItemDefault.default;
ExportMenu.SubMenu = _subMenuDefault.default;
ExportMenu.ItemGroup = _menuItemGroupDefault.default;
ExportMenu.Divider = _dividerDefault.default;
exports.default = ExportMenu;

},{"./Menu":"e1cIu","./MenuItem":"h5CTZ","./SubMenu":"jhkE2","./MenuItemGroup":"2WAOh","./context/PathContext":"4UY6b","./Divider":"kvl59","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"e1cIu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _shallowequal = require("shallowequal");
var _shallowequalDefault = parcelHelpers.interopDefault(_shallowequal);
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _rcOverflow = require("rc-overflow");
var _rcOverflowDefault = parcelHelpers.interopDefault(_rcOverflow);
var _menuItem = require("./MenuItem");
var _menuItemDefault = parcelHelpers.interopDefault(_menuItem);
var _nodeUtil = require("./utils/nodeUtil");
var _menuContext = require("./context/MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _useMemoCallback = require("./hooks/useMemoCallback");
var _useMemoCallbackDefault = parcelHelpers.interopDefault(_useMemoCallback);
var _warnUtil = require("./utils/warnUtil");
var _subMenu = require("./SubMenu");
var _subMenuDefault = parcelHelpers.interopDefault(_subMenu);
var _useAccessibility = require("./hooks/useAccessibility");
var _useAccessibilityDefault = parcelHelpers.interopDefault(_useAccessibility);
var _useUUID = require("./hooks/useUUID");
var _useUUIDDefault = parcelHelpers.interopDefault(_useUUID);
var _pathContext = require("./context/PathContext");
var _useKeyRecords = require("./hooks/useKeyRecords");
var _useKeyRecordsDefault = parcelHelpers.interopDefault(_useKeyRecords);
var _idContext = require("./context/IdContext");
var _privateContext = require("./context/PrivateContext");
var _privateContextDefault = parcelHelpers.interopDefault(_privateContext);
var _ref = require("rc-util/es/ref");
var _excluded = [
    "prefixCls",
    "style",
    "className",
    "tabIndex",
    "children",
    "direction",
    "id",
    "mode",
    "inlineCollapsed",
    "disabled",
    "disabledOverflow",
    "subMenuOpenDelay",
    "subMenuCloseDelay",
    "forceSubMenuRender",
    "defaultOpenKeys",
    "openKeys",
    "activeKey",
    "defaultActiveFirst",
    "selectable",
    "multiple",
    "defaultSelectedKeys",
    "selectedKeys",
    "onSelect",
    "onDeselect",
    "inlineIndent",
    "motion",
    "defaultMotions",
    "triggerSubMenuAction",
    "builtinPlacements",
    "itemIcon",
    "expandIcon",
    "overflowedIndicator",
    "overflowedIndicatorPopupClassName",
    "getPopupContainer",
    "onClick",
    "onOpenChange",
    "onKeyDown",
    "openAnimation",
    "openTransitionName",
    "_internalRenderMenuItem",
    "_internalRenderSubMenuItem"
];
/**
 * Menu modify after refactor:
 * ## Add
 * - disabled
 *
 * ## Remove
 * - openTransitionName
 * - openAnimation
 * - onDestroy
 * - siderCollapsed: Seems antd do not use this prop (Need test in antd)
 * - collapsedWidth: Seems this logic should be handle by antd Layout.Sider
 */ // optimize for render
var EMPTY_LIST = [];
var Menu = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _childList$, _classNames;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-menu' : _props$prefixCls, style = props.style, className = props.className, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, children = props.children, direction = props.direction, id = props.id, _props$mode = props.mode, mode = _props$mode === void 0 ? 'vertical' : _props$mode, inlineCollapsed = props.inlineCollapsed, disabled = props.disabled, disabledOverflow = props.disabledOverflow, _props$subMenuOpenDel = props.subMenuOpenDelay, subMenuOpenDelay = _props$subMenuOpenDel === void 0 ? 0.1 : _props$subMenuOpenDel, _props$subMenuCloseDe = props.subMenuCloseDelay, subMenuCloseDelay = _props$subMenuCloseDe === void 0 ? 0.1 : _props$subMenuCloseDe, forceSubMenuRender = props.forceSubMenuRender, defaultOpenKeys = props.defaultOpenKeys, openKeys = props.openKeys, activeKey = props.activeKey, defaultActiveFirst = props.defaultActiveFirst, _props$selectable = props.selectable, selectable = _props$selectable === void 0 ? true : _props$selectable, _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? false : _props$multiple, defaultSelectedKeys = props.defaultSelectedKeys, selectedKeys = props.selectedKeys, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$inlineIndent = props.inlineIndent, inlineIndent = _props$inlineIndent === void 0 ? 24 : _props$inlineIndent, motion = props.motion, defaultMotions = props.defaultMotions, _props$triggerSubMenu = props.triggerSubMenuAction, triggerSubMenuAction = _props$triggerSubMenu === void 0 ? 'hover' : _props$triggerSubMenu, builtinPlacements = props.builtinPlacements, itemIcon = props.itemIcon, expandIcon = props.expandIcon, _props$overflowedIndi = props.overflowedIndicator, overflowedIndicator = _props$overflowedIndi === void 0 ? '...' : _props$overflowedIndi, overflowedIndicatorPopupClassName = props.overflowedIndicatorPopupClassName, getPopupContainer = props.getPopupContainer, onClick = props.onClick, onOpenChange = props.onOpenChange, onKeyDown = props.onKeyDown, openAnimation = props.openAnimation, openTransitionName = props.openTransitionName, _internalRenderMenuItem = props._internalRenderMenuItem, _internalRenderSubMenuItem = props._internalRenderSubMenuItem, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var childList = _nodeUtil.parseChildren(children, EMPTY_LIST);
    var _React$useState = _react.useState(false), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
    var containerRef = _react.useRef();
    var mergedRef = _ref.composeRef(containerRef, ref);
    var uuid = _useUUIDDefault.default(id);
    var isRtl = direction === 'rtl'; // ========================= Warn =========================
    _warningDefault.default(!openAnimation && !openTransitionName, '`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.');
    var _React$useMemo = _react.useMemo(function() {
        if ((mode === 'inline' || mode === 'vertical') && inlineCollapsed) return [
            'vertical',
            inlineCollapsed
        ];
        return [
            mode,
            false
        ];
    }, [
        mode,
        inlineCollapsed
    ]), _React$useMemo2 = _slicedToArrayDefault.default(_React$useMemo, 2), mergedMode = _React$useMemo2[0], mergedInlineCollapsed = _React$useMemo2[1]; // ====================== Responsive ======================
    var _React$useState3 = _react.useState(0), _React$useState4 = _slicedToArrayDefault.default(_React$useState3, 2), lastVisibleIndex = _React$useState4[0], setLastVisibleIndex = _React$useState4[1];
    var allVisible = lastVisibleIndex >= childList.length - 1 || mergedMode !== 'horizontal' || disabledOverflow; // ========================= Open =========================
    var _useMergedState1 = _useMergedStateDefault.default(defaultOpenKeys, {
        value: openKeys,
        postState: function postState(keys) {
            return keys || EMPTY_LIST;
        }
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
    var triggerOpenKeys = function triggerOpenKeys(keys) {
        setMergedOpenKeys(keys);
        onOpenChange === null || onOpenChange === void 0 || onOpenChange(keys);
    }; // >>>>> Cache & Reset open keys when inlineCollapsed changed
    var _React$useState5 = _react.useState(mergedOpenKeys), _React$useState6 = _slicedToArrayDefault.default(_React$useState5, 2), inlineCacheOpenKeys = _React$useState6[0], setInlineCacheOpenKeys = _React$useState6[1];
    var isInlineMode = mergedMode === 'inline';
    var mountRef = _react.useRef(false); // Cache
    _react.useEffect(function() {
        if (isInlineMode) setInlineCacheOpenKeys(mergedOpenKeys);
    }, [
        mergedOpenKeys
    ]); // Restore
    _react.useEffect(function() {
        if (!mountRef.current) {
            mountRef.current = true;
            return;
        }
        if (isInlineMode) setMergedOpenKeys(inlineCacheOpenKeys);
        else // Trigger open event in case its in control
        triggerOpenKeys(EMPTY_LIST);
    }, [
        isInlineMode
    ]); // ========================= Path =========================
    var _useKeyRecords1 = _useKeyRecordsDefault.default(), registerPath = _useKeyRecords1.registerPath, unregisterPath = _useKeyRecords1.unregisterPath, refreshOverflowKeys = _useKeyRecords1.refreshOverflowKeys, isSubPathKey = _useKeyRecords1.isSubPathKey, getKeyPath = _useKeyRecords1.getKeyPath, getKeys = _useKeyRecords1.getKeys, getSubPathKeys = _useKeyRecords1.getSubPathKeys;
    var registerPathContext = _react.useMemo(function() {
        return {
            registerPath: registerPath,
            unregisterPath: unregisterPath
        };
    }, [
        registerPath,
        unregisterPath
    ]);
    var pathUserContext = _react.useMemo(function() {
        return {
            isSubPathKey: isSubPathKey
        };
    }, [
        isSubPathKey
    ]);
    _react.useEffect(function() {
        refreshOverflowKeys(allVisible ? EMPTY_LIST : childList.slice(lastVisibleIndex + 1).map(function(child) {
            return child.key;
        }));
    }, [
        lastVisibleIndex,
        allVisible
    ]); // ======================== Active ========================
    var _useMergedState3 = _useMergedStateDefault.default(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
        value: activeKey
    }), _useMergedState4 = _slicedToArrayDefault.default(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
    var onActive = _useMemoCallbackDefault.default(function(key) {
        setMergedActiveKey(key);
    });
    var onInactive = _useMemoCallbackDefault.default(function() {
        setMergedActiveKey(undefined);
    }); // ======================== Select ========================
    // >>>>> Select keys
    var _useMergedState5 = _useMergedStateDefault.default(defaultSelectedKeys || [], {
        value: selectedKeys,
        // Legacy convert key to array
        postState: function postState(keys) {
            if (Array.isArray(keys)) return keys;
            if (keys === null || keys === undefined) return EMPTY_LIST;
            return [
                keys
            ];
        }
    }), _useMergedState6 = _slicedToArrayDefault.default(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1]; // >>>>> Trigger select
    var triggerSelection = function triggerSelection(info) {
        if (selectable) {
            // Insert or Remove
            var targetKey = info.key;
            var exist = mergedSelectKeys.includes(targetKey);
            var newSelectKeys;
            if (multiple) {
                if (exist) newSelectKeys = mergedSelectKeys.filter(function(key) {
                    return key !== targetKey;
                });
                else newSelectKeys = [].concat(_toConsumableArrayDefault.default(mergedSelectKeys), [
                    targetKey
                ]);
            } else newSelectKeys = [
                targetKey
            ];
            setMergedSelectKeys(newSelectKeys); // Trigger event
            var selectInfo = _objectSpread2Default.default(_objectSpread2Default.default({}, info), {}, {
                selectedKeys: newSelectKeys
            });
            if (exist) onDeselect === null || onDeselect === void 0 || onDeselect(selectInfo);
            else onSelect === null || onSelect === void 0 || onSelect(selectInfo);
        } // Whatever selectable, always close it
        if (!multiple && mergedOpenKeys.length && mergedMode !== 'inline') triggerOpenKeys(EMPTY_LIST);
    }; // ========================= Open =========================
    /**
   * Click for item. SubMenu do not have selection status
   */ var onInternalClick = _useMemoCallbackDefault.default(function(info) {
        onClick === null || onClick === void 0 || onClick(_warnUtil.warnItemProp(info));
        triggerSelection(info);
    });
    var onInternalOpenChange = _useMemoCallbackDefault.default(function(key, open) {
        var newOpenKeys = mergedOpenKeys.filter(function(k) {
            return k !== key;
        });
        if (open) newOpenKeys.push(key);
        else if (mergedMode !== 'inline') {
            // We need find all related popup to close
            var subPathKeys = getSubPathKeys(key);
            newOpenKeys = newOpenKeys.filter(function(k) {
                return !subPathKeys.has(k);
            });
        }
        if (!_shallowequalDefault.default(mergedOpenKeys, newOpenKeys)) triggerOpenKeys(newOpenKeys);
    });
    var getInternalPopupContainer = _useMemoCallbackDefault.default(getPopupContainer); // ==================== Accessibility =====================
    var triggerAccessibilityOpen = function triggerAccessibilityOpen(key, open) {
        var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key);
        onInternalOpenChange(key, nextOpen);
    };
    var onInternalKeyDown = _useAccessibilityDefault.default(mergedMode, mergedActiveKey, isRtl, uuid, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown); // ======================== Effect ========================
    _react.useEffect(function() {
        setMounted(true);
    }, []); // ======================= Context ========================
    var privateContext = _react.useMemo(function() {
        return {
            _internalRenderMenuItem: _internalRenderMenuItem,
            _internalRenderSubMenuItem: _internalRenderSubMenuItem
        };
    }, [
        _internalRenderMenuItem,
        _internalRenderSubMenuItem
    ]); // ======================== Render ========================
    // >>>>> Children
    var wrappedChildList = mergedMode !== 'horizontal' || disabledOverflow ? childList : childList.map(function(child, index) {
        return(/*#__PURE__*/ // Always wrap provider to avoid sub node re-mount
        _react.createElement(_menuContextDefault.default, {
            key: child.key,
            overflowDisabled: index > lastVisibleIndex
        }, child));
    }); // >>>>> Container
    var container = /*#__PURE__*/ _react.createElement(_rcOverflowDefault.default, _extendsDefault.default({
        id: id,
        ref: mergedRef,
        prefixCls: "".concat(prefixCls, "-overflow"),
        component: "ul",
        itemComponent: _menuItemDefault.default,
        className: _classnamesDefault.default(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(mergedMode), className, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-inline-collapsed"), mergedInlineCollapsed), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames)),
        dir: direction,
        style: style,
        role: "menu",
        tabIndex: tabIndex,
        data: wrappedChildList,
        renderRawItem: function renderRawItem(node) {
            return node;
        },
        renderRawRest: function renderRawRest(omitItems) {
            // We use origin list since wrapped list use context to prevent open
            var len = omitItems.length;
            var originOmitItems = len ? childList.slice(-len) : null;
            return /*#__PURE__*/ _react.createElement(_subMenuDefault.default, {
                eventKey: _useKeyRecords.OVERFLOW_KEY,
                title: overflowedIndicator,
                disabled: allVisible,
                internalPopupClose: len === 0,
                popupClassName: overflowedIndicatorPopupClassName
            }, originOmitItems);
        },
        maxCount: mergedMode !== 'horizontal' || disabledOverflow ? _rcOverflowDefault.default.INVALIDATE : _rcOverflowDefault.default.RESPONSIVE,
        ssr: "full",
        "data-menu-list": true,
        onVisibleChange: function onVisibleChange(newLastIndex) {
            setLastVisibleIndex(newLastIndex);
        },
        onKeyDown: onInternalKeyDown
    }, restProps)); // >>>>> Render
    return /*#__PURE__*/ _react.createElement(_privateContextDefault.default.Provider, {
        value: privateContext
    }, /*#__PURE__*/ _react.createElement(_idContext.IdContext.Provider, {
        value: uuid
    }, /*#__PURE__*/ _react.createElement(_menuContextDefault.default, {
        prefixCls: prefixCls,
        mode: mergedMode,
        openKeys: mergedOpenKeys,
        rtl: isRtl // Disabled
        ,
        disabled: disabled // Motion
        ,
        motion: mounted ? motion : null,
        defaultMotions: mounted ? defaultMotions : null // Active
        ,
        activeKey: mergedActiveKey,
        onActive: onActive,
        onInactive: onInactive // Selection
        ,
        selectedKeys: mergedSelectKeys // Level
        ,
        inlineIndent: inlineIndent // Popup
        ,
        subMenuOpenDelay: subMenuOpenDelay,
        subMenuCloseDelay: subMenuCloseDelay,
        forceSubMenuRender: forceSubMenuRender,
        builtinPlacements: builtinPlacements,
        triggerSubMenuAction: triggerSubMenuAction,
        getPopupContainer: getInternalPopupContainer // Icon
        ,
        itemIcon: itemIcon,
        expandIcon: expandIcon // Events
        ,
        onItemClick: onInternalClick,
        onOpenChange: onInternalOpenChange
    }, /*#__PURE__*/ _react.createElement(_pathContext.PathUserContext.Provider, {
        value: pathUserContext
    }, container), /*#__PURE__*/ _react.createElement("div", {
        style: {
            display: 'none'
        },
        "aria-hidden": true
    }, /*#__PURE__*/ _react.createElement(_pathContext.PathRegisterContext.Provider, {
        value: registerPathContext
    }, childList)))));
});
exports.default = Menu;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","shallowequal":"KKl6V","rc-util/es/hooks/useMergedState":"jUfJa","rc-util/es/warning":"bfz97","rc-overflow":"8iavh","./MenuItem":"h5CTZ","./utils/nodeUtil":"jgEqH","./context/MenuContext":"2kTm7","./hooks/useMemoCallback":"e5Vio","./utils/warnUtil":"15SLa","./SubMenu":"jhkE2","./hooks/useAccessibility":"g4cK9","./hooks/useUUID":"7YhGI","./context/PathContext":"4UY6b","./hooks/useKeyRecords":"hTs33","./context/IdContext":"cda9o","./context/PrivateContext":"a1ShK","rc-util/es/ref":"bvnCQ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"KKl6V":[function(require,module,exports) {
//
module.exports = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
    if (ret !== void 0) return !!ret;
    if (objA === objB) return true;
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) return false;
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    // Test for A's keys different from B.
    for(var idx = 0; idx < keysA.length; idx++){
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) return false;
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) return false;
    }
    return true;
};

},{}],"8iavh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overflow = require("./Overflow");
var _overflowDefault = parcelHelpers.interopDefault(_overflow);
exports.default = _overflowDefault.default;

},{"./Overflow":"z7ZOK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"z7ZOK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OverflowContext", ()=>OverflowContext
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcResizeObserver = require("rc-resize-observer");
var _rcResizeObserverDefault = parcelHelpers.interopDefault(_rcResizeObserver);
var _useLayoutEffect = require("rc-util/es/hooks/useLayoutEffect");
var _useLayoutEffectDefault = parcelHelpers.interopDefault(_useLayoutEffect);
var _item = require("./Item");
var _itemDefault = parcelHelpers.interopDefault(_item);
var _useBatchFrameState = require("./hooks/useBatchFrameState");
var _rawItem = require("./RawItem");
var _rawItemDefault = parcelHelpers.interopDefault(_rawItem);
var _excluded = [
    "prefixCls",
    "data",
    "renderItem",
    "renderRawItem",
    "itemKey",
    "itemWidth",
    "ssr",
    "style",
    "className",
    "maxCount",
    "renderRest",
    "renderRawRest",
    "suffix",
    "component",
    "itemComponent",
    "onVisibleChange"
];
var OverflowContext = /*#__PURE__*/ _react.createContext(null);
var RESPONSIVE = 'responsive';
var INVALIDATE = 'invalidate';
function defaultRenderRest(omittedItems) {
    return "+ ".concat(omittedItems.length, " ...");
}
function Overflow(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-overflow' : _props$prefixCls, _props$data = props.data, data = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style = props.style, className = props.className, maxCount = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var createUseState = _useBatchFrameState.useBatchFrameState();
    var fullySSR = ssr === 'full';
    var _createUseState = createUseState(null), _createUseState2 = _slicedToArrayDefault.default(_createUseState, 2), containerWidth = _createUseState2[0], setContainerWidth = _createUseState2[1];
    var mergedContainerWidth = containerWidth || 0;
    var _createUseState3 = createUseState(new Map()), _createUseState4 = _slicedToArrayDefault.default(_createUseState3, 2), itemWidths = _createUseState4[0], setItemWidths = _createUseState4[1];
    var _createUseState5 = createUseState(0), _createUseState6 = _slicedToArrayDefault.default(_createUseState5, 2), prevRestWidth = _createUseState6[0], setPrevRestWidth = _createUseState6[1];
    var _createUseState7 = createUseState(0), _createUseState8 = _slicedToArrayDefault.default(_createUseState7, 2), restWidth = _createUseState8[0], setRestWidth = _createUseState8[1];
    var _createUseState9 = createUseState(0), _createUseState10 = _slicedToArrayDefault.default(_createUseState9, 2), suffixWidth = _createUseState10[0], setSuffixWidth = _createUseState10[1];
    var _useState = _react.useState(null), _useState2 = _slicedToArrayDefault.default(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
    var _useState3 = _react.useState(null), _useState4 = _slicedToArrayDefault.default(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
    var mergedDisplayCount = _react.useMemo(function() {
        if (displayCount === null && fullySSR) return Number.MAX_SAFE_INTEGER;
        return displayCount || 0;
    }, [
        displayCount,
        containerWidth
    ]);
    var _useState5 = _react.useState(false), _useState6 = _slicedToArrayDefault.default(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
    var itemPrefixCls = "".concat(prefixCls, "-item"); // Always use the max width to avoid blink
    var mergedRestWidth = Math.max(prevRestWidth, restWidth); // ================================= Data =================================
    var isResponsive = data.length && maxCount === RESPONSIVE;
    var invalidate = maxCount === INVALIDATE;
    /**
   * When is `responsive`, we will always render rest node to get the real width of it for calculation
   */ var showRest = isResponsive || typeof maxCount === 'number' && data.length > maxCount;
    var mergedData = _react.useMemo(function() {
        var items = data;
        if (isResponsive) {
            if (containerWidth === null && fullySSR) items = data;
            else items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
        } else if (typeof maxCount === 'number') items = data.slice(0, maxCount);
        return items;
    }, [
        data,
        itemWidth,
        containerWidth,
        maxCount,
        isResponsive
    ]);
    var omittedItems = _react.useMemo(function() {
        if (isResponsive) return data.slice(mergedDisplayCount + 1);
        return data.slice(mergedData.length);
    }, [
        data,
        mergedData,
        isResponsive,
        mergedDisplayCount
    ]); // ================================= Item =================================
    var getKey = _react.useCallback(function(item, index) {
        var _ref;
        if (typeof itemKey === 'function') return itemKey(item);
        return (_ref = itemKey && (item === null || item === void 0 ? void 0 : item[itemKey])) !== null && _ref !== void 0 ? _ref : index;
    }, [
        itemKey
    ]);
    var mergedRenderItem = _react.useCallback(renderItem || function(item) {
        return item;
    }, [
        renderItem
    ]);
    function updateDisplayCount(count, notReady) {
        setDisplayCount(count);
        if (!notReady) {
            setRestReady(count < data.length - 1);
            onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(count);
        }
    } // ================================= Size =================================
    function onOverflowResize(_, element) {
        setContainerWidth(element.clientWidth);
    }
    function registerSize(key, width) {
        setItemWidths(function(origin) {
            var clone = new Map(origin);
            if (width === null) clone.delete(key);
            else clone.set(key, width);
            return clone;
        });
    }
    function registerOverflowSize(_, width) {
        setRestWidth(width);
        setPrevRestWidth(restWidth);
    }
    function registerSuffixSize(_, width) {
        setSuffixWidth(width);
    } // ================================ Effect ================================
    function getItemWidth(index) {
        return itemWidths.get(getKey(mergedData[index], index));
    }
    _useLayoutEffectDefault.default(function() {
        if (mergedContainerWidth && mergedRestWidth && mergedData) {
            var totalWidth = suffixWidth;
            var len = mergedData.length;
            var lastIndex = len - 1; // When data count change to 0, reset this since not loop will reach
            if (!len) {
                updateDisplayCount(0);
                setSuffixFixedStart(null);
                return;
            }
            for(var i = 0; i < len; i += 1){
                var currentItemWidth = getItemWidth(i); // Break since data not ready
                if (currentItemWidth === undefined) {
                    updateDisplayCount(i - 1, true);
                    break;
                } // Find best match
                totalWidth += currentItemWidth;
                if (lastIndex === 0 && totalWidth <= mergedContainerWidth || i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth) {
                    // Additional check if match the end
                    updateDisplayCount(lastIndex);
                    setSuffixFixedStart(null);
                    break;
                } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
                    // Can not hold all the content to show rest
                    updateDisplayCount(i - 1);
                    setSuffixFixedStart(totalWidth - currentItemWidth - suffixWidth + restWidth);
                    break;
                }
            }
            if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) setSuffixFixedStart(null);
        }
    }, [
        mergedContainerWidth,
        itemWidths,
        restWidth,
        suffixWidth,
        getKey,
        mergedData
    ]); // ================================ Render ================================
    var displayRest = restReady && !!omittedItems.length;
    var suffixStyle = {};
    if (suffixFixedStart !== null && isResponsive) suffixStyle = {
        position: 'absolute',
        left: suffixFixedStart,
        top: 0
    };
    var itemSharedProps = {
        prefixCls: itemPrefixCls,
        responsive: isResponsive,
        component: itemComponent,
        invalidate: invalidate
    }; // >>>>> Choice render fun by `renderRawItem`
    var internalRenderItemNode = renderRawItem ? function(item, index) {
        var key = getKey(item, index);
        return /*#__PURE__*/ _react.createElement(OverflowContext.Provider, {
            key: key,
            value: _objectSpread2Default.default(_objectSpread2Default.default({}, itemSharedProps), {}, {
                order: index,
                item: item,
                itemKey: key,
                registerSize: registerSize,
                display: index <= mergedDisplayCount
            })
        }, renderRawItem(item, index));
    } : function(item, index) {
        var key = getKey(item, index);
        return /*#__PURE__*/ _react.createElement(_itemDefault.default, _extendsDefault.default({}, itemSharedProps, {
            order: index,
            key: key,
            item: item,
            renderItem: mergedRenderItem,
            itemKey: key,
            registerSize: registerSize,
            display: index <= mergedDisplayCount
        }));
    }; // >>>>> Rest node
    var restNode;
    var restContextProps = {
        order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
        className: "".concat(itemPrefixCls, "-rest"),
        registerSize: registerOverflowSize,
        display: displayRest
    };
    if (!renderRawRest) {
        var mergedRenderRest = renderRest || defaultRenderRest;
        restNode = /*#__PURE__*/ _react.createElement(_itemDefault.default, _extendsDefault.default({}, itemSharedProps, restContextProps), typeof mergedRenderRest === 'function' ? mergedRenderRest(omittedItems) : mergedRenderRest);
    } else if (renderRawRest) restNode = /*#__PURE__*/ _react.createElement(OverflowContext.Provider, {
        value: _objectSpread2Default.default(_objectSpread2Default.default({}, itemSharedProps), restContextProps)
    }, renderRawRest(omittedItems));
    var overflowNode = /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _classnamesDefault.default(!invalidate && prefixCls, className),
        style: style,
        ref: ref
    }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /*#__PURE__*/ _react.createElement(_itemDefault.default, _extendsDefault.default({}, itemSharedProps, {
        order: mergedDisplayCount,
        className: "".concat(itemPrefixCls, "-suffix"),
        registerSize: registerSuffixSize,
        display: true,
        style: suffixStyle
    }), suffix));
    if (isResponsive) overflowNode = /*#__PURE__*/ _react.createElement(_rcResizeObserverDefault.default, {
        onResize: onOverflowResize
    }, overflowNode);
    return overflowNode;
}
var ForwardOverflow = /*#__PURE__*/ _react.forwardRef(Overflow);
ForwardOverflow.displayName = 'Overflow';
ForwardOverflow.Item = _rawItemDefault.default;
ForwardOverflow.RESPONSIVE = RESPONSIVE;
ForwardOverflow.INVALIDATE = INVALIDATE; // Convert to generic type
exports.default = ForwardOverflow;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","rc-resize-observer":"j1QfD","rc-util/es/hooks/useLayoutEffect":"8GljK","./Item":"62L0b","./hooks/useBatchFrameState":"jSWJD","./RawItem":"6LH04","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8GljK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _canUseDom = require("../Dom/canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
/**
 * Wrap `React.useLayoutEffect` which will not throw warning message in test env
 */ var useLayoutEffect = _canUseDomDefault.default() ? _react.useLayoutEffect : _react.useEffect;
exports.default = useLayoutEffect;

},{"react":"b4tPL","../Dom/canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"62L0b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcResizeObserver = require("rc-resize-observer"); // Use shared variable to save bundle size
var _rcResizeObserverDefault = parcelHelpers.interopDefault(_rcResizeObserver);
var _excluded = [
    "prefixCls",
    "invalidate",
    "item",
    "renderItem",
    "responsive",
    "registerSize",
    "itemKey",
    "className",
    "style",
    "children",
    "display",
    "order",
    "component"
];
var UNDEFINED = undefined;
function InternalItem(props, ref) {
    var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, registerSize = props.registerSize, itemKey = props.itemKey, className = props.className, style = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var mergedHidden = responsive && !display; // ================================ Effect ================================
    function internalRegisterSize(width) {
        registerSize(itemKey, width);
    }
    _react.useEffect(function() {
        return function() {
            internalRegisterSize(null);
        };
    }, []); // ================================ Render ================================
    var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
    var overflowStyle;
    if (!invalidate) overflowStyle = {
        opacity: mergedHidden ? 0 : 1,
        height: mergedHidden ? 0 : UNDEFINED,
        overflowY: mergedHidden ? 'hidden' : UNDEFINED,
        order: responsive ? order : UNDEFINED,
        pointerEvents: mergedHidden ? 'none' : UNDEFINED,
        position: mergedHidden ? 'absolute' : UNDEFINED
    };
    var overflowProps = {};
    if (mergedHidden) overflowProps['aria-hidden'] = true;
    var itemNode = /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _classnamesDefault.default(!invalidate && prefixCls, className),
        style: _objectSpread2Default.default(_objectSpread2Default.default({}, overflowStyle), style)
    }, overflowProps, restProps, {
        ref: ref
    }), childNode);
    if (responsive) itemNode = /*#__PURE__*/ _react.createElement(_rcResizeObserverDefault.default, {
        onResize: function onResize(_ref) {
            var offsetWidth = _ref.offsetWidth;
            internalRegisterSize(offsetWidth);
        }
    }, itemNode);
    return itemNode;
}
var Item = /*#__PURE__*/ _react.forwardRef(InternalItem);
Item.displayName = 'Item';
exports.default = Item;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","rc-resize-observer":"j1QfD","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jSWJD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * State generate. Return a `setState` but it will flush all state with one render to save perf.
 * This is not a realization of `unstable_batchedUpdates`.
 */ parcelHelpers.export(exports, "useBatchFrameState", ()=>useBatchFrameState
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _useState = require("rc-util/es/hooks/useState");
var _useStateDefault = parcelHelpers.interopDefault(_useState);
function useBatchFrameState() {
    var _useState1 = _useStateDefault.default({}), _useState2 = _slicedToArrayDefault.default(_useState1, 2), forceUpdate = _useState2[1];
    var statesRef = _react.useRef([]);
    var walkingIndex = 0;
    var beforeFrameId = 0;
    function createState(defaultValue) {
        var myIndex = walkingIndex;
        walkingIndex += 1; // Fill value if not exist yet
        if (statesRef.current.length < myIndex + 1) statesRef.current[myIndex] = defaultValue;
         // Return filled as `setState`
        var value = statesRef.current[myIndex];
        function setValue(val) {
            statesRef.current[myIndex] = typeof val === 'function' ? val(statesRef.current[myIndex]) : val;
            _rafDefault.default.cancel(beforeFrameId); // Flush with batch
            beforeFrameId = _rafDefault.default(function() {
                forceUpdate({}, true);
            });
        }
        return [
            value,
            setValue
        ];
    }
    return createState;
}

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/raf":"h9LA9","rc-util/es/hooks/useState":"5a1b3","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6LH04":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _item = require("./Item");
var _itemDefault = parcelHelpers.interopDefault(_item);
var _overflow = require("./Overflow");
var _excluded = [
    "component"
], _excluded2 = [
    "className"
], _excluded3 = [
    "className"
];
var InternalRawItem = function InternalRawItem(props, ref) {
    var context = _react.useContext(_overflow.OverflowContext); // Render directly when context not provided
    if (!context) {
        var _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
        return /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({}, _restProps, {
            ref: ref
        }));
    }
    var contextClassName = context.className, restContext = _objectWithoutPropertiesDefault.default(context, _excluded2);
    var className = props.className, restProps = _objectWithoutPropertiesDefault.default(props, _excluded3); // Do not pass context to sub item to avoid multiple measure
    return /*#__PURE__*/ _react.createElement(_overflow.OverflowContext.Provider, {
        value: null
    }, /*#__PURE__*/ _react.createElement(_itemDefault.default, _extendsDefault.default({
        ref: ref,
        className: _classnamesDefault.default(contextClassName, className)
    }, restContext, restProps)));
};
var RawItem = /*#__PURE__*/ _react.forwardRef(InternalRawItem);
RawItem.displayName = 'RawItem';
exports.default = RawItem;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","./Item":"62L0b","./Overflow":"z7ZOK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"h5CTZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcOverflow = require("rc-overflow");
var _rcOverflowDefault = parcelHelpers.interopDefault(_rcOverflow);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _menuContext = require("./context/MenuContext");
var _useActive = require("./hooks/useActive");
var _useActiveDefault = parcelHelpers.interopDefault(_useActive);
var _warnUtil = require("./utils/warnUtil");
var _icon = require("./Icon");
var _iconDefault = parcelHelpers.interopDefault(_icon);
var _useDirectionStyle = require("./hooks/useDirectionStyle");
var _useDirectionStyleDefault = parcelHelpers.interopDefault(_useDirectionStyle);
var _pathContext = require("./context/PathContext");
var _idContext = require("./context/IdContext");
var _privateContext = require("./context/PrivateContext"); // Since Menu event provide the `info.item` which point to the MenuItem node instance.
var _privateContextDefault = parcelHelpers.interopDefault(_privateContext);
var _excluded = [
    "title",
    "attribute",
    "elementRef"
], _excluded2 = [
    "style",
    "className",
    "eventKey",
    "warnKey",
    "disabled",
    "itemIcon",
    "children",
    "role",
    "onMouseEnter",
    "onMouseLeave",
    "onClick",
    "onKeyDown",
    "onFocus"
], _excluded3 = [
    "active"
];
// We have to use class component here.
// This should be removed from doc & api in future.
var LegacyMenuItem = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(LegacyMenuItem1, _React$Component);
    var _super = _createSuperDefault.default(LegacyMenuItem1);
    function LegacyMenuItem1() {
        _classCallCheckDefault.default(this, LegacyMenuItem1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(LegacyMenuItem1, [
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutPropertiesDefault.default(_this$props, _excluded);
                var passedProps = _omitDefault.default(restProps, [
                    'eventKey'
                ]);
                _warningDefault.default(!attribute, '`attribute` of Menu.Item is deprecated. Please pass attribute directly.');
                return /*#__PURE__*/ _react.createElement(_rcOverflowDefault.default.Item, _extendsDefault.default({}, attribute, {
                    title: typeof title === 'string' ? title : undefined
                }, passedProps, {
                    ref: elementRef
                }));
            }
        }
    ]);
    return LegacyMenuItem1;
}(_react.Component);
/**
 * Real Menu Item component
 */ var InternalMenuItem = function InternalMenuItem(props) {
    var _classNames;
    var style = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown = props.onKeyDown, onFocus = props.onFocus, restProps = _objectWithoutPropertiesDefault.default(props, _excluded2);
    var domDataId = _idContext.useMenuId(eventKey);
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls, onItemClick = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
    var _React$useContext2 = _react.useContext(_privateContextDefault.default), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
    var itemCls = "".concat(prefixCls, "-item");
    var legacyMenuItemRef = _react.useRef();
    var elementRef = _react.useRef();
    var mergedDisabled = contextDisabled || disabled;
    var connectedKeys = _pathContext.useFullPath(eventKey); // ================================ Warn ================================
    if (warnKey) _warningDefault.default(false, 'MenuItem should not leave undefined `key`.');
     // ============================= Info =============================
    var getEventInfo = function getEventInfo(e) {
        return {
            key: eventKey,
            // Note: For legacy code is reversed which not like other antd component
            keyPath: _toConsumableArrayDefault.default(connectedKeys).reverse(),
            item: legacyMenuItemRef.current,
            domEvent: e
        };
    }; // ============================= Icon =============================
    var mergedItemIcon = itemIcon || contextItemIcon; // ============================ Active ============================
    var _useActive1 = _useActiveDefault.default(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive1.active, activeProps = _objectWithoutPropertiesDefault.default(_useActive1, _excluded3); // ============================ Select ============================
    var selected = selectedKeys.includes(eventKey); // ======================== DirectionStyle ========================
    var directionStyle = _useDirectionStyleDefault.default(connectedKeys.length); // ============================ Events ============================
    var onInternalClick = function onInternalClick(e) {
        if (mergedDisabled) return;
        var info = getEventInfo(e);
        onClick === null || onClick === void 0 || onClick(_warnUtil.warnItemProp(info));
        onItemClick(info);
    };
    var onInternalKeyDown = function onInternalKeyDown(e) {
        onKeyDown === null || onKeyDown === void 0 || onKeyDown(e);
        if (e.which === _keyCodeDefault.default.ENTER) {
            var info = getEventInfo(e); // Legacy. Key will also trigger click event
            onClick === null || onClick === void 0 || onClick(_warnUtil.warnItemProp(info));
            onItemClick(info);
        }
    };
    /**
   * Used for accessibility. Helper will focus element without key board.
   * We should manually trigger an active
   */ var onInternalFocus = function onInternalFocus(e) {
        onActive(eventKey);
        onFocus === null || onFocus === void 0 || onFocus(e);
    }; // ============================ Render ============================
    var optionRoleProps = {};
    if (props.role === 'option') optionRoleProps['aria-selected'] = selected;
    var renderNode = /*#__PURE__*/ _react.createElement(LegacyMenuItem, _extendsDefault.default({
        ref: legacyMenuItemRef,
        elementRef: elementRef,
        role: role === null ? 'none' : role || 'menuitem',
        tabIndex: disabled ? null : -1,
        "data-menu-id": overflowDisabled && domDataId ? null : domDataId
    }, restProps, activeProps, optionRoleProps, {
        component: "li",
        "aria-disabled": disabled,
        style: _objectSpread2Default.default(_objectSpread2Default.default({}, directionStyle), style),
        className: _classnamesDefault.default(itemCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(itemCls, "-active"), active), _definePropertyDefault.default(_classNames, "".concat(itemCls, "-selected"), selected), _definePropertyDefault.default(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),
        onClick: onInternalClick,
        onKeyDown: onInternalKeyDown,
        onFocus: onInternalFocus
    }), children, /*#__PURE__*/ _react.createElement(_iconDefault.default, {
        props: _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
            isSelected: selected
        }),
        icon: mergedItemIcon
    }));
    if (_internalRenderMenuItem) renderNode = _internalRenderMenuItem(renderNode, props, {
        selected: selected
    });
    return renderNode;
};
function MenuItem(props) {
    var eventKey = props.eventKey; // ==================== Record KeyPath ====================
    var measure = _pathContext.useMeasure();
    var connectedKeyPath = _pathContext.useFullPath(eventKey); // eslint-disable-next-line consistent-return
    _react.useEffect(function() {
        if (measure) {
            measure.registerPath(eventKey, connectedKeyPath);
            return function() {
                measure.unregisterPath(eventKey, connectedKeyPath);
            };
        }
    }, [
        connectedKeyPath
    ]);
    if (measure) return null;
     // ======================== Render ========================
    return /*#__PURE__*/ _react.createElement(InternalMenuItem, props);
}
exports.default = MenuItem;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","classnames":"dFgpN","rc-overflow":"8iavh","rc-util/es/warning":"bfz97","rc-util/es/KeyCode":"1ukEC","rc-util/es/omit":"9TJfY","./context/MenuContext":"2kTm7","./hooks/useActive":"cbwxD","./utils/warnUtil":"15SLa","./Icon":"1jQzn","./hooks/useDirectionStyle":"gzXvC","./context/PathContext":"4UY6b","./context/IdContext":"cda9o","./context/PrivateContext":"a1ShK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2kTm7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MenuContext", ()=>MenuContext
);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var _useMemo = require("rc-util/es/hooks/useMemo");
var _useMemoDefault = parcelHelpers.interopDefault(_useMemo);
var _shallowequal = require("shallowequal");
var _shallowequalDefault = parcelHelpers.interopDefault(_shallowequal);
var _excluded = [
    "children",
    "locked"
];
var MenuContext = /*#__PURE__*/ _react.createContext(null);
function mergeProps(origin, target) {
    var clone = _objectSpread2Default.default({}, origin);
    Object.keys(target).forEach(function(key) {
        var value = target[key];
        if (value !== undefined) clone[key] = value;
    });
    return clone;
}
function InheritableContextProvider(_ref) {
    var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var context = _react.useContext(MenuContext);
    var inheritableContext = _useMemoDefault.default(function() {
        return mergeProps(context, restProps);
    }, [
        context,
        restProps
    ], function(prev, next) {
        return !locked && (prev[0] !== next[0] || !_shallowequalDefault.default(prev[1], next[1]));
    });
    return /*#__PURE__*/ _react.createElement(MenuContext.Provider, {
        value: inheritableContext
    }, children);
}
exports.default = InheritableContextProvider;

},{"@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","rc-util/es/hooks/useMemo":"lhbzA","shallowequal":"KKl6V","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cbwxD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _menuContext = require("../context/MenuContext");
function useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {
    var _React$useContext = _react.useContext(_menuContext.MenuContext), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
    var ret = {
        active: activeKey === eventKey
    }; // Skip when disabled
    if (!disabled) {
        ret.onMouseEnter = function(domEvent) {
            onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
                key: eventKey,
                domEvent: domEvent
            });
            onActive(eventKey);
        };
        ret.onMouseLeave = function(domEvent) {
            onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
                key: eventKey,
                domEvent: domEvent
            });
            onInactive(eventKey);
        };
    }
    return ret;
}
exports.default = useActive;

},{"react":"b4tPL","../context/MenuContext":"2kTm7","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"15SLa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * `onClick` event return `info.item` which point to react node directly.
 * We should warning this since it will not work on FC.
 */ parcelHelpers.export(exports, "warnItemProp", ()=>warnItemProp
);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _excluded = [
    "item"
];
function warnItemProp(_ref) {
    var item = _ref.item, restInfo = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    Object.defineProperty(restInfo, 'item', {
        get: function get() {
            _warningDefault.default(false, '`info.item` is deprecated since we will move to function component that not provides React Node instance in future.');
            return item;
        }
    });
    return restInfo;
}

},{"@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","rc-util/es/warning":"bfz97","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1jQzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
function Icon(_ref) {
    var icon = _ref.icon, props = _ref.props, children = _ref.children;
    var iconNode;
    if (typeof icon === 'function') iconNode = /*#__PURE__*/ _react.createElement(icon, _objectSpread2Default.default({}, props));
    else // Compatible for origin definition
    iconNode = icon;
    return iconNode || children || null;
}
exports.default = Icon;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gzXvC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _menuContext = require("../context/MenuContext");
function useDirectionStyle(level) {
    var _React$useContext = _react.useContext(_menuContext.MenuContext), mode = _React$useContext.mode, rtl = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
    if (mode !== 'inline') return null;
    var len = level;
    return rtl ? {
        paddingRight: len * inlineIndent
    } : {
        paddingLeft: len * inlineIndent
    };
}
exports.default = useDirectionStyle;

},{"react":"b4tPL","../context/MenuContext":"2kTm7","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4UY6b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PathRegisterContext", ()=>PathRegisterContext
);
parcelHelpers.export(exports, "useMeasure", ()=>useMeasure
) // ========================= Path Tracker ==========================
;
parcelHelpers.export(exports, "PathTrackerContext", ()=>PathTrackerContext
);
parcelHelpers.export(exports, "useFullPath", ()=>useFullPath
);
parcelHelpers.export(exports, "PathUserContext", ()=>PathUserContext
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _react = require("react");
var EmptyList = [];
var PathRegisterContext = /*#__PURE__*/ _react.createContext(null);
function useMeasure() {
    return _react.useContext(PathRegisterContext);
}
var PathTrackerContext = /*#__PURE__*/ _react.createContext(EmptyList);
function useFullPath(eventKey) {
    var parentKeyPath = _react.useContext(PathTrackerContext);
    return _react.useMemo(function() {
        return eventKey !== undefined ? [].concat(_toConsumableArrayDefault.default(parentKeyPath), [
            eventKey
        ]) : parentKeyPath;
    }, [
        parentKeyPath,
        eventKey
    ]);
}
var PathUserContext = /*#__PURE__*/ _react.createContext(null);

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cda9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IdContext", ()=>IdContext
);
parcelHelpers.export(exports, "getMenuId", ()=>getMenuId
);
/**
 * Get `data-menu-id`
 */ parcelHelpers.export(exports, "useMenuId", ()=>useMenuId
);
var _react = require("react");
var IdContext = /*#__PURE__*/ _react.createContext(null);
function getMenuId(uuid, eventKey) {
    if (uuid === undefined) return null;
    return "".concat(uuid, "-").concat(eventKey);
}
function useMenuId(eventKey) {
    var id = _react.useContext(IdContext);
    return getMenuId(id, eventKey);
}

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"a1ShK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var PrivateContext = /*#__PURE__*/ _react.createContext({});
exports.default = PrivateContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jgEqH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseChildren", ()=>parseChildren
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _react = require("react");
var _toArray = require("rc-util/es/Children/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
function parseChildren(children, keyPath) {
    return _toArrayDefault.default(children).map(function(child, index) {
        if (/*#__PURE__*/ _react.isValidElement(child)) {
            var _child$props$eventKey, _child$props;
            var key = child.key;
            var eventKey = (_child$props$eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _child$props$eventKey !== void 0 ? _child$props$eventKey : key;
            var emptyKey = eventKey === null || eventKey === undefined;
            if (emptyKey) eventKey = "tmp_key-".concat([].concat(_toConsumableArrayDefault.default(keyPath), [
                index
            ]).join('-'));
            var cloneProps = {
                key: eventKey,
                eventKey: eventKey
            };
            if (emptyKey) cloneProps.warnKey = true;
            return /*#__PURE__*/ _react.cloneElement(child, cloneProps);
        }
        return child;
    });
}

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","react":"b4tPL","rc-util/es/Children/toArray":"ijisy","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"e5Vio":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useMemoCallback(func) {
    var funRef = _react.useRef(func);
    funRef.current = func;
    var callback = _react.useCallback(function() {
        var _funRef$current;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [
            funRef
        ].concat(args));
    }, []);
    return func ? callback : undefined;
}
exports.default = useMemoCallback;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jhkE2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcOverflow = require("rc-overflow");
var _rcOverflowDefault = parcelHelpers.interopDefault(_rcOverflow);
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _subMenuList = require("./SubMenuList");
var _subMenuListDefault = parcelHelpers.interopDefault(_subMenuList);
var _nodeUtil = require("../utils/nodeUtil");
var _menuContext = require("../context/MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _useMemoCallback = require("../hooks/useMemoCallback");
var _useMemoCallbackDefault = parcelHelpers.interopDefault(_useMemoCallback);
var _popupTrigger = require("./PopupTrigger");
var _popupTriggerDefault = parcelHelpers.interopDefault(_popupTrigger);
var _icon = require("../Icon");
var _iconDefault = parcelHelpers.interopDefault(_icon);
var _useActive = require("../hooks/useActive");
var _useActiveDefault = parcelHelpers.interopDefault(_useActive);
var _warnUtil = require("../utils/warnUtil");
var _useDirectionStyle = require("../hooks/useDirectionStyle");
var _useDirectionStyleDefault = parcelHelpers.interopDefault(_useDirectionStyle);
var _inlineSubMenuList = require("./InlineSubMenuList");
var _inlineSubMenuListDefault = parcelHelpers.interopDefault(_inlineSubMenuList);
var _pathContext = require("../context/PathContext");
var _idContext = require("../context/IdContext");
var _privateContext = require("../context/PrivateContext");
var _privateContextDefault = parcelHelpers.interopDefault(_privateContext);
var _excluded = [
    "style",
    "className",
    "title",
    "eventKey",
    "warnKey",
    "disabled",
    "internalPopupClose",
    "children",
    "itemIcon",
    "expandIcon",
    "popupClassName",
    "popupOffset",
    "onClick",
    "onMouseEnter",
    "onMouseLeave",
    "onTitleClick",
    "onTitleMouseEnter",
    "onTitleMouseLeave"
], _excluded2 = [
    "active"
];
var InternalSubMenu = function InternalSubMenu(props) {
    var _classNames;
    var style = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var domDataId = _idContext.useMenuId(eventKey);
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
    var _React$useContext2 = _react.useContext(_privateContextDefault.default), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
    var _React$useContext3 = _react.useContext(_pathContext.PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
    var connectedPath = _pathContext.useFullPath();
    var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
    var mergedDisabled = contextDisabled || disabled;
    var elementRef = _react.useRef();
    var popupRef = _react.useRef(); // ================================ Warn ================================
    if (warnKey) _warningDefault.default(false, 'SubMenu should not leave undefined `key`.');
     // ================================ Icon ================================
    var mergedItemIcon = itemIcon || contextItemIcon;
    var mergedExpandIcon = expandIcon || contextExpandIcon; // ================================ Open ================================
    var originOpen = openKeys.includes(eventKey);
    var open = !overflowDisabled && originOpen; // =============================== Select ===============================
    var childrenSelected = isSubPathKey(selectedKeys, eventKey); // =============================== Active ===============================
    var _useActive1 = _useActiveDefault.default(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive1.active, activeProps = _objectWithoutPropertiesDefault.default(_useActive1, _excluded2); // Fallback of active check to avoid hover on menu title or disabled item
    var _React$useState = _react.useState(false), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
    var triggerChildrenActive = function triggerChildrenActive(newActive) {
        if (!mergedDisabled) setChildrenActive(newActive);
    };
    var onInternalMouseEnter = function onInternalMouseEnter(domEvent) {
        triggerChildrenActive(true);
        onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
            key: eventKey,
            domEvent: domEvent
        });
    };
    var onInternalMouseLeave = function onInternalMouseLeave(domEvent) {
        triggerChildrenActive(false);
        onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
            key: eventKey,
            domEvent: domEvent
        });
    };
    var mergedActive = _react.useMemo(function() {
        if (active) return active;
        if (mode !== 'inline') return childrenActive || isSubPathKey([
            activeKey
        ], eventKey);
        return false;
    }, [
        mode,
        active,
        activeKey,
        childrenActive,
        eventKey,
        isSubPathKey
    ]); // ========================== DirectionStyle ==========================
    var directionStyle = _useDirectionStyleDefault.default(connectedPath.length); // =============================== Events ===============================
    // >>>> Title click
    var onInternalTitleClick = function onInternalTitleClick(e) {
        // Skip if disabled
        if (mergedDisabled) return;
        onTitleClick === null || onTitleClick === void 0 || onTitleClick({
            key: eventKey,
            domEvent: e
        }); // Trigger open by click when mode is `inline`
        if (mode === 'inline') onOpenChange(eventKey, !originOpen);
    }; // >>>> Context for children click
    var onMergedItemClick = _useMemoCallbackDefault.default(function(info) {
        onClick === null || onClick === void 0 || onClick(_warnUtil.warnItemProp(info));
        onItemClick(info);
    }); // >>>>> Visible change
    var onPopupVisibleChange = function onPopupVisibleChange(newVisible) {
        if (mode !== 'inline') onOpenChange(eventKey, newVisible);
    };
    /**
   * Used for accessibility. Helper will focus element without key board.
   * We should manually trigger an active
   */ var onInternalFocus = function onInternalFocus() {
        onActive(eventKey);
    }; // =============================== Render ===============================
    var popupId = domDataId && "".concat(domDataId, "-popup"); // >>>>> Title
    var titleNode = /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        role: "menuitem",
        style: directionStyle,
        className: "".concat(subMenuPrefixCls, "-title"),
        tabIndex: mergedDisabled ? null : -1,
        ref: elementRef,
        title: typeof title === 'string' ? title : null,
        "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
        "aria-expanded": open,
        "aria-haspopup": true,
        "aria-controls": popupId,
        "aria-disabled": mergedDisabled,
        onClick: onInternalTitleClick,
        onFocus: onInternalFocus
    }, activeProps), title, /*#__PURE__*/ _react.createElement(_iconDefault.default, {
        icon: mode !== 'horizontal' ? mergedExpandIcon : null,
        props: _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
            isOpen: open,
            // [Legacy] Not sure why need this mark
            isSubMenu: true
        })
    }, /*#__PURE__*/ _react.createElement("i", {
        className: "".concat(subMenuPrefixCls, "-arrow")
    }))); // Cache mode if it change to `inline` which do not have popup motion
    var triggerModeRef = _react.useRef(mode);
    if (mode !== 'inline') triggerModeRef.current = connectedPath.length > 1 ? 'vertical' : mode;
    if (!overflowDisabled) {
        var triggerMode = triggerModeRef.current; // Still wrap with Trigger here since we need avoid react re-mount dom node
        // Which makes motion failed
        titleNode = /*#__PURE__*/ _react.createElement(_popupTriggerDefault.default, {
            mode: triggerMode,
            prefixCls: subMenuPrefixCls,
            visible: !internalPopupClose && open && mode !== 'inline',
            popupClassName: popupClassName,
            popupOffset: popupOffset,
            popup: /*#__PURE__*/ _react.createElement(_menuContextDefault.default // Special handle of horizontal mode
            , {
                mode: triggerMode === 'horizontal' ? 'vertical' : triggerMode
            }, /*#__PURE__*/ _react.createElement(_subMenuListDefault.default, {
                id: popupId,
                ref: popupRef
            }, children)),
            disabled: mergedDisabled,
            onVisibleChange: onPopupVisibleChange
        }, titleNode);
    } // >>>>> List node
    var listNode = /*#__PURE__*/ _react.createElement(_rcOverflowDefault.default.Item, _extendsDefault.default({
        role: "none"
    }, restProps, {
        component: "li",
        style: style,
        className: _classnamesDefault.default(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(subMenuPrefixCls, "-open"), open), _definePropertyDefault.default(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), _definePropertyDefault.default(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), _definePropertyDefault.default(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),
        onMouseEnter: onInternalMouseEnter,
        onMouseLeave: onInternalMouseLeave
    }), titleNode, !overflowDisabled && /*#__PURE__*/ _react.createElement(_inlineSubMenuListDefault.default, {
        id: popupId,
        open: open,
        keyPath: connectedPath
    }, children));
    if (_internalRenderSubMenuItem) listNode = _internalRenderSubMenuItem(listNode, props, {
        selected: childrenSelected,
        active: mergedActive,
        open: open,
        disabled: mergedDisabled
    });
     // >>>>> Render
    return /*#__PURE__*/ _react.createElement(_menuContextDefault.default, {
        onItemClick: onMergedItemClick,
        mode: mode === 'horizontal' ? 'vertical' : mode,
        itemIcon: mergedItemIcon,
        expandIcon: mergedExpandIcon
    }, listNode);
};
function SubMenu(props) {
    var eventKey = props.eventKey, children = props.children;
    var connectedKeyPath = _pathContext.useFullPath(eventKey);
    var childList = _nodeUtil.parseChildren(children, connectedKeyPath); // ==================== Record KeyPath ====================
    var measure = _pathContext.useMeasure(); // eslint-disable-next-line consistent-return
    _react.useEffect(function() {
        if (measure) {
            measure.registerPath(eventKey, connectedKeyPath);
            return function() {
                measure.unregisterPath(eventKey, connectedKeyPath);
            };
        }
    }, [
        connectedKeyPath
    ]);
    var renderNode; // ======================== Render ========================
    if (measure) renderNode = childList;
    else renderNode = /*#__PURE__*/ _react.createElement(InternalSubMenu, props, childList);
    return /*#__PURE__*/ _react.createElement(_pathContext.PathTrackerContext.Provider, {
        value: connectedKeyPath
    }, renderNode);
}
exports.default = SubMenu;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","rc-overflow":"8iavh","rc-util/es/warning":"bfz97","./SubMenuList":"1lg8e","../utils/nodeUtil":"jgEqH","../context/MenuContext":"2kTm7","../hooks/useMemoCallback":"e5Vio","./PopupTrigger":"1t2kD","../Icon":"1jQzn","../hooks/useActive":"cbwxD","../utils/warnUtil":"15SLa","../hooks/useDirectionStyle":"gzXvC","./InlineSubMenuList":"16wMq","../context/PathContext":"4UY6b","../context/IdContext":"cda9o","../context/PrivateContext":"a1ShK","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1lg8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _menuContext = require("../context/MenuContext");
var _excluded = [
    "className",
    "children"
];
var InternalSubMenuList = function InternalSubMenuList(_ref, ref) {
    var className = _ref.className, children = _ref.children, restProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl = _React$useContext.rtl;
    return /*#__PURE__*/ _react.createElement("ul", _extendsDefault.default({
        className: _classnamesDefault.default(prefixCls, rtl && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === 'inline' ? 'inline' : 'vertical'), className)
    }, restProps, {
        "data-menu-list": true,
        ref: ref
    }), children);
};
var SubMenuList = /*#__PURE__*/ _react.forwardRef(InternalSubMenuList);
SubMenuList.displayName = 'SubMenuList';
exports.default = SubMenuList;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","../context/MenuContext":"2kTm7","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1t2kD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _rcTrigger = require("rc-trigger");
var _rcTriggerDefault = parcelHelpers.interopDefault(_rcTrigger);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _menuContext = require("../context/MenuContext");
var _placements = require("../placements");
var _motionUtil = require("../utils/motionUtil");
var popupPlacementMap = {
    horizontal: 'bottomLeft',
    vertical: 'rightTop',
    'vertical-left': 'rightTop',
    'vertical-right': 'leftTop'
};
function PopupTrigger(_ref) {
    var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
    var _React$useContext = _react.useContext(_menuContext.MenuContext), getPopupContainer = _React$useContext.getPopupContainer, rtl = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
    var _React$useState = _react.useState(false), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
    var placement = rtl ? _objectSpread2Default.default(_objectSpread2Default.default({}, _placements.placementsRtl), builtinPlacements) : _objectSpread2Default.default(_objectSpread2Default.default({}, _placements.placements), builtinPlacements);
    var popupPlacement = popupPlacementMap[mode];
    var targetMotion = _motionUtil.getMotion(mode, motion, defaultMotions);
    var mergedMotion = _objectSpread2Default.default(_objectSpread2Default.default({}, targetMotion), {}, {
        leavedClassName: "".concat(prefixCls, "-hidden"),
        removeOnLeave: false,
        motionAppear: true
    }); // Delay to change visible
    var visibleRef = _react.useRef();
    _react.useEffect(function() {
        visibleRef.current = _rafDefault.default(function() {
            setInnerVisible(visible);
        });
        return function() {
            _rafDefault.default.cancel(visibleRef.current);
        };
    }, [
        visible
    ]);
    return /*#__PURE__*/ _react.createElement(_rcTriggerDefault.default, {
        prefixCls: prefixCls,
        popupClassName: _classnamesDefault.default("".concat(prefixCls, "-popup"), _definePropertyDefault.default({}, "".concat(prefixCls, "-rtl"), rtl), popupClassName),
        stretch: mode === 'horizontal' ? 'minWidth' : null,
        getPopupContainer: getPopupContainer,
        builtinPlacements: placement,
        popupPlacement: popupPlacement,
        popupVisible: innerVisible,
        popup: popup,
        popupAlign: popupOffset && {
            offset: popupOffset
        },
        action: disabled ? [] : [
            triggerSubMenuAction
        ],
        mouseEnterDelay: subMenuOpenDelay,
        mouseLeaveDelay: subMenuCloseDelay,
        onPopupVisibleChange: onVisibleChange,
        forceRender: forceSubMenuRender,
        popupMotion: mergedMotion
    }, children);
}
exports.default = PopupTrigger;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-trigger":"7w4OL","classnames":"dFgpN","rc-util/es/raf":"h9LA9","../context/MenuContext":"2kTm7","../placements":"jAgwF","../utils/motionUtil":"g4VpP","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7w4OL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Internal usage. Do not use in your code since this will be removed.
 */ parcelHelpers.export(exports, "generateTrigger", ()=>generateTrigger
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _contains = require("rc-util/es/Dom/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _findDOMNode = require("rc-util/es/Dom/findDOMNode");
var _findDOMNodeDefault = parcelHelpers.interopDefault(_findDOMNode);
var _ref = require("rc-util/es/ref");
var _addEventListener = require("rc-util/es/Dom/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _portal = require("rc-util/es/Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _alignUtil = require("./utils/alignUtil");
var _popup = require("./Popup");
var _popupDefault = parcelHelpers.interopDefault(_popup);
var _context = require("./context");
var _contextDefault = parcelHelpers.interopDefault(_context);
function noop() {}
function returnEmptyString() {
    return '';
}
function returnDocument(element) {
    if (element) return element.ownerDocument;
    return window.document;
}
var ALL_HANDLERS = [
    'onClick',
    'onMouseDown',
    'onTouchStart',
    'onMouseEnter',
    'onMouseLeave',
    'onFocus',
    'onBlur',
    'onContextMenu'
];
function generateTrigger(PortalComponent) {
    var Trigger1 = /*#__PURE__*/ function(_React$Component) {
        _inheritsDefault.default(Trigger, _React$Component);
        var _super = _createSuperDefault.default(Trigger);
        function Trigger(props) {
            var _this;
            _classCallCheckDefault.default(this, Trigger);
            _this = _super.call(this, props);
            _this.popupRef = /*#__PURE__*/ _react.createRef();
            _this.triggerRef = /*#__PURE__*/ _react.createRef();
            _this.attachId = void 0;
            _this.clickOutsideHandler = void 0;
            _this.touchOutsideHandler = void 0;
            _this.contextMenuOutsideHandler1 = void 0;
            _this.contextMenuOutsideHandler2 = void 0;
            _this.mouseDownTimeout = void 0;
            _this.focusTime = void 0;
            _this.preClickTime = void 0;
            _this.preTouchTime = void 0;
            _this.delayTimer = void 0;
            _this.hasPopupMouseDown = void 0;
            _this.onMouseEnter = function(e) {
                var mouseEnterDelay = _this.props.mouseEnterDelay;
                _this.fireEvents('onMouseEnter', e);
                _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
            };
            _this.onMouseMove = function(e) {
                _this.fireEvents('onMouseMove', e);
                _this.setPoint(e);
            };
            _this.onMouseLeave = function(e) {
                _this.fireEvents('onMouseLeave', e);
                _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
            };
            _this.onPopupMouseEnter = function() {
                _this.clearDelayTimer();
            };
            _this.onPopupMouseLeave = function(e) {
                var _this$popupRef$curren;
                // https://github.com/react-component/trigger/pull/13
                // react bug?
                if (e.relatedTarget && !e.relatedTarget.setTimeout && _containsDefault.default((_this$popupRef$curren = _this.popupRef.current) === null || _this$popupRef$curren === void 0 ? void 0 : _this$popupRef$curren.getElement(), e.relatedTarget)) return;
                _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
            };
            _this.onFocus = function(e) {
                _this.fireEvents('onFocus', e); // incase focusin and focusout
                _this.clearDelayTimer();
                if (_this.isFocusToShow()) {
                    _this.focusTime = Date.now();
                    _this.delaySetPopupVisible(true, _this.props.focusDelay);
                }
            };
            _this.onMouseDown = function(e) {
                _this.fireEvents('onMouseDown', e);
                _this.preClickTime = Date.now();
            };
            _this.onTouchStart = function(e) {
                _this.fireEvents('onTouchStart', e);
                _this.preTouchTime = Date.now();
            };
            _this.onBlur = function(e) {
                _this.fireEvents('onBlur', e);
                _this.clearDelayTimer();
                if (_this.isBlurToHide()) _this.delaySetPopupVisible(false, _this.props.blurDelay);
            };
            _this.onContextMenu = function(e) {
                e.preventDefault();
                _this.fireEvents('onContextMenu', e);
                _this.setPopupVisible(true, e);
            };
            _this.onContextMenuClose = function() {
                if (_this.isContextMenuToShow()) _this.close();
            };
            _this.onClick = function(event) {
                _this.fireEvents('onClick', event); // focus will trigger click
                if (_this.focusTime) {
                    var preTime;
                    if (_this.preClickTime && _this.preTouchTime) preTime = Math.min(_this.preClickTime, _this.preTouchTime);
                    else if (_this.preClickTime) preTime = _this.preClickTime;
                    else if (_this.preTouchTime) preTime = _this.preTouchTime;
                    if (Math.abs(preTime - _this.focusTime) < 20) return;
                    _this.focusTime = 0;
                }
                _this.preClickTime = 0;
                _this.preTouchTime = 0; // Only prevent default when all the action is click.
                // https://github.com/ant-design/ant-design/issues/17043
                // https://github.com/ant-design/ant-design/issues/17291
                if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) event.preventDefault();
                var nextVisible = !_this.state.popupVisible;
                if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) _this.setPopupVisible(!_this.state.popupVisible, event);
            };
            _this.onPopupMouseDown = function() {
                _this.hasPopupMouseDown = true;
                clearTimeout(_this.mouseDownTimeout);
                _this.mouseDownTimeout = window.setTimeout(function() {
                    _this.hasPopupMouseDown = false;
                }, 0);
                if (_this.context) {
                    var _this$context;
                    (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
                }
            };
            _this.onDocumentClick = function(event) {
                if (_this.props.mask && !_this.props.maskClosable) return;
                var target = event.target;
                var root = _this.getRootDomNode();
                var popupNode = _this.getPopupDomNode();
                if (// https://github.com/ant-design/ant-design/issues/29853
                (!_containsDefault.default(root, target) || _this.isContextMenuOnly()) && !_containsDefault.default(popupNode, target) && !_this.hasPopupMouseDown) _this.close();
            };
            _this.getRootDomNode = function() {
                var getTriggerDOMNode = _this.props.getTriggerDOMNode;
                if (getTriggerDOMNode) return getTriggerDOMNode(_this.triggerRef.current);
                try {
                    var domNode = _findDOMNodeDefault.default(_this.triggerRef.current);
                    if (domNode) return domNode;
                } catch (err) {}
                return _reactDomDefault.default.findDOMNode(_assertThisInitializedDefault.default(_this));
            };
            _this.getPopupClassNameFromAlign = function(align) {
                var className = [];
                var _this$props = _this.props, popupPlacement = _this$props.popupPlacement, builtinPlacements = _this$props.builtinPlacements, prefixCls = _this$props.prefixCls, alignPoint = _this$props.alignPoint, getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;
                if (popupPlacement && builtinPlacements) className.push(_alignUtil.getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
                if (getPopupClassNameFromAlign) className.push(getPopupClassNameFromAlign(align));
                return className.join(' ');
            };
            _this.getComponent = function() {
                var _this$props2 = _this.props, prefixCls = _this$props2.prefixCls, destroyPopupOnHide = _this$props2.destroyPopupOnHide, popupClassName = _this$props2.popupClassName, onPopupAlign = _this$props2.onPopupAlign, popupMotion = _this$props2.popupMotion, popupAnimation = _this$props2.popupAnimation, popupTransitionName = _this$props2.popupTransitionName, popupStyle = _this$props2.popupStyle, mask = _this$props2.mask, maskAnimation = _this$props2.maskAnimation, maskTransitionName = _this$props2.maskTransitionName, maskMotion = _this$props2.maskMotion, zIndex = _this$props2.zIndex, popup = _this$props2.popup, stretch = _this$props2.stretch, alignPoint = _this$props2.alignPoint, mobile = _this$props2.mobile, forceRender = _this$props2.forceRender;
                var _this$state = _this.state, popupVisible = _this$state.popupVisible, point = _this$state.point;
                var align = _this.getPopupAlign();
                var mouseProps = {};
                if (_this.isMouseEnterToShow()) mouseProps.onMouseEnter = _this.onPopupMouseEnter;
                if (_this.isMouseLeaveToHide()) mouseProps.onMouseLeave = _this.onPopupMouseLeave;
                mouseProps.onMouseDown = _this.onPopupMouseDown;
                mouseProps.onTouchStart = _this.onPopupMouseDown;
                return /*#__PURE__*/ _react.createElement(_popupDefault.default, _extendsDefault.default({
                    prefixCls: prefixCls,
                    destroyPopupOnHide: destroyPopupOnHide,
                    visible: popupVisible,
                    point: alignPoint && point,
                    className: popupClassName,
                    align: align,
                    onAlign: onPopupAlign,
                    animation: popupAnimation,
                    getClassNameFromAlign: _this.getPopupClassNameFromAlign
                }, mouseProps, {
                    stretch: stretch,
                    getRootDomNode: _this.getRootDomNode,
                    style: popupStyle,
                    mask: mask,
                    zIndex: zIndex,
                    transitionName: popupTransitionName,
                    maskAnimation: maskAnimation,
                    maskTransitionName: maskTransitionName,
                    maskMotion: maskMotion,
                    ref: _this.popupRef,
                    motion: popupMotion,
                    mobile: mobile,
                    forceRender: forceRender
                }), typeof popup === 'function' ? popup() : popup);
            };
            _this.attachParent = function(popupContainer) {
                _rafDefault.default.cancel(_this.attachId);
                var _this$props3 = _this.props, getPopupContainer = _this$props3.getPopupContainer, getDocument = _this$props3.getDocument;
                var domNode = _this.getRootDomNode();
                var mountNode;
                if (!getPopupContainer) mountNode = getDocument(_this.getRootDomNode()).body;
                else if (domNode || getPopupContainer.length === 0) // Compatible for legacy getPopupContainer with domNode argument.
                // If no need `domNode` argument, will call directly.
                // https://codesandbox.io/s/eloquent-mclean-ss93m?file=/src/App.js
                mountNode = getPopupContainer(domNode);
                if (mountNode) mountNode.appendChild(popupContainer);
                else // Retry after frame render in case parent not ready
                _this.attachId = _rafDefault.default(function() {
                    _this.attachParent(popupContainer);
                });
            };
            _this.getContainer = function() {
                var getDocument = _this.props.getDocument;
                var popupContainer = getDocument(_this.getRootDomNode()).createElement('div'); // Make sure default popup container will never cause scrollbar appearing
                // https://github.com/react-component/trigger/issues/41
                popupContainer.style.position = 'absolute';
                popupContainer.style.top = '0';
                popupContainer.style.left = '0';
                popupContainer.style.width = '100%';
                _this.attachParent(popupContainer);
                return popupContainer;
            };
            _this.setPoint = function(point) {
                var alignPoint = _this.props.alignPoint;
                if (!alignPoint || !point) return;
                _this.setState({
                    point: {
                        pageX: point.pageX,
                        pageY: point.pageY
                    }
                });
            };
            _this.handlePortalUpdate = function() {
                if (_this.state.prevPopupVisible !== _this.state.popupVisible) _this.props.afterPopupVisibleChange(_this.state.popupVisible);
            };
            _this.triggerContextValue = {
                onPopupMouseDown: _this.onPopupMouseDown
            };
            var _popupVisible;
            if ('popupVisible' in props) _popupVisible = !!props.popupVisible;
            else _popupVisible = !!props.defaultPopupVisible;
            _this.state = {
                prevPopupVisible: _popupVisible,
                popupVisible: _popupVisible
            };
            ALL_HANDLERS.forEach(function(h) {
                _this["fire".concat(h)] = function(e) {
                    _this.fireEvents(h, e);
                };
            });
            return _this;
        }
        _createClassDefault.default(Trigger, [
            {
                key: "componentDidMount",
                value: function componentDidMount() {
                    this.componentDidUpdate();
                }
            },
            {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                    var props = this.props;
                    var state = this.state; // We must listen to `mousedown` or `touchstart`, edge case:
                    // https://github.com/ant-design/ant-design/issues/5804
                    // https://github.com/react-component/calendar/issues/250
                    // https://github.com/react-component/trigger/issues/50
                    if (state.popupVisible) {
                        var currentDocument;
                        if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
                            currentDocument = props.getDocument(this.getRootDomNode());
                            this.clickOutsideHandler = _addEventListenerDefault.default(currentDocument, 'mousedown', this.onDocumentClick);
                        } // always hide on mobile
                        if (!this.touchOutsideHandler) {
                            currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
                            this.touchOutsideHandler = _addEventListenerDefault.default(currentDocument, 'touchstart', this.onDocumentClick);
                        } // close popup when trigger type contains 'onContextMenu' and document is scrolling.
                        if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
                            currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
                            this.contextMenuOutsideHandler1 = _addEventListenerDefault.default(currentDocument, 'scroll', this.onContextMenuClose);
                        } // close popup when trigger type contains 'onContextMenu' and window is blur.
                        if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) this.contextMenuOutsideHandler2 = _addEventListenerDefault.default(window, 'blur', this.onContextMenuClose);
                        return;
                    }
                    this.clearOutsideHandler();
                }
            },
            {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                    this.clearDelayTimer();
                    this.clearOutsideHandler();
                    clearTimeout(this.mouseDownTimeout);
                    _rafDefault.default.cancel(this.attachId);
                }
            },
            {
                key: "getPopupDomNode",
                value: function getPopupDomNode() {
                    var _this$popupRef$curren2;
                    // for test
                    return ((_this$popupRef$curren2 = this.popupRef.current) === null || _this$popupRef$curren2 === void 0 ? void 0 : _this$popupRef$curren2.getElement()) || null;
                }
            },
            {
                key: "getPopupAlign",
                value: function getPopupAlign() {
                    var props = this.props;
                    var popupPlacement = props.popupPlacement, popupAlign = props.popupAlign, builtinPlacements = props.builtinPlacements;
                    if (popupPlacement && builtinPlacements) return _alignUtil.getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
                    return popupAlign;
                }
            },
            {
                key: "setPopupVisible",
                value: /**
       * @param popupVisible    Show or not the popup element
       * @param event           SyntheticEvent, used for `pointAlign`
       */ function setPopupVisible(popupVisible, event) {
                    var alignPoint = this.props.alignPoint;
                    var prevPopupVisible = this.state.popupVisible;
                    this.clearDelayTimer();
                    if (prevPopupVisible !== popupVisible) {
                        if (!('popupVisible' in this.props)) this.setState({
                            popupVisible: popupVisible,
                            prevPopupVisible: prevPopupVisible
                        });
                        this.props.onPopupVisibleChange(popupVisible);
                    } // Always record the point position since mouseEnterDelay will delay the show
                    if (alignPoint && event && popupVisible) this.setPoint(event);
                }
            },
            {
                key: "delaySetPopupVisible",
                value: function delaySetPopupVisible(visible, delayS, event) {
                    var _this2 = this;
                    var delay = delayS * 1000;
                    this.clearDelayTimer();
                    if (delay) {
                        var point = event ? {
                            pageX: event.pageX,
                            pageY: event.pageY
                        } : null;
                        this.delayTimer = window.setTimeout(function() {
                            _this2.setPopupVisible(visible, point);
                            _this2.clearDelayTimer();
                        }, delay);
                    } else this.setPopupVisible(visible, event);
                }
            },
            {
                key: "clearDelayTimer",
                value: function clearDelayTimer() {
                    if (this.delayTimer) {
                        clearTimeout(this.delayTimer);
                        this.delayTimer = null;
                    }
                }
            },
            {
                key: "clearOutsideHandler",
                value: function clearOutsideHandler() {
                    if (this.clickOutsideHandler) {
                        this.clickOutsideHandler.remove();
                        this.clickOutsideHandler = null;
                    }
                    if (this.contextMenuOutsideHandler1) {
                        this.contextMenuOutsideHandler1.remove();
                        this.contextMenuOutsideHandler1 = null;
                    }
                    if (this.contextMenuOutsideHandler2) {
                        this.contextMenuOutsideHandler2.remove();
                        this.contextMenuOutsideHandler2 = null;
                    }
                    if (this.touchOutsideHandler) {
                        this.touchOutsideHandler.remove();
                        this.touchOutsideHandler = null;
                    }
                }
            },
            {
                key: "createTwoChains",
                value: function createTwoChains(event) {
                    var childPros = this.props.children.props;
                    var props = this.props;
                    if (childPros[event] && props[event]) return this["fire".concat(event)];
                    return childPros[event] || props[event];
                }
            },
            {
                key: "isClickToShow",
                value: function isClickToShow() {
                    var _this$props4 = this.props, action = _this$props4.action, showAction = _this$props4.showAction;
                    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
                }
            },
            {
                key: "isContextMenuOnly",
                value: function isContextMenuOnly() {
                    var action = this.props.action;
                    return action === 'contextMenu' || action.length === 1 && action[0] === 'contextMenu';
                }
            },
            {
                key: "isContextMenuToShow",
                value: function isContextMenuToShow() {
                    var _this$props5 = this.props, action = _this$props5.action, showAction = _this$props5.showAction;
                    return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
                }
            },
            {
                key: "isClickToHide",
                value: function isClickToHide() {
                    var _this$props6 = this.props, action = _this$props6.action, hideAction = _this$props6.hideAction;
                    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
                }
            },
            {
                key: "isMouseEnterToShow",
                value: function isMouseEnterToShow() {
                    var _this$props7 = this.props, action = _this$props7.action, showAction = _this$props7.showAction;
                    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
                }
            },
            {
                key: "isMouseLeaveToHide",
                value: function isMouseLeaveToHide() {
                    var _this$props8 = this.props, action = _this$props8.action, hideAction = _this$props8.hideAction;
                    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
                }
            },
            {
                key: "isFocusToShow",
                value: function isFocusToShow() {
                    var _this$props9 = this.props, action = _this$props9.action, showAction = _this$props9.showAction;
                    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
                }
            },
            {
                key: "isBlurToHide",
                value: function isBlurToHide() {
                    var _this$props10 = this.props, action = _this$props10.action, hideAction = _this$props10.hideAction;
                    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
                }
            },
            {
                key: "forcePopupAlign",
                value: function forcePopupAlign() {
                    if (this.state.popupVisible) {
                        var _this$popupRef$curren3;
                        (_this$popupRef$curren3 = this.popupRef.current) === null || _this$popupRef$curren3 === void 0 || _this$popupRef$curren3.forceAlign();
                    }
                }
            },
            {
                key: "fireEvents",
                value: function fireEvents(type, e) {
                    var childCallback = this.props.children.props[type];
                    if (childCallback) childCallback(e);
                    var callback = this.props[type];
                    if (callback) callback(e);
                }
            },
            {
                key: "close",
                value: function close() {
                    this.setPopupVisible(false);
                }
            },
            {
                key: "render",
                value: function render() {
                    var popupVisible = this.state.popupVisible;
                    var _this$props11 = this.props, children = _this$props11.children, forceRender = _this$props11.forceRender, alignPoint = _this$props11.alignPoint, className = _this$props11.className, autoDestroy = _this$props11.autoDestroy;
                    var child = _react.Children.only(children);
                    var newChildProps = {
                        key: 'trigger'
                    }; // ============================== Visible Handlers ==============================
                    // >>> ContextMenu
                    if (this.isContextMenuToShow()) newChildProps.onContextMenu = this.onContextMenu;
                    else newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
                     // >>> Click
                    if (this.isClickToHide() || this.isClickToShow()) {
                        newChildProps.onClick = this.onClick;
                        newChildProps.onMouseDown = this.onMouseDown;
                        newChildProps.onTouchStart = this.onTouchStart;
                    } else {
                        newChildProps.onClick = this.createTwoChains('onClick');
                        newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
                        newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
                    } // >>> Hover(enter)
                    if (this.isMouseEnterToShow()) {
                        newChildProps.onMouseEnter = this.onMouseEnter; // Point align
                        if (alignPoint) newChildProps.onMouseMove = this.onMouseMove;
                    } else newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
                     // >>> Hover(leave)
                    if (this.isMouseLeaveToHide()) newChildProps.onMouseLeave = this.onMouseLeave;
                    else newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
                     // >>> Focus
                    if (this.isFocusToShow() || this.isBlurToHide()) {
                        newChildProps.onFocus = this.onFocus;
                        newChildProps.onBlur = this.onBlur;
                    } else {
                        newChildProps.onFocus = this.createTwoChains('onFocus');
                        newChildProps.onBlur = this.createTwoChains('onBlur');
                    } // =================================== Render ===================================
                    var childrenClassName = _classnamesDefault.default(child && child.props && child.props.className, className);
                    if (childrenClassName) newChildProps.className = childrenClassName;
                    var cloneProps = _objectSpread2Default.default({}, newChildProps);
                    if (_ref.supportRef(child)) cloneProps.ref = _ref.composeRef(this.triggerRef, child.ref);
                    var trigger = /*#__PURE__*/ _react.cloneElement(child, cloneProps);
                    var portal; // prevent unmounting after it's rendered
                    if (popupVisible || this.popupRef.current || forceRender) portal = /*#__PURE__*/ _react.createElement(PortalComponent, {
                        key: "portal",
                        getContainer: this.getContainer,
                        didUpdate: this.handlePortalUpdate
                    }, this.getComponent());
                    if (!popupVisible && autoDestroy) portal = null;
                    return /*#__PURE__*/ _react.createElement(_contextDefault.default.Provider, {
                        value: this.triggerContextValue
                    }, trigger, portal);
                }
            }
        ], [
            {
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(_ref1, prevState) {
                    var popupVisible = _ref1.popupVisible;
                    var newState = {};
                    if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
                        newState.popupVisible = popupVisible;
                        newState.prevPopupVisible = prevState.popupVisible;
                    }
                    return newState;
                }
            }
        ]);
        return Trigger;
    }(_react.Component);
    Trigger1.contextType = _contextDefault.default;
    Trigger1.defaultProps = {
        prefixCls: 'rc-trigger-popup',
        getPopupClassNameFromAlign: returnEmptyString,
        getDocument: returnDocument,
        onPopupVisibleChange: noop,
        afterPopupVisibleChange: noop,
        onPopupAlign: noop,
        popupClassName: '',
        mouseEnterDelay: 0,
        mouseLeaveDelay: 0.1,
        focusDelay: 0,
        blurDelay: 0.15,
        popupStyle: {},
        destroyPopupOnHide: false,
        popupAlign: {},
        defaultPopupVisible: false,
        mask: false,
        maskClosable: true,
        action: [],
        showAction: [],
        hideAction: [],
        autoDestroy: false
    };
    return Trigger1;
}
exports.default = generateTrigger(_portalDefault.default);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/assertThisInitialized":"5wGTe","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","react-dom":"hKAbJ","rc-util/es/raf":"h9LA9","rc-util/es/Dom/contains":"1BmkL","rc-util/es/Dom/findDOMNode":"dwUfQ","rc-util/es/ref":"bvnCQ","rc-util/es/Dom/addEventListener":"751ZW","rc-util/es/Portal":"ckHxh","classnames":"dFgpN","./utils/alignUtil":"9uDiP","./Popup":"b3dhe","./context":"cB6xo","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1BmkL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function contains(root, n) {
    if (!root) return false;
    return root.contains(n);
}
exports.default = contains;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"751ZW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
function addEventListenerWrap(target, eventType, cb, option) {
    /* eslint camelcase: 2 */ var callback = _reactDomDefault.default.unstable_batchedUpdates ? function run(e) {
        _reactDomDefault.default.unstable_batchedUpdates(cb, e);
    } : cb;
    if (target.addEventListener) target.addEventListener(eventType, callback, option);
    return {
        remove: function remove() {
            if (target.removeEventListener) target.removeEventListener(eventType, callback);
        }
    };
}
exports.default = addEventListenerWrap;

},{"react-dom":"hKAbJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ckHxh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _canUseDom = require("./Dom/canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var Portal = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var didUpdate = props.didUpdate, getContainer = props.getContainer, children = props.children;
    var containerRef = _react.useRef(); // Ref return nothing, only for wrapper check exist
    _react.useImperativeHandle(ref, function() {
        return {};
    }); // Create container in client side with sync to avoid useEffect not get ref
    var initRef = _react.useRef(false);
    if (!initRef.current && _canUseDomDefault.default()) {
        containerRef.current = getContainer();
        initRef.current = true;
    } // [Legacy] Used by `rc-trigger`
    _react.useEffect(function() {
        didUpdate === null || didUpdate === void 0 || didUpdate(props);
    });
    _react.useEffect(function() {
        return function() {
            var _containerRef$current, _containerRef$current2;
            // [Legacy] This should not be handle by Portal but parent PortalWrapper instead.
            // Since some component use `Portal` directly, we have to keep the logic here.
            (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 || (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 || _containerRef$current2.removeChild(containerRef.current);
        };
    }, []);
    return containerRef.current ? /*#__PURE__*/ _reactDomDefault.default.createPortal(children, containerRef.current) : null;
});
exports.default = Portal;

},{"react":"b4tPL","react-dom":"hKAbJ","./Dom/canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9uDiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAlignFromPlacement", ()=>getAlignFromPlacement
);
parcelHelpers.export(exports, "getAlignPopupClassName", ()=>getAlignPopupClassName
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
function isPointsEq(a1, a2, isAlignPoint) {
    if (isAlignPoint) return a1[0] === a2[0];
    return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignFromPlacement(builtinPlacements, placementStr, align) {
    var baseAlign = builtinPlacements[placementStr] || {};
    return _objectSpread2Default.default(_objectSpread2Default.default({}, baseAlign), align);
}
function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    var placements = Object.keys(builtinPlacements);
    for(var i = 0; i < placements.length; i += 1){
        var placement = placements[i];
        if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) return "".concat(prefixCls, "-placement-").concat(placement);
    }
    return '';
}

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"b3dhe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _isMobile = require("rc-util/es/isMobile");
var _isMobileDefault = parcelHelpers.interopDefault(_isMobile);
var _mask = require("./Mask");
var _maskDefault = parcelHelpers.interopDefault(_mask);
var _popupInner = require("./PopupInner");
var _popupInnerDefault = parcelHelpers.interopDefault(_popupInner);
var _mobilePopupInner = require("./MobilePopupInner");
var _mobilePopupInnerDefault = parcelHelpers.interopDefault(_mobilePopupInner);
var _excluded = [
    "visible",
    "mobile"
];
var Popup = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var visible = _ref.visible, mobile = _ref.mobile, props = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var _useState = _react.useState(visible), _useState2 = _slicedToArrayDefault.default(_useState, 2), innerVisible = _useState2[0], serInnerVisible = _useState2[1];
    var _useState3 = _react.useState(false), _useState4 = _slicedToArrayDefault.default(_useState3, 2), inMobile = _useState4[0], setInMobile = _useState4[1];
    var cloneProps = _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        visible: innerVisible
    }); // We check mobile in visible changed here.
    // And this also delay set `innerVisible` to avoid popup component render flash
    _react.useEffect(function() {
        serInnerVisible(visible);
        if (visible && mobile) setInMobile(_isMobileDefault.default());
    }, [
        visible,
        mobile
    ]);
    var popupNode = inMobile ? /*#__PURE__*/ _react.createElement(_mobilePopupInnerDefault.default, _extendsDefault.default({}, cloneProps, {
        mobile: mobile,
        ref: ref
    })) : /*#__PURE__*/ _react.createElement(_popupInnerDefault.default, _extendsDefault.default({}, cloneProps, {
        ref: ref
    })); // We can use fragment directly but this may failed some selector usage. Keep as origin logic
    return /*#__PURE__*/ _react.createElement("div", null, /*#__PURE__*/ _react.createElement(_maskDefault.default, cloneProps), popupNode);
});
Popup.displayName = 'Popup';
exports.default = Popup;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","rc-util/es/isMobile":"6m4Jz","./Mask":"89kYY","./PopupInner":"5lYIa","./MobilePopupInner":"3Eize","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"89kYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _legacyUtil = require("../utils/legacyUtil");
function Mask(props) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, mask = props.mask, maskMotion = props.maskMotion, maskAnimation = props.maskAnimation, maskTransitionName = props.maskTransitionName;
    if (!mask) return null;
    var motion = {};
    if (maskMotion || maskTransitionName || maskAnimation) motion = _objectSpread2Default.default({
        motionAppear: true
    }, _legacyUtil.getMotion({
        motion: maskMotion,
        prefixCls: prefixCls,
        transitionName: maskTransitionName,
        animation: maskAnimation
    }));
    return /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, _extendsDefault.default({}, motion, {
        visible: visible,
        removeOnLeave: true
    }), function(_ref) {
        var className = _ref.className;
        return /*#__PURE__*/ _react.createElement("div", {
            style: {
                zIndex: zIndex
            },
            className: _classnamesDefault.default("".concat(prefixCls, "-mask"), className)
        });
    });
}
exports.default = Mask;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","classnames":"dFgpN","rc-motion":"01wSt","../utils/legacyUtil":"3P2yu","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3P2yu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMotion", ()=>getMotion
);
function getMotion(_ref) {
    var prefixCls = _ref.prefixCls, motion = _ref.motion, animation = _ref.animation, transitionName = _ref.transitionName;
    if (motion) return motion;
    if (animation) return {
        motionName: "".concat(prefixCls, "-").concat(animation)
    };
    if (transitionName) return {
        motionName: transitionName
    };
    return null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5lYIa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _rcAlign = require("rc-align");
var _rcAlignDefault = parcelHelpers.interopDefault(_rcAlign);
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useVisibleStatus = require("./useVisibleStatus");
var _useVisibleStatusDefault = parcelHelpers.interopDefault(_useVisibleStatus);
var _legacyUtil = require("../utils/legacyUtil");
var _useStretchStyle = require("./useStretchStyle");
var _useStretchStyleDefault = parcelHelpers.interopDefault(_useStretchStyle);
var PopupInner = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var visible = props.visible, prefixCls = props.prefixCls, className = props.className, style = props.style, children = props.children, zIndex = props.zIndex, stretch = props.stretch, destroyPopupOnHide = props.destroyPopupOnHide, forceRender = props.forceRender, align = props.align, point = props.point, getRootDomNode = props.getRootDomNode, getClassNameFromAlign = props.getClassNameFromAlign, onAlign = props.onAlign, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onMouseDown = props.onMouseDown, onTouchStart = props.onTouchStart;
    var alignRef = _react.useRef();
    var elementRef = _react.useRef();
    var _useState = _react.useState(), _useState2 = _slicedToArrayDefault.default(_useState, 2), alignedClassName = _useState2[0], setAlignedClassName = _useState2[1]; // ======================= Measure ========================
    var _useStretchStyle1 = _useStretchStyleDefault.default(stretch), _useStretchStyle2 = _slicedToArrayDefault.default(_useStretchStyle1, 2), stretchStyle = _useStretchStyle2[0], measureStretchStyle = _useStretchStyle2[1];
    function doMeasure() {
        if (stretch) measureStretchStyle(getRootDomNode());
    } // ======================== Status ========================
    var _useVisibleStatus1 = _useVisibleStatusDefault.default(visible, doMeasure), _useVisibleStatus2 = _slicedToArrayDefault.default(_useVisibleStatus1, 2), status = _useVisibleStatus2[0], goNextStatus = _useVisibleStatus2[1]; // ======================== Aligns ========================
    var prepareResolveRef = _react.useRef(); // `target` on `rc-align` can accept as a function to get the bind element or a point.
    // ref: https://www.npmjs.com/package/rc-align
    function getAlignTarget() {
        if (point) return point;
        return getRootDomNode;
    }
    function forceAlign() {
        var _alignRef$current;
        (_alignRef$current = alignRef.current) === null || _alignRef$current === void 0 || _alignRef$current.forceAlign();
    }
    function onInternalAlign(popupDomNode, matchAlign) {
        var nextAlignedClassName = getClassNameFromAlign(matchAlign);
        if (alignedClassName !== nextAlignedClassName) setAlignedClassName(nextAlignedClassName);
        if (status === 'align') {
            // Repeat until not more align needed
            if (alignedClassName !== nextAlignedClassName) Promise.resolve().then(function() {
                forceAlign();
            });
            else goNextStatus(function() {
                var _prepareResolveRef$cu;
                (_prepareResolveRef$cu = prepareResolveRef.current) === null || _prepareResolveRef$cu === void 0 || _prepareResolveRef$cu.call(prepareResolveRef);
            });
            onAlign === null || onAlign === void 0 || onAlign(popupDomNode, matchAlign);
        }
    } // ======================== Motion ========================
    var motion = _objectSpread2Default.default({}, _legacyUtil.getMotion(props));
    [
        'onAppearEnd',
        'onEnterEnd',
        'onLeaveEnd'
    ].forEach(function(eventName) {
        var originHandler = motion[eventName];
        motion[eventName] = function(element, event) {
            goNextStatus();
            return originHandler === null || originHandler === void 0 ? void 0 : originHandler(element, event);
        };
    });
    function onShowPrepare() {
        return new Promise(function(resolve) {
            prepareResolveRef.current = resolve;
        });
    } // Go to stable directly when motion not provided
    _react.useEffect(function() {
        if (!motion.motionName && status === 'motion') goNextStatus();
    }, [
        motion.motionName,
        status
    ]); // ========================= Refs =========================
    _react.useImperativeHandle(ref, function() {
        return {
            forceAlign: forceAlign,
            getElement: function getElement() {
                return elementRef.current;
            }
        };
    }); // ======================== Render ========================
    var mergedStyle = _objectSpread2Default.default(_objectSpread2Default.default({}, stretchStyle), {}, {
        zIndex: zIndex,
        opacity: status === 'motion' || status === 'stable' || !visible ? undefined : 0,
        pointerEvents: status === 'stable' ? undefined : 'none'
    }, style); // Align status
    var alignDisabled = true;
    if ((align === null || align === void 0 ? void 0 : align.points) && (status === 'align' || status === 'stable')) alignDisabled = false;
    var childNode = children; // Wrapper when multiple children
    if (_react.Children.count(children) > 1) childNode = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-content")
    }, children);
    return /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, _extendsDefault.default({
        visible: visible,
        ref: elementRef,
        leavedClassName: "".concat(prefixCls, "-hidden")
    }, motion, {
        onAppearPrepare: onShowPrepare,
        onEnterPrepare: onShowPrepare,
        removeOnLeave: destroyPopupOnHide,
        forceRender: forceRender
    }), function(_ref, motionRef) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        var mergedClassName = _classnamesDefault.default(prefixCls, className, alignedClassName, motionClassName);
        return /*#__PURE__*/ _react.createElement(_rcAlignDefault.default, {
            target: getAlignTarget(),
            key: "popup",
            ref: alignRef,
            monitorWindowResize: true,
            disabled: alignDisabled,
            align: align,
            onAlign: onInternalAlign
        }, /*#__PURE__*/ _react.createElement("div", {
            ref: motionRef,
            className: mergedClassName,
            onMouseEnter: onMouseEnter,
            onMouseLeave: onMouseLeave,
            onMouseDownCapture: onMouseDown,
            onTouchStartCapture: onTouchStart,
            style: _objectSpread2Default.default(_objectSpread2Default.default({}, motionStyle), mergedStyle)
        }, childNode));
    });
});
PopupInner.displayName = 'PopupInner';
exports.default = PopupInner;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-align":"7ERih","rc-motion":"01wSt","classnames":"dFgpN","./useVisibleStatus":"kqJ4o","../utils/legacyUtil":"3P2yu","./useStretchStyle":"fezd2","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7ERih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// export this package's api
var _align = require("./Align");
var _alignDefault = parcelHelpers.interopDefault(_align);
exports.default = _alignDefault.default;

},{"./Align":"9W1zQ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9W1zQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
/**
 * Removed props:
 *  - childrenProps
 */ var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _ref = require("rc-util/es/ref");
var _isVisible = require("rc-util/es/Dom/isVisible");
var _isVisibleDefault = parcelHelpers.interopDefault(_isVisible);
var _domAlign = require("dom-align");
var _addEventListener = require("rc-util/es/Dom/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _isEqual = require("lodash/isEqual");
var _isEqualDefault = parcelHelpers.interopDefault(_isEqual);
var _util = require("./util");
var _useBuffer = require("./hooks/useBuffer");
var _useBufferDefault = parcelHelpers.interopDefault(_useBuffer);
function getElement(func) {
    if (typeof func !== 'function') return null;
    return func();
}
function getPoint(point) {
    if (_typeofDefault.default(point) !== 'object' || !point) return null;
    return point;
}
var Align = function Align(_ref1, ref) {
    var children = _ref1.children, disabled = _ref1.disabled, target = _ref1.target, align = _ref1.align, onAlign = _ref1.onAlign, monitorWindowResize = _ref1.monitorWindowResize, _ref$monitorBufferTim = _ref1.monitorBufferTime, monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
    var cacheRef = _reactDefault.default.useRef({});
    var nodeRef = _reactDefault.default.useRef();
    var childNode = _reactDefault.default.Children.only(children); // ===================== Align ======================
    // We save the props here to avoid closure makes props ood
    var forceAlignPropsRef = _reactDefault.default.useRef({});
    forceAlignPropsRef.current.disabled = disabled;
    forceAlignPropsRef.current.target = target;
    forceAlignPropsRef.current.align = align;
    forceAlignPropsRef.current.onAlign = onAlign;
    var _useBuffer1 = _useBufferDefault.default(function() {
        var _forceAlignPropsRef$c = forceAlignPropsRef.current, latestDisabled = _forceAlignPropsRef$c.disabled, latestTarget = _forceAlignPropsRef$c.target, latestAlign = _forceAlignPropsRef$c.align, latestOnAlign = _forceAlignPropsRef$c.onAlign;
        if (!latestDisabled && latestTarget) {
            var source = nodeRef.current;
            var result;
            var element = getElement(latestTarget);
            var point = getPoint(latestTarget);
            cacheRef.current.element = element;
            cacheRef.current.point = point;
            cacheRef.current.align = latestAlign; // IE lose focus after element realign
            // We should record activeElement and restore later
            // IE lose focus after element realign
            // We should record activeElement and restore later
            var _document = document, activeElement = _document.activeElement; // We only align when element is visible
            // We only align when element is visible
            if (element && _isVisibleDefault.default(element)) result = _domAlign.alignElement(source, element, latestAlign);
            else if (point) result = _domAlign.alignPoint(source, point, latestAlign);
            _util.restoreFocus(activeElement, source);
            if (latestOnAlign && result) latestOnAlign(source, result);
            return true;
        }
        return false;
    }, monitorBufferTime), _useBuffer2 = _slicedToArrayDefault.default(_useBuffer1, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1]; // ===================== Effect =====================
    // Listen for target updated
    var resizeMonitor = _reactDefault.default.useRef({
        cancel: function cancel() {}
    }); // Listen for source updated
    var sourceResizeMonitor = _reactDefault.default.useRef({
        cancel: function cancel() {}
    });
    _reactDefault.default.useEffect(function() {
        var element = getElement(target);
        var point = getPoint(target);
        if (nodeRef.current !== sourceResizeMonitor.current.element) {
            sourceResizeMonitor.current.cancel();
            sourceResizeMonitor.current.element = nodeRef.current;
            sourceResizeMonitor.current.cancel = _util.monitorResize(nodeRef.current, _forceAlign);
        }
        if (cacheRef.current.element !== element || !_util.isSamePoint(cacheRef.current.point, point) || !_isEqualDefault.default(cacheRef.current.align, align)) {
            _forceAlign(); // Add resize observer
            if (resizeMonitor.current.element !== element) {
                resizeMonitor.current.cancel();
                resizeMonitor.current.element = element;
                resizeMonitor.current.cancel = _util.monitorResize(element, _forceAlign);
            }
        }
    }); // Listen for disabled change
    _reactDefault.default.useEffect(function() {
        if (!disabled) _forceAlign();
        else cancelForceAlign();
    }, [
        disabled
    ]); // Listen for window resize
    var winResizeRef = _reactDefault.default.useRef(null);
    _reactDefault.default.useEffect(function() {
        if (monitorWindowResize) {
            if (!winResizeRef.current) winResizeRef.current = _addEventListenerDefault.default(window, 'resize', _forceAlign);
        } else if (winResizeRef.current) {
            winResizeRef.current.remove();
            winResizeRef.current = null;
        }
    }, [
        monitorWindowResize
    ]); // Clear all if unmount
    _reactDefault.default.useEffect(function() {
        return function() {
            resizeMonitor.current.cancel();
            sourceResizeMonitor.current.cancel();
            if (winResizeRef.current) winResizeRef.current.remove();
            cancelForceAlign();
        };
    }, []); // ====================== Ref =======================
    _reactDefault.default.useImperativeHandle(ref, function() {
        return {
            forceAlign: function forceAlign() {
                return _forceAlign(true);
            }
        };
    }); // ===================== Render =====================
    if (/*#__PURE__*/ _reactDefault.default.isValidElement(childNode)) childNode = /*#__PURE__*/ _reactDefault.default.cloneElement(childNode, {
        ref: _ref.composeRef(childNode.ref, nodeRef)
    });
    return childNode;
};
var RcAlign = /*#__PURE__*/ _reactDefault.default.forwardRef(Align);
RcAlign.displayName = 'Align';
exports.default = RcAlign;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","rc-util/es/ref":"bvnCQ","rc-util/es/Dom/isVisible":"lNA7G","dom-align":"ab2Hv","rc-util/es/Dom/addEventListener":"751ZW","lodash/isEqual":"1oU9B","./util":"8KUvU","./hooks/useBuffer":"aNNEe","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lNA7G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(element) {
    if (!element) return false;
    if (element.offsetParent) return true;
    if (element.getBBox) {
        var box = element.getBBox();
        if (box.width || box.height) return true;
    }
    if (element.getBoundingClientRect) {
        var _box = element.getBoundingClientRect();
        if (_box.width || _box.height) return true;
    }
    return false;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ab2Hv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alignElement", ()=>alignElement
);
parcelHelpers.export(exports, "alignPoint", ()=>alignPoint
);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _typeof(obj1) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function(obj) {
        return typeof obj;
    };
    else _typeof = function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return _typeof(obj1);
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var vendorPrefix;
var jsCssMap = {
    Webkit: '-webkit-',
    Moz: '-moz-',
    // IE did it wrong again ...
    ms: '-ms-',
    O: '-o-'
};
function getVendorPrefix() {
    if (vendorPrefix !== undefined) return vendorPrefix;
    vendorPrefix = '';
    var style = document.createElement('p').style;
    var testProp = 'Transform';
    for(var key in jsCssMap)if (key + testProp in style) vendorPrefix = key;
    return vendorPrefix;
}
function getTransitionName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : 'transitionProperty';
}
function getTransformName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : 'transform';
}
function setTransitionProperty(node, value) {
    var name = getTransitionName();
    if (name) {
        node.style[name] = value;
        if (name !== 'transitionProperty') node.style.transitionProperty = value;
    }
}
function setTransform(node, value) {
    var name = getTransformName();
    if (name) {
        node.style[name] = value;
        if (name !== 'transform') node.style.transform = value;
    }
}
function getTransitionProperty(node) {
    return node.style.transitionProperty || node.style[getTransitionName()];
}
function getTransformXY(node) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
    if (transform && transform !== 'none') {
        var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
        return {
            x: parseFloat(matrix[12] || matrix[4], 0),
            y: parseFloat(matrix[13] || matrix[5], 0)
        };
    }
    return {
        x: 0,
        y: 0
    };
}
var matrix2d = /matrix\((.*)\)/;
var matrix3d = /matrix3d\((.*)\)/;
function setTransformXY(node, xy) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
    if (transform && transform !== 'none') {
        var arr;
        var match2d = transform.match(matrix2d);
        if (match2d) {
            match2d = match2d[1];
            arr = match2d.split(',').map(function(item) {
                return parseFloat(item, 10);
            });
            arr[4] = xy.x;
            arr[5] = xy.y;
            setTransform(node, "matrix(".concat(arr.join(','), ")"));
        } else {
            var match3d = transform.match(matrix3d)[1];
            arr = match3d.split(',').map(function(item) {
                return parseFloat(item, 10);
            });
            arr[12] = xy.x;
            arr[13] = xy.y;
            setTransform(node, "matrix3d(".concat(arr.join(','), ")"));
        }
    } else setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
}
var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605
function forceRelayout(elem) {
    var originalStyle = elem.style.display;
    elem.style.display = 'none';
    elem.offsetHeight; // eslint-disable-line
    elem.style.display = originalStyle;
}
function css(el, name, v) {
    var value = v;
    if (_typeof(name) === 'object') {
        for(var i in name)if (name.hasOwnProperty(i)) css(el, i, name[i]);
        return undefined;
    }
    if (typeof value !== 'undefined') {
        if (typeof value === 'number') value = "".concat(value, "px");
        el.style[name] = value;
        return undefined;
    }
    return getComputedStyleX(el, name);
}
function getClientPosition(elem) {
    var box;
    var x;
    var y;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
    box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
    // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
    // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin
    x = box.left;
    y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
    // IE6 standards mode, this border can be overridden by setting the
    // document element's border to zero -- thus, we cannot rely on the
    // offset always being 2 pixels.
    // In quirks mode, the offset can be determined by querying the body's
    // clientLeft/clientTop, but in standards mode, it is found by querying
    // the document element's clientLeft/clientTop.  Since we already called
    // getClientBoundingRect we have already forced a reflow, so it is not
    // too expensive just to query them all.
    // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
    // 窗口边框标准是设 documentElement ,quirks 时设置 body
    // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
    // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
    // 标准 ie 下 docElem.clientTop 就是 border-top
    // ie7 html 即窗口边框改变不了。永远为 2
    // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0
    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
        left: x,
        top: y
    };
}
function getScroll(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');
    if (typeof ret !== 'number') {
        var d = w.document; // ie6,7,8 standard mode
        ret = d.documentElement[method];
        if (typeof ret !== 'number') // quirks mode
        ret = d.body[method];
    }
    return ret;
}
function getScrollLeft(w) {
    return getScroll(w);
}
function getScrollTop(w) {
    return getScroll(w, true);
}
function getOffset(el) {
    var pos = getClientPosition(el);
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft(w);
    pos.top += getScrollTop(w);
    return pos;
}
/**
 * A crude way of determining if an object is a window
 * @member util
 */ function isWindow(obj) {
    // must use == for ie8
    /* eslint eqeqeq:0 */ return obj !== null && obj !== undefined && obj == obj.window;
}
function getDocument(node) {
    if (isWindow(node)) return node.document;
    if (node.nodeType === 9) return node;
    return node.ownerDocument;
}
function _getComputedStyle(elem, name, cs) {
    var computedStyle = cs;
    var val = '';
    var d = getDocument(elem);
    computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61
    if (computedStyle) val = computedStyle.getPropertyValue(name) || computedStyle[name];
    return val;
}
var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), 'i');
var RE_POS = /^(top|right|bottom|left)$/;
var CURRENT_STYLE = 'currentStyle';
var RUNTIME_STYLE = 'runtimeStyle';
var LEFT = 'left';
var PX = 'px';
function _getComputedStyleIE(elem, name) {
    // currentStyle maybe null
    // http://msdn.microsoft.com/en-us/library/ms535231.aspx
    var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
    // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
    // 在 ie 下不对，需要直接用 offset 方式
    // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
    // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // exclude left right for relativity
    if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
        // Remember the original values
        var style = elem.style;
        var left = style[LEFT];
        var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content
        elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out
        style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
        ret = style.pixelLeft + PX; // Revert the changed values
        style[LEFT] = left;
        elem[RUNTIME_STYLE][LEFT] = rsLeft;
    }
    return ret === '' ? 'auto' : ret;
}
if (typeof window !== 'undefined') getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
function getOffsetDirection(dir, option) {
    if (dir === 'left') return option.useCssRight ? 'right' : dir;
    return option.useCssBottom ? 'bottom' : dir;
}
function oppositeOffsetDirection(dir) {
    if (dir === 'left') return 'right';
    else if (dir === 'right') return 'left';
    else if (dir === 'top') return 'bottom';
    else if (dir === 'bottom') return 'top';
} // 设置 elem 相对 elem.ownerDocument 的坐标
function setLeftTop(elem, offset, option) {
    // set position first, in-case top/left are set even on static elem
    if (css(elem, 'position') === 'static') elem.style.position = 'relative';
    var presetH = -999;
    var presetV = -999;
    var horizontalProperty = getOffsetDirection('left', option);
    var verticalProperty = getOffsetDirection('top', option);
    var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
    var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
    if (horizontalProperty !== 'left') presetH = 999;
    if (verticalProperty !== 'top') presetV = 999;
    var originalTransition = '';
    var originalOffset = getOffset(elem);
    if ('left' in offset || 'top' in offset) {
        originalTransition = getTransitionProperty(elem) || '';
        setTransitionProperty(elem, 'none');
    }
    if ('left' in offset) {
        elem.style[oppositeHorizontalProperty] = '';
        elem.style[horizontalProperty] = "".concat(presetH, "px");
    }
    if ('top' in offset) {
        elem.style[oppositeVerticalProperty] = '';
        elem.style[verticalProperty] = "".concat(presetV, "px");
    } // force relayout
    forceRelayout(elem);
    var old = getOffset(elem);
    var originalStyle = {};
    for(var key in offset)if (offset.hasOwnProperty(key)) {
        var dir = getOffsetDirection(key, option);
        var preset = key === 'left' ? presetH : presetV;
        var off = originalOffset[key] - old[key];
        if (dir === key) originalStyle[dir] = preset + off;
        else originalStyle[dir] = preset - off;
    }
    css(elem, originalStyle); // force relayout
    forceRelayout(elem);
    if ('left' in offset || 'top' in offset) setTransitionProperty(elem, originalTransition);
    var ret = {};
    for(var _key in offset)if (offset.hasOwnProperty(_key)) {
        var _dir = getOffsetDirection(_key, option);
        var _off = offset[_key] - originalOffset[_key];
        if (_key === _dir) ret[_dir] = originalStyle[_dir] + _off;
        else ret[_dir] = originalStyle[_dir] - _off;
    }
    css(elem, ret);
}
function setTransform$1(elem, offset) {
    var originalOffset = getOffset(elem);
    var originalXY = getTransformXY(elem);
    var resultXY = {
        x: originalXY.x,
        y: originalXY.y
    };
    if ('left' in offset) resultXY.x = originalXY.x + offset.left - originalOffset.left;
    if ('top' in offset) resultXY.y = originalXY.y + offset.top - originalOffset.top;
    setTransformXY(elem, resultXY);
}
function setOffset(elem, offset, option) {
    if (option.ignoreShake) {
        var oriOffset = getOffset(elem);
        var oLeft = oriOffset.left.toFixed(0);
        var oTop = oriOffset.top.toFixed(0);
        var tLeft = offset.left.toFixed(0);
        var tTop = offset.top.toFixed(0);
        if (oLeft === tLeft && oTop === tTop) return;
    }
    if (option.useCssRight || option.useCssBottom) setLeftTop(elem, offset, option);
    else if (option.useCssTransform && getTransformName() in document.body.style) setTransform$1(elem, offset);
    else setLeftTop(elem, offset, option);
}
function each(arr, fn) {
    for(var i = 0; i < arr.length; i++)fn(arr[i]);
}
function isBorderBoxFn(elem) {
    return getComputedStyleX(elem, 'boxSizing') === 'border-box';
}
var BOX_MODELS = [
    'margin',
    'border',
    'padding'
];
var CONTENT_INDEX = -1;
var PADDING_INDEX = 2;
var BORDER_INDEX = 1;
var MARGIN_INDEX = 0;
function swap(elem, options, callback) {
    var old = {};
    var style = elem.style;
    var name; // Remember the old values, and insert the new ones
    for(name in options)if (options.hasOwnProperty(name)) {
        old[name] = style[name];
        style[name] = options[name];
    }
    callback.call(elem); // Revert the old values
    for(name in options)if (options.hasOwnProperty(name)) style[name] = old[name];
}
function getPBMWidth(elem, props, which) {
    var value = 0;
    var prop;
    var j;
    var i;
    for(j = 0; j < props.length; j++){
        prop = props[j];
        if (prop) for(i = 0; i < which.length; i++){
            var cssProp = void 0;
            if (prop === 'border') cssProp = "".concat(prop).concat(which[i], "Width");
            else cssProp = prop + which[i];
            value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
        }
    }
    return value;
}
var domUtils = {
    getParent: function getParent(element) {
        var parent = element;
        do if (parent.nodeType === 11 && parent.host) parent = parent.host;
        else parent = parent.parentNode;
        while (parent && parent.nodeType !== 1 && parent.nodeType !== 9)
        return parent;
    }
};
each([
    'Width',
    'Height'
], function(name) {
    domUtils["doc".concat(name)] = function(refWin) {
        var d = refWin.document;
        return Math.max(// ie standard mode : documentElement.scrollHeight> body.scrollHeight
        d.documentElement["scroll".concat(name)], d.body["scroll".concat(name)], domUtils["viewport".concat(name)](d));
    };
    domUtils["viewport".concat(name)] = function(win) {
        // pc browser includes scrollbar in window.innerWidth
        var prop = "client".concat(name);
        var doc = win.document;
        var body = doc.body;
        var documentElement = doc.documentElement;
        var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
        // backcompat 取 body
        return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
    };
});
/*
 得到元素的大小信息
 @param elem
 @param name
 @param {String} [extra]  'padding' : (css width) + padding
 'border' : (css width) + padding + border
 'margin' : (css width) + padding + border + margin
 */ function getWH(elem, name, ex) {
    var extra = ex;
    if (isWindow(elem)) return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
    else if (elem.nodeType === 9) return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
    var which = name === 'width' ? [
        'Left',
        'Right'
    ] : [
        'Top',
        'Bottom'
    ];
    var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
    var isBorderBox = isBorderBoxFn(elem);
    var cssBoxValue = 0;
    if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
        borderBoxValue = undefined; // Fall back to computed then un computed css if necessary
        cssBoxValue = getComputedStyleX(elem, name);
        if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) cssBoxValue = elem.style[name] || 0;
         // Normalize '', auto, and prepare for extra
        cssBoxValue = parseFloat(cssBoxValue) || 0;
    }
    if (extra === undefined) extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
    var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
    var val = borderBoxValue || cssBoxValue;
    if (extra === CONTENT_INDEX) {
        if (borderBoxValueOrIsBorderBox) return val - getPBMWidth(elem, [
            'border',
            'padding'
        ], which);
        return cssBoxValue;
    } else if (borderBoxValueOrIsBorderBox) {
        if (extra === BORDER_INDEX) return val;
        return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, [
            'border'
        ], which) : getPBMWidth(elem, [
            'margin'
        ], which));
    }
    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
}
var cssShow = {
    position: 'absolute',
    visibility: 'hidden',
    display: 'block'
}; // fix #119 : https://github.com/kissyteam/kissy/issues/119
function getWHIgnoreDisplay() {
    for(var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++)args[_key2] = arguments[_key2];
    var val;
    var elem = args[0]; // in case elem is window
    // elem.offsetWidth === undefined
    if (elem.offsetWidth !== 0) val = getWH.apply(undefined, args);
    else swap(elem, cssShow, function() {
        val = getWH.apply(undefined, args);
    });
    return val;
}
each([
    'width',
    'height'
], function(name) {
    var first = name.charAt(0).toUpperCase() + name.slice(1);
    domUtils["outer".concat(first)] = function(el, includeMargin) {
        return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
    };
    var which = name === 'width' ? [
        'Left',
        'Right'
    ] : [
        'Top',
        'Bottom'
    ];
    domUtils[name] = function(elem, v) {
        var val = v;
        if (val !== undefined) {
            if (elem) {
                var isBorderBox = isBorderBoxFn(elem);
                if (isBorderBox) val += getPBMWidth(elem, [
                    'padding',
                    'border'
                ], which);
                return css(elem, name, val);
            }
            return undefined;
        }
        return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
    };
});
function mix(to, from) {
    for(var i in from)if (from.hasOwnProperty(i)) to[i] = from[i];
    return to;
}
var utils = {
    getWindow: function getWindow(node) {
        if (node && node.document && node.setTimeout) return node;
        var doc = node.ownerDocument || node;
        return doc.defaultView || doc.parentWindow;
    },
    getDocument: getDocument,
    offset: function offset(el, value, option) {
        if (typeof value !== 'undefined') setOffset(el, value, option || {});
        else return getOffset(el);
    },
    isWindow: isWindow,
    each: each,
    css: css,
    clone: function clone(obj) {
        var i;
        var ret = {};
        for(i in obj)if (obj.hasOwnProperty(i)) ret[i] = obj[i];
        var overflow = obj.overflow;
        if (overflow) {
            for(i in obj)if (obj.hasOwnProperty(i)) ret.overflow[i] = obj.overflow[i];
        }
        return ret;
    },
    mix: mix,
    getWindowScrollLeft: function getWindowScrollLeft(w) {
        return getScrollLeft(w);
    },
    getWindowScrollTop: function getWindowScrollTop(w) {
        return getScrollTop(w);
    },
    merge: function merge() {
        var ret = {};
        for(var i = 0; i < arguments.length; i++)utils.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
        return ret;
    },
    viewportWidth: 0,
    viewportHeight: 0
};
mix(utils, domUtils);
/**
 * 得到会导致元素显示不全的祖先元素
 */ var getParent = utils.getParent;
function getOffsetParent(element) {
    if (utils.isWindow(element) || element.nodeType === 9) return null;
     // ie 这个也不是完全可行
    /*
   <div style="width: 50px;height: 100px;overflow: hidden">
   <div style="width: 50px;height: 100px;position: relative;" id="d6">
   元素 6 高 100px 宽 50px<br/>
   </div>
   </div>
   */ // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
    //  In other browsers it only includes elements with position absolute, relative or
    // fixed, not elements with overflow set to auto or scroll.
    //        if (UA.ie && ieMode < 8) {
    //            return element.offsetParent;
    //        }
    // 统一的 offsetParent 方法
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent;
    var positionStyle = utils.css(element, 'position');
    var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';
    if (!skipStatic) return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
    for(parent = getParent(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent(parent)){
        positionStyle = utils.css(parent, 'position');
        if (positionStyle !== 'static') return parent;
    }
    return null;
}
var getParent$1 = utils.getParent;
function isAncestorFixed(element) {
    if (utils.isWindow(element) || element.nodeType === 9) return false;
    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent = null;
    for(parent = getParent$1(element); parent && parent !== body && parent !== doc; parent = getParent$1(parent)){
        var positionStyle = utils.css(parent, 'position');
        if (positionStyle === 'fixed') return true;
    }
    return false;
}
/**
 * 获得元素的显示部分的区域
 */ function getVisibleRectForElement(element, alwaysByViewport) {
    var visibleRect = {
        left: 0,
        right: Infinity,
        top: 0,
        bottom: Infinity
    };
    var el = getOffsetParent(element);
    var doc = utils.getDocument(element);
    var win = doc.defaultView || doc.parentWindow;
    var body = doc.body;
    var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
    // all scrollable containers.
    while(el){
        // clientWidth is zero for inline block elements in ie.
        if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // viewport. In some browsers, el.offsetParent may be
        // document.documentElement, so check for that too.
        el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {
            var pos = utils.offset(el); // add border
            pos.left += el.clientLeft;
            pos.top += el.clientTop;
            visibleRect.top = Math.max(visibleRect.top, pos.top);
            visibleRect.right = Math.min(visibleRect.right, pos.left + el.clientWidth);
            visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
            visibleRect.left = Math.max(visibleRect.left, pos.left);
        } else if (el === body || el === documentElement) break;
        el = getOffsetParent(el);
    } // Set element position to fixed
    // make sure absolute element itself don't affect it's visible area
    // https://github.com/ant-design/ant-design/issues/7601
    var originalPosition = null;
    if (!utils.isWindow(element) && element.nodeType !== 9) {
        originalPosition = element.style.position;
        var position = utils.css(element, 'position');
        if (position === 'absolute') element.style.position = 'fixed';
    }
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    var documentWidth = documentElement.scrollWidth;
    var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
    // We should cut this ourself.
    var bodyStyle = window.getComputedStyle(body);
    if (bodyStyle.overflowX === 'hidden') documentWidth = win.innerWidth;
    if (bodyStyle.overflowY === 'hidden') documentHeight = win.innerHeight;
     // Reset element position after calculate the visible area
    if (element.style) element.style.position = originalPosition;
    if (alwaysByViewport || isAncestorFixed(element)) {
        // Clip by viewport's size.
        visibleRect.left = Math.max(visibleRect.left, scrollX);
        visibleRect.top = Math.max(visibleRect.top, scrollY);
        visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
        visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
    } else {
        // Clip by document's size.
        var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
        visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
        var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
        visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
    }
    return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
}
function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
    var pos = utils.clone(elFuturePos);
    var size = {
        width: elRegion.width,
        height: elRegion.height
    };
    if (overflow.adjustX && pos.left < visibleRect.left) pos.left = visibleRect.left;
     // Left edge inside and right edge outside viewport, try to resize it.
    if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) size.width -= pos.left + size.width - visibleRect.right;
     // Right edge outside viewport, try to move it.
    if (overflow.adjustX && pos.left + size.width > visibleRect.right) // 保证左边界和可视区域左边界对齐
    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
     // Top edge outside viewport, try to move it.
    if (overflow.adjustY && pos.top < visibleRect.top) pos.top = visibleRect.top;
     // Top edge inside and bottom edge outside viewport, try to resize it.
    if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) size.height -= pos.top + size.height - visibleRect.bottom;
     // Bottom edge outside viewport, try to move it.
    if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) // 保证上边界和可视区域上边界对齐
    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
    return utils.mix(pos, size);
}
function getRegion(node) {
    var offset;
    var w;
    var h;
    if (!utils.isWindow(node) && node.nodeType !== 9) {
        offset = utils.offset(node);
        w = utils.outerWidth(node);
        h = utils.outerHeight(node);
    } else {
        var win = utils.getWindow(node);
        offset = {
            left: utils.getWindowScrollLeft(win),
            top: utils.getWindowScrollTop(win)
        };
        w = utils.viewportWidth(win);
        h = utils.viewportHeight(win);
    }
    offset.width = w;
    offset.height = h;
    return offset;
}
/**
 * 获取 node 上的 align 对齐点 相对于页面的坐标
 */ function getAlignOffset(region, align) {
    var V = align.charAt(0);
    var H = align.charAt(1);
    var w = region.width;
    var h = region.height;
    var x = region.left;
    var y = region.top;
    if (V === 'c') y += h / 2;
    else if (V === 'b') y += h;
    if (H === 'c') x += w / 2;
    else if (H === 'r') x += w;
    return {
        left: x,
        top: y
    };
}
function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
    var p1 = getAlignOffset(refNodeRegion, points[1]);
    var p2 = getAlignOffset(elRegion, points[0]);
    var diff = [
        p2.left - p1.left,
        p2.top - p1.top
    ];
    return {
        left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
        top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1])
    };
}
/**
 * align dom node flexibly
 * @author yiminghe@gmail.com
 */ function isFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
}
function isFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
}
function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
}
function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
}
function flip(points, reg, map) {
    var ret = [];
    utils.each(points, function(p) {
        ret.push(p.replace(reg, function(m) {
            return map[m];
        }));
    });
    return ret;
}
function flipOffset(offset, index) {
    offset[index] = -offset[index];
    return offset;
}
function convertOffset(str, offsetLen) {
    var n;
    if (/%$/.test(str)) n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
    else n = parseInt(str, 10);
    return n || 0;
}
function normalizeOffset(offset, el) {
    offset[0] = convertOffset(offset[0], el.width);
    offset[1] = convertOffset(offset[1], el.height);
}
/**
 * @param el
 * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
 * @param align
 */ function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
    var points = align.points;
    var offset = align.offset || [
        0,
        0
    ];
    var targetOffset = align.targetOffset || [
        0,
        0
    ];
    var overflow = align.overflow;
    var source = align.source || el;
    offset = [].concat(offset);
    targetOffset = [].concat(targetOffset);
    overflow = overflow || {};
    var newOverflowCfg = {};
    var fail = 0;
    var alwaysByViewport = !!(overflow && overflow.alwaysByViewport); // 当前节点可以被放置的显示区域
    var visibleRect = getVisibleRectForElement(source, alwaysByViewport); // 当前节点所占的区域, left/top/width/height
    var elRegion = getRegion(source); // 将 offset 转换成数值，支持百分比
    normalizeOffset(offset, elRegion);
    normalizeOffset(targetOffset, tgtRegion); // 当前节点将要被放置的位置
    var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // 当前节点将要所处的区域
    var newElRegion = utils.merge(elRegion, elFuturePos); // 如果可视区域不能完全放置当前节点时允许调整
    if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
        if (overflow.adjustX) // 如果横向不能放下
        {
            if (isFailX(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var newPoints = flip(points, /[lr]/gi, {
                    l: 'r',
                    r: 'l'
                }); // 偏移量也反下
                var newOffset = flipOffset(offset, 0);
                var newTargetOffset = flipOffset(targetOffset, 0);
                var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
                if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
                    fail = 1;
                    points = newPoints;
                    offset = newOffset;
                    targetOffset = newTargetOffset;
                }
            }
        }
        if (overflow.adjustY) // 如果纵向不能放下
        {
            if (isFailY(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var _newPoints = flip(points, /[tb]/gi, {
                    t: 'b',
                    b: 't'
                }); // 偏移量也反下
                var _newOffset = flipOffset(offset, 1);
                var _newTargetOffset = flipOffset(targetOffset, 1);
                var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
                if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
                    fail = 1;
                    points = _newPoints;
                    offset = _newOffset;
                    targetOffset = _newTargetOffset;
                }
            }
        } // 如果失败，重新计算当前节点将要被放置的位置
        if (fail) {
            elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
            utils.mix(newElRegion, elFuturePos);
        }
        var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
        var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // 检查反下后的位置是否可以放下了，如果仍然放不下：
        // 1. 复原修改过的定位参数
        if (isStillFailX || isStillFailY) {
            var _newPoints2 = points; // 重置对应部分的翻转逻辑
            if (isStillFailX) _newPoints2 = flip(points, /[lr]/gi, {
                l: 'r',
                r: 'l'
            });
            if (isStillFailY) _newPoints2 = flip(points, /[tb]/gi, {
                t: 'b',
                b: 't'
            });
            points = _newPoints2;
            offset = align.offset || [
                0,
                0
            ];
            targetOffset = align.targetOffset || [
                0,
                0
            ];
        } // 2. 只有指定了可以调整当前方向才调整
        newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
        newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // 确实要调整，甚至可能会调整高度宽度
        if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
    } // need judge to in case set fixed with in css on height auto element
    if (newElRegion.width !== elRegion.width) utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
    if (newElRegion.height !== elRegion.height) utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);
     // https://github.com/kissyteam/kissy/issues/190
    // 相对于屏幕位置没变，而 left/top 变了
    // 例如 <div 'relative'><el absolute></div>
    utils.offset(source, {
        left: newElRegion.left,
        top: newElRegion.top
    }, {
        useCssRight: align.useCssRight,
        useCssBottom: align.useCssBottom,
        useCssTransform: align.useCssTransform,
        ignoreShake: align.ignoreShake
    });
    return {
        points: points,
        offset: offset,
        targetOffset: targetOffset,
        overflow: newOverflowCfg
    };
}
/**
 *  2012-04-26 yiminghe@gmail.com
 *   - 优化智能对齐算法
 *   - 慎用 resizeXX
 *
 *  2011-07-13 yiminghe@gmail.com note:
 *   - 增加智能对齐，以及大小调整选项
 **/ function isOutOfVisibleRect(target, alwaysByViewport) {
    var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
    var targetRegion = getRegion(target);
    return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
}
function alignElement(el, refNode, align) {
    var target = align.target || refNode;
    var refNodeRegion = getRegion(target);
    var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
    return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
}
alignElement.__getOffsetParent = getOffsetParent;
alignElement.__getVisibleRectForElement = getVisibleRectForElement;
/**
 * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
 * If client position provided, will internal convert to page position.
 */ function alignPoint(el, tgtPoint, align) {
    var pageX;
    var pageY;
    var doc = utils.getDocument(el);
    var win = doc.defaultView || doc.parentWindow;
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    if ('pageX' in tgtPoint) pageX = tgtPoint.pageX;
    else pageX = scrollX + tgtPoint.clientX;
    if ('pageY' in tgtPoint) pageY = tgtPoint.pageY;
    else pageY = scrollY + tgtPoint.clientY;
    var tgtRegion = {
        left: pageX,
        top: pageY,
        width: 0,
        height: 0
    };
    var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point
    var points = [
        align.points[0],
        'cc'
    ];
    return doAlign(el, tgtRegion, _objectSpread2(_objectSpread2({}, align), {}, {
        points: points
    }), pointInView);
}
exports.default = alignElement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1oU9B":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual');
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function isEqual(value, other) {
    return baseIsEqual(value, other);
}
module.exports = isEqual;

},{"./_baseIsEqual":"aOoeY"}],"aOoeY":[function(require,module,exports) {
var baseIsEqualDeep = require('./_baseIsEqualDeep'), isObjectLike = require('./isObjectLike');
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"WZhtx","./isObjectLike":"k7UV7"}],"WZhtx":[function(require,module,exports) {
var Stack = require('./_Stack'), equalArrays = require('./_equalArrays'), equalByTag = require('./_equalByTag'), equalObjects = require('./_equalObjects'), getTag = require('./_getTag'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isTypedArray = require('./isTypedArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"./_Stack":"4dtVb","./_equalArrays":"62Kq7","./_equalByTag":"1MQJo","./_equalObjects":"9KSPM","./_getTag":"k84eb","./isArray":"jnIjR","./isBuffer":"lWzr6","./isTypedArray":"8QgjO"}],"4dtVb":[function(require,module,exports) {
var ListCache = require('./_ListCache'), stackClear = require('./_stackClear'), stackDelete = require('./_stackDelete'), stackGet = require('./_stackGet'), stackHas = require('./_stackHas'), stackSet = require('./_stackSet');
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"./_ListCache":"83AWn","./_stackClear":"fr7R6","./_stackDelete":"gTdsm","./_stackGet":"hDCQs","./_stackHas":"1hwZB","./_stackSet":"kSCyp"}],"83AWn":[function(require,module,exports) {
var listCacheClear = require('./_listCacheClear'), listCacheDelete = require('./_listCacheDelete'), listCacheGet = require('./_listCacheGet'), listCacheHas = require('./_listCacheHas'), listCacheSet = require('./_listCacheSet');
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"./_listCacheClear":"caROx","./_listCacheDelete":"7qYzN","./_listCacheGet":"2QbzT","./_listCacheHas":"5QenM","./_listCacheSet":"b1iEQ"}],"caROx":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"7qYzN":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"./_assocIndexOf":"c5f63"}],"c5f63":[function(require,module,exports) {
var eq = require('./eq');
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"./eq":"9xBHE"}],"9xBHE":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"2QbzT":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"./_assocIndexOf":"c5f63"}],"5QenM":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"./_assocIndexOf":"c5f63"}],"b1iEQ":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"./_assocIndexOf":"c5f63"}],"fr7R6":[function(require,module,exports) {
var ListCache = require('./_ListCache');
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"./_ListCache":"83AWn"}],"gTdsm":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"hDCQs":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"1hwZB":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"kSCyp":[function(require,module,exports) {
var ListCache = require('./_ListCache'), Map = require('./_Map'), MapCache = require('./_MapCache');
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"./_ListCache":"83AWn","./_Map":"iUQU8","./_MapCache":"7dn4U"}],"iUQU8":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Map = getNative(root, 'Map');
module.exports = Map;

},{"./_getNative":"7aio9","./_root":"jPm8p"}],"7aio9":[function(require,module,exports) {
var baseIsNative = require('./_baseIsNative'), getValue = require('./_getValue');
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"./_baseIsNative":"keOuw","./_getValue":"iVpgm"}],"keOuw":[function(require,module,exports) {
var isFunction = require('./isFunction'), isMasked = require('./_isMasked'), isObject = require('./isObject'), toSource = require('./_toSource');
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"./isFunction":"4jzze","./_isMasked":"11HB6","./isObject":"vNrIk","./_toSource":"792Tp"}],"4jzze":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObject = require('./isObject');
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"bqU9Z","./isObject":"vNrIk"}],"bqU9Z":[function(require,module,exports) {
var Symbol = require('./_Symbol'), getRawTag = require('./_getRawTag'), objectToString = require('./_objectToString');
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"8ElHe","./_getRawTag":"a5UiG","./_objectToString":"dpoS7"}],"8ElHe":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"./_root":"jPm8p"}],"jPm8p":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

},{"./_freeGlobal":"ewMv0"}],"ewMv0":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"a5UiG":[function(require,module,exports) {
var Symbol = require('./_Symbol');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"8ElHe"}],"dpoS7":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"vNrIk":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

},{}],"11HB6":[function(require,module,exports) {
var coreJsData = require('./_coreJsData');
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"./_coreJsData":"i4Zub"}],"i4Zub":[function(require,module,exports) {
var root = require('./_root');
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

},{"./_root":"jPm8p"}],"792Tp":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + '';
        } catch (e1) {}
    }
    return '';
}
module.exports = toSource;

},{}],"iVpgm":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"7dn4U":[function(require,module,exports) {
var mapCacheClear = require('./_mapCacheClear'), mapCacheDelete = require('./_mapCacheDelete'), mapCacheGet = require('./_mapCacheGet'), mapCacheHas = require('./_mapCacheHas'), mapCacheSet = require('./_mapCacheSet');
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"./_mapCacheClear":"3j6Rf","./_mapCacheDelete":"azrd3","./_mapCacheGet":"bFurg","./_mapCacheHas":"jyqC0","./_mapCacheSet":"bN1ec"}],"3j6Rf":[function(require,module,exports) {
var Hash = require('./_Hash'), ListCache = require('./_ListCache'), Map = require('./_Map');
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;

},{"./_Hash":"bZvrf","./_ListCache":"83AWn","./_Map":"iUQU8"}],"bZvrf":[function(require,module,exports) {
var hashClear = require('./_hashClear'), hashDelete = require('./_hashDelete'), hashGet = require('./_hashGet'), hashHas = require('./_hashHas'), hashSet = require('./_hashSet');
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"./_hashClear":"9ZwL8","./_hashDelete":"81mkI","./_hashGet":"eRA51","./_hashHas":"fuym3","./_hashSet":"8MMcB"}],"9ZwL8":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
module.exports = hashClear;

},{"./_nativeCreate":"6pBNE"}],"6pBNE":[function(require,module,exports) {
var getNative = require('./_getNative');
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

},{"./_getNative":"7aio9"}],"81mkI":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"eRA51":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"./_nativeCreate":"6pBNE"}],"fuym3":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"./_nativeCreate":"6pBNE"}],"8MMcB":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"./_nativeCreate":"6pBNE"}],"azrd3":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"./_getMapData":"gE3LT"}],"gE3LT":[function(require,module,exports) {
var isKeyable = require('./_isKeyable');
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;

},{"./_isKeyable":"2fRMM"}],"2fRMM":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;

},{}],"bFurg":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"./_getMapData":"gE3LT"}],"jyqC0":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"./_getMapData":"gE3LT"}],"bN1ec":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"./_getMapData":"gE3LT"}],"62Kq7":[function(require,module,exports) {
var SetCache = require('./_SetCache'), arraySome = require('./_arraySome'), cacheHas = require('./_cacheHas');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue1 = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
module.exports = equalArrays;

},{"./_SetCache":"7LqRY","./_arraySome":"21YeM","./_cacheHas":"dcsAA"}],"7LqRY":[function(require,module,exports) {
var MapCache = require('./_MapCache'), setCacheAdd = require('./_setCacheAdd'), setCacheHas = require('./_setCacheHas');
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"./_MapCache":"7dn4U","./_setCacheAdd":"5ZW9N","./_setCacheHas":"bsBNH"}],"5ZW9N":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"bsBNH":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"21YeM":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"dcsAA":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"1MQJo":[function(require,module,exports) {
var Symbol = require('./_Symbol'), Uint8Array = require('./_Uint8Array'), eq = require('./eq'), equalArrays = require('./_equalArrays'), mapToArray = require('./_mapToArray'), setToArray = require('./_setToArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"./_Symbol":"8ElHe","./_Uint8Array":"7XiNK","./eq":"9xBHE","./_equalArrays":"62Kq7","./_mapToArray":"2crt7","./_setToArray":"4Z8o0"}],"7XiNK":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

},{"./_root":"jPm8p"}],"2crt7":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"4Z8o0":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"9KSPM":[function(require,module,exports) {
var getAllKeys = require('./_getAllKeys');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
module.exports = equalObjects;

},{"./_getAllKeys":"irrVp"}],"irrVp":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbols = require('./_getSymbols'), keys = require('./keys');
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"./_baseGetAllKeys":"cEG9v","./_getSymbols":"appys","./keys":"5hAh1"}],"cEG9v":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), isArray = require('./isArray');
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"./_arrayPush":"4N3rx","./isArray":"jnIjR"}],"4N3rx":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"jnIjR":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"appys":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'), stubArray = require('./stubArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"./_arrayFilter":"bn9YF","./stubArray":"hPHME"}],"bn9YF":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"hPHME":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"5hAh1":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeys = require('./_baseKeys'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"6lZHr","./_baseKeys":"b84JJ","./isArrayLike":"9feWz"}],"6lZHr":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'), isArguments = require('./isArguments'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isIndex = require('./_isIndex'), isTypedArray = require('./isTypedArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"bM8Dx","./isArguments":"i19F0","./isArray":"jnIjR","./isBuffer":"lWzr6","./_isIndex":"hQuui","./isTypedArray":"8QgjO"}],"bM8Dx":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"i19F0":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'), isObjectLike = require('./isObjectLike');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

},{"./_baseIsArguments":"d2g30","./isObjectLike":"k7UV7"}],"d2g30":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"bqU9Z","./isObjectLike":"k7UV7"}],"k7UV7":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

},{}],"lWzr6":[function(require,module,exports) {
var root = require('./_root'), stubFalse = require('./stubFalse');
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"jPm8p","./stubFalse":"1HdHQ"}],"1HdHQ":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"hQuui":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"8QgjO":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"ikShU","./_baseUnary":"dm84G","./_nodeUtil":"iI3QX"}],"ikShU":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isLength = require('./isLength'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"bqU9Z","./isLength":"7zizh","./isObjectLike":"k7UV7"}],"7zizh":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"dm84G":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"iI3QX":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"ewMv0"}],"b84JJ":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'), nativeKeys = require('./_nativeKeys');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"f7afw","./_nativeKeys":"hPBjc"}],"f7afw":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"hPBjc":[function(require,module,exports) {
var overArg = require('./_overArg');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"9MTHu"}],"9MTHu":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"9feWz":[function(require,module,exports) {
var isFunction = require('./isFunction'), isLength = require('./isLength');
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"4jzze","./isLength":"7zizh"}],"k84eb":[function(require,module,exports) {
var DataView = require('./_DataView'), Map = require('./_Map'), Promise = require('./_Promise'), Set = require('./_Set'), WeakMap = require('./_WeakMap'), baseGetTag = require('./_baseGetTag'), toSource = require('./_toSource');
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"./_DataView":"aPJD7","./_Map":"iUQU8","./_Promise":"4MJP5","./_Set":"3mu4A","./_WeakMap":"bFoTc","./_baseGetTag":"bqU9Z","./_toSource":"792Tp"}],"aPJD7":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, 'DataView');
module.exports = DataView;

},{"./_getNative":"7aio9","./_root":"jPm8p"}],"4MJP5":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, 'Promise');
module.exports = Promise;

},{"./_getNative":"7aio9","./_root":"jPm8p"}],"3mu4A":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Set = getNative(root, 'Set');
module.exports = Set;

},{"./_getNative":"7aio9","./_root":"jPm8p"}],"bFoTc":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

},{"./_getNative":"7aio9","./_root":"jPm8p"}],"8KUvU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSamePoint", ()=>isSamePoint
);
parcelHelpers.export(exports, "restoreFocus", ()=>restoreFocus
);
parcelHelpers.export(exports, "monitorResize", ()=>monitorResize
);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _resizeObserverPolyfill = require("resize-observer-polyfill");
var _resizeObserverPolyfillDefault = parcelHelpers.interopDefault(_resizeObserverPolyfill);
var _contains = require("rc-util/es/Dom/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
function isSamePoint(prev, next) {
    if (prev === next) return true;
    if (!prev || !next) return false;
    if ('pageX' in next && 'pageY' in next) return prev.pageX === next.pageX && prev.pageY === next.pageY;
    if ('clientX' in next && 'clientY' in next) return prev.clientX === next.clientX && prev.clientY === next.clientY;
    return false;
}
function restoreFocus(activeElement, container) {
    // Focus back if is in the container
    if (activeElement !== document.activeElement && _containsDefault.default(container, activeElement) && typeof activeElement.focus === 'function') activeElement.focus();
}
function monitorResize(element, callback) {
    var prevWidth = null;
    var prevHeight = null;
    function onResize(_ref) {
        var _ref2 = _slicedToArrayDefault.default(_ref, 1), target = _ref2[0].target;
        if (!document.documentElement.contains(target)) return;
        var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
        var fixedWidth = Math.floor(width);
        var fixedHeight = Math.floor(height);
        if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) // https://webkit.org/blog/9997/resizeobserver-in-webkit/
        Promise.resolve().then(function() {
            callback({
                width: fixedWidth,
                height: fixedHeight
            });
        });
        prevWidth = fixedWidth;
        prevHeight = fixedHeight;
    }
    var resizeObserver = new _resizeObserverPolyfillDefault.default(onResize);
    if (element) resizeObserver.observe(element);
    return function() {
        resizeObserver.disconnect();
    };
}

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","resize-observer-polyfill":"30EOW","rc-util/es/Dom/contains":"1BmkL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aNNEe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = function(callback, buffer) {
    var calledRef = _reactDefault.default.useRef(false);
    var timeoutRef = _reactDefault.default.useRef(null);
    function cancelTrigger() {
        window.clearTimeout(timeoutRef.current);
    }
    function trigger(force) {
        if (!calledRef.current || force === true) {
            if (callback() === false) // Not delay since callback cancelled self
            return;
            calledRef.current = true;
            cancelTrigger();
            timeoutRef.current = window.setTimeout(function() {
                calledRef.current = false;
            }, buffer);
        } else {
            cancelTrigger();
            timeoutRef.current = window.setTimeout(function() {
                calledRef.current = false;
                trigger();
            }, buffer);
        }
    }
    return [
        trigger,
        function() {
            calledRef.current = false;
            cancelTrigger();
        }
    ];
};

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kqJ4o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regenerator = require("@babel/runtime/regenerator");
var _regeneratorDefault = parcelHelpers.interopDefault(_regenerator);
var _asyncToGenerator = require("@babel/runtime/helpers/esm/asyncToGenerator");
var _asyncToGeneratorDefault = parcelHelpers.interopDefault(_asyncToGenerator);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _useState = require("rc-util/es/hooks/useState");
var _useStateDefault = parcelHelpers.interopDefault(_useState);
var StatusQueue = [
    'measure',
    'align',
    null,
    'motion'
];
exports.default = function(visible, doMeasure) {
    var _useState1 = _useStateDefault.default(null), _useState2 = _slicedToArrayDefault.default(_useState1, 2), status = _useState2[0], setInternalStatus = _useState2[1];
    var rafRef = _react.useRef();
    function setStatus(nextStatus) {
        setInternalStatus(nextStatus, true);
    }
    function cancelRaf() {
        _rafDefault.default.cancel(rafRef.current);
    }
    function goNextStatus(callback) {
        cancelRaf();
        rafRef.current = _rafDefault.default(function() {
            // Only align should be manually trigger
            setStatus(function(prev) {
                switch(status){
                    case 'align':
                        return 'motion';
                    case 'motion':
                        return 'stable';
                    default:
                }
                return prev;
            });
            callback === null || callback === void 0 || callback();
        });
    } // Init status
    _react.useEffect(function() {
        setStatus('measure');
    }, [
        visible
    ]); // Go next status
    _react.useEffect(function() {
        switch(status){
            case 'measure':
                doMeasure();
                break;
            default:
        }
        if (status) rafRef.current = _rafDefault.default(/*#__PURE__*/ _asyncToGeneratorDefault.default(/*#__PURE__*/ _regeneratorDefault.default.mark(function _callee() {
            var index, nextStatus;
            return _regeneratorDefault.default.wrap(function _callee$(_context) {
                while(true)switch(_context.prev = _context.next){
                    case 0:
                        index = StatusQueue.indexOf(status);
                        nextStatus = StatusQueue[index + 1];
                        if (nextStatus && index !== -1) setStatus(nextStatus);
                    case 3:
                    case "end":
                        return _context.stop();
                }
            }, _callee);
        })));
    }, [
        status
    ]);
    _react.useEffect(function() {
        return function() {
            cancelRaf();
        };
    }, []);
    return [
        status,
        goNextStatus
    ];
};

},{"@babel/runtime/regenerator":"hhhh4","@babel/runtime/helpers/esm/asyncToGenerator":"aCTuK","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/raf":"h9LA9","rc-util/es/hooks/useState":"5a1b3","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fezd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
exports.default = function(stretch) {
    var _React$useState = _react.useState({
        width: 0,
        height: 0
    }), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), targetSize = _React$useState2[0], setTargetSize = _React$useState2[1];
    function measureStretch(element) {
        setTargetSize({
            width: element.offsetWidth,
            height: element.offsetHeight
        });
    } // Merge stretch style
    var style = _react.useMemo(function() {
        var sizeStyle = {};
        if (stretch) {
            var width = targetSize.width, height = targetSize.height; // Stretch with target
            if (stretch.indexOf('height') !== -1 && height) sizeStyle.height = height;
            else if (stretch.indexOf('minHeight') !== -1 && height) sizeStyle.minHeight = height;
            if (stretch.indexOf('width') !== -1 && width) sizeStyle.width = width;
            else if (stretch.indexOf('minWidth') !== -1 && width) sizeStyle.minWidth = width;
        }
        return sizeStyle;
    }, [
        stretch,
        targetSize
    ]);
    return [
        style,
        measureStretch
    ];
};

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3Eize":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var MobilePopupInner = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, children = props.children, _props$mobile = props.mobile;
    _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
    var popupClassName = _props$mobile.popupClassName, popupStyle = _props$mobile.popupStyle, _props$mobile$popupMo = _props$mobile.popupMotion, popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo, popupRender = _props$mobile.popupRender;
    var elementRef = _react.useRef(); // ========================= Refs =========================
    _react.useImperativeHandle(ref, function() {
        return {
            forceAlign: function forceAlign() {},
            getElement: function getElement() {
                return elementRef.current;
            }
        };
    }); // ======================== Render ========================
    var mergedStyle = _objectSpread2Default.default({
        zIndex: zIndex
    }, popupStyle);
    var childNode = children; // Wrapper when multiple children
    if (_react.Children.count(children) > 1) childNode = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-content")
    }, children);
     // Mobile support additional render
    if (popupRender) childNode = popupRender(childNode);
    return /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, _extendsDefault.default({
        visible: visible,
        ref: elementRef,
        removeOnLeave: true
    }, popupMotion), function(_ref, motionRef) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        var mergedClassName = _classnamesDefault.default(prefixCls, popupClassName, motionClassName);
        return /*#__PURE__*/ _react.createElement("div", {
            ref: motionRef,
            className: mergedClassName,
            style: _objectSpread2Default.default(_objectSpread2Default.default({}, motionStyle), mergedStyle)
        }, childNode);
    });
});
MobilePopupInner.displayName = 'MobilePopupInner';
exports.default = MobilePopupInner;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","rc-motion":"01wSt","classnames":"dFgpN","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cB6xo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var TriggerContext = /*#__PURE__*/ _react.createContext(null);
exports.default = TriggerContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jAgwF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "placements", ()=>placements
);
parcelHelpers.export(exports, "placementsRtl", ()=>placementsRtl
);
var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
};
var placements = {
    topLeft: {
        points: [
            'bl',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -7
        ]
    },
    bottomLeft: {
        points: [
            'tl',
            'bl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            7
        ]
    },
    leftTop: {
        points: [
            'tr',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            -4,
            0
        ]
    },
    rightTop: {
        points: [
            'tl',
            'tr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            4,
            0
        ]
    }
};
var placementsRtl = {
    topLeft: {
        points: [
            'bl',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -7
        ]
    },
    bottomLeft: {
        points: [
            'tl',
            'bl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            7
        ]
    },
    rightTop: {
        points: [
            'tr',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            -4,
            0
        ]
    },
    leftTop: {
        points: [
            'tl',
            'tr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            4,
            0
        ]
    }
};
exports.default = placements;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"g4VpP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMotion", ()=>getMotion
);
function getMotion(mode, motion, defaultMotions) {
    if (motion) return motion;
    if (defaultMotions) return defaultMotions[mode] || defaultMotions.other;
    return undefined;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"16wMq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _motionUtil = require("../utils/motionUtil");
var _menuContext = require("../context/MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _subMenuList = require("./SubMenuList");
var _subMenuListDefault = parcelHelpers.interopDefault(_subMenuList);
function InlineSubMenuList(_ref) {
    var id = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
    var fixedMode = 'inline';
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode; // Always use latest mode check
    var sameModeRef = _react.useRef(false);
    sameModeRef.current = mode === fixedMode; // We record `destroy` mark here since when mode change from `inline` to others.
    // The inline list should remove when motion end.
    var _React$useState = _react.useState(!sameModeRef.current), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), destroy = _React$useState2[0], setDestroy = _React$useState2[1];
    var mergedOpen = sameModeRef.current ? open : false; // ================================= Effect =================================
    // Reset destroy state when mode change back
    _react.useEffect(function() {
        if (sameModeRef.current) setDestroy(false);
    }, [
        mode
    ]); // ================================= Render =================================
    var mergedMotion = _objectSpread2Default.default({}, _motionUtil.getMotion(fixedMode, motion, defaultMotions)); // No need appear since nest inlineCollapse changed
    if (keyPath.length > 1) mergedMotion.motionAppear = false;
     // Hide inline list when mode changed and motion end
    var originOnVisibleChanged = mergedMotion.onVisibleChanged;
    mergedMotion.onVisibleChanged = function(newVisible) {
        if (!sameModeRef.current && !newVisible) setDestroy(true);
        return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
    };
    if (destroy) return null;
    return /*#__PURE__*/ _react.createElement(_menuContextDefault.default, {
        mode: fixedMode,
        locked: !sameModeRef.current
    }, /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, _extendsDefault.default({
        visible: mergedOpen
    }, mergedMotion, {
        forceRender: forceSubMenuRender,
        removeOnLeave: false,
        leavedClassName: "".concat(prefixCls, "-hidden")
    }), function(_ref2) {
        var motionClassName = _ref2.className, motionStyle = _ref2.style;
        return /*#__PURE__*/ _react.createElement(_subMenuListDefault.default, {
            id: id,
            className: motionClassName,
            style: motionStyle
        }, children);
    }));
}
exports.default = InlineSubMenuList;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-motion":"01wSt","../utils/motionUtil":"g4VpP","../context/MenuContext":"2kTm7","./SubMenuList":"1lg8e","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"g4cK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _focus = require("rc-util/es/Dom/focus");
var _idContext = require("../context/IdContext"); // destruct to reduce minify size
var LEFT = _keyCodeDefault.default.LEFT, RIGHT = _keyCodeDefault.default.RIGHT, UP = _keyCodeDefault.default.UP, DOWN = _keyCodeDefault.default.DOWN, ENTER = _keyCodeDefault.default.ENTER, ESC = _keyCodeDefault.default.ESC, HOME = _keyCodeDefault.default.HOME, END = _keyCodeDefault.default.END;
var ArrowKeys = [
    UP,
    DOWN,
    LEFT,
    RIGHT
];
function getOffset(mode, isRootLevel, isRtl, which) {
    var _inline, _horizontal, _vertical, _offsets$;
    var prev = 'prev';
    var next = 'next';
    var children = 'children';
    var parent = 'parent'; // Inline enter is special that we use unique operation
    if (mode === 'inline' && which === ENTER) return {
        inlineTrigger: true
    };
    var inline = (_inline = {}, _definePropertyDefault.default(_inline, UP, prev), _definePropertyDefault.default(_inline, DOWN, next), _inline);
    var horizontal = (_horizontal = {}, _definePropertyDefault.default(_horizontal, LEFT, isRtl ? next : prev), _definePropertyDefault.default(_horizontal, RIGHT, isRtl ? prev : next), _definePropertyDefault.default(_horizontal, DOWN, children), _definePropertyDefault.default(_horizontal, ENTER, children), _horizontal);
    var vertical = (_vertical = {}, _definePropertyDefault.default(_vertical, UP, prev), _definePropertyDefault.default(_vertical, DOWN, next), _definePropertyDefault.default(_vertical, ENTER, children), _definePropertyDefault.default(_vertical, ESC, parent), _definePropertyDefault.default(_vertical, LEFT, isRtl ? children : parent), _definePropertyDefault.default(_vertical, RIGHT, isRtl ? parent : children), _vertical);
    var offsets = {
        inline: inline,
        horizontal: horizontal,
        vertical: vertical,
        inlineSub: inline,
        horizontalSub: vertical,
        verticalSub: vertical
    };
    var type = (_offsets$ = offsets["".concat(mode).concat(isRootLevel ? '' : 'Sub')]) === null || _offsets$ === void 0 ? void 0 : _offsets$[which];
    switch(type){
        case prev:
            return {
                offset: -1,
                sibling: true
            };
        case next:
            return {
                offset: 1,
                sibling: true
            };
        case parent:
            return {
                offset: -1,
                sibling: false
            };
        case children:
            return {
                offset: 1,
                sibling: false
            };
        default:
            return null;
    }
}
function findContainerUL(element) {
    var current = element;
    while(current){
        if (current.getAttribute('data-menu-list')) return current;
        current = current.parentElement;
    } // Normally should not reach this line
    /* istanbul ignore next */ return null;
}
/**
 * Find focused element within element set provided
 */ function getFocusElement(activeElement, elements) {
    var current = activeElement || document.activeElement;
    while(current){
        if (elements.has(current)) return current;
        current = current.parentElement;
    }
    return null;
}
/**
 * Get focusable elements from the element set under provided container
 */ function getFocusableElements(container, elements) {
    var list = _focus.getFocusNodeList(container, true);
    return list.filter(function(ele) {
        return elements.has(ele);
    });
}
function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    // Key on the menu item will not get validate parent container
    if (!parentQueryContainer) return null;
     // List current level menu item elements
    var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements); // Find next focus index
    var count = sameLevelFocusableMenuElementList.length;
    var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
        return focusMenuElement === ele;
    });
    if (offset < 0) {
        if (focusIndex === -1) focusIndex = count - 1;
        else focusIndex -= 1;
    } else if (offset > 0) focusIndex += 1;
    focusIndex = (focusIndex + count) % count; // Focus menu item
    return sameLevelFocusableMenuElementList[focusIndex];
}
function useAccessibility(mode, activeKey, isRtl, id, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
    var rafRef = _react.useRef();
    var activeRef = _react.useRef();
    activeRef.current = activeKey;
    var cleanRaf = function cleanRaf() {
        _rafDefault.default.cancel(rafRef.current);
    };
    _react.useEffect(function() {
        return function() {
            cleanRaf();
        };
    }, []);
    return function(e) {
        var which = e.which;
        if ([].concat(ArrowKeys, [
            ENTER,
            ESC,
            HOME,
            END
        ]).includes(which)) {
            // Convert key to elements
            var elements;
            var key2element;
            var element2key; // >>> Wrap as function since we use raf for some case
            var refreshElements = function refreshElements() {
                elements = new Set();
                key2element = new Map();
                element2key = new Map();
                var keys = getKeys();
                keys.forEach(function(key) {
                    var element = document.querySelector("[data-menu-id='".concat(_idContext.getMenuId(id, key), "']"));
                    if (element) {
                        elements.add(element);
                        element2key.set(element, key);
                        key2element.set(key, element);
                    }
                });
                return elements;
            };
            refreshElements(); // First we should find current focused MenuItem/SubMenu element
            var activeElement = key2element.get(activeKey);
            var focusMenuElement = getFocusElement(activeElement, elements);
            var focusMenuKey = element2key.get(focusMenuElement);
            var offsetObj = getOffset(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which); // Some mode do not have fully arrow operation like inline
            if (!offsetObj && which !== HOME && which !== END) return;
             // Arrow prevent default to avoid page scroll
            if (ArrowKeys.includes(which) || [
                HOME,
                END
            ].includes(which)) e.preventDefault();
            var tryFocus = function tryFocus(menuElement) {
                if (menuElement) {
                    var focusTargetElement = menuElement; // Focus to link instead of menu item if possible
                    var link = menuElement.querySelector('a');
                    if (link === null || link === void 0 ? void 0 : link.getAttribute('href')) focusTargetElement = link;
                    var targetKey = element2key.get(menuElement);
                    triggerActiveKey(targetKey);
                    /**
           * Do not `useEffect` here since `tryFocus` may trigger async
           * which makes React sync update the `activeKey`
           * that force render before `useRef` set the next activeKey
           */ cleanRaf();
                    rafRef.current = _rafDefault.default(function() {
                        if (activeRef.current === targetKey) focusTargetElement.focus();
                    });
                }
            };
            if ([
                HOME,
                END
            ].includes(which) || offsetObj.sibling || !focusMenuElement) {
                // ========================== Sibling ==========================
                // Find walkable focus menu element container
                var parentQueryContainer;
                if (!focusMenuElement || mode === 'inline') parentQueryContainer = containerRef.current;
                else parentQueryContainer = findContainerUL(focusMenuElement);
                 // Get next focus element
                var targetElement;
                var focusableElements = getFocusableElements(parentQueryContainer, elements);
                if (which === HOME) targetElement = focusableElements[0];
                else if (which === END) targetElement = focusableElements[focusableElements.length - 1];
                else targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
                 // Focus menu item
                tryFocus(targetElement); // ======================= InlineTrigger =======================
            } else if (offsetObj.inlineTrigger) // Inline trigger no need switch to sub menu item
            triggerAccessibilityOpen(focusMenuKey); // =========================== Level ===========================
            else if (offsetObj.offset > 0) {
                triggerAccessibilityOpen(focusMenuKey, true);
                cleanRaf();
                rafRef.current = _rafDefault.default(function() {
                    // Async should resync elements
                    refreshElements();
                    var controlId = focusMenuElement.getAttribute('aria-controls');
                    var subQueryContainer = document.getElementById(controlId); // Get sub focusable menu item
                    var targetElement = getNextFocusElement(subQueryContainer, elements); // Focus menu item
                    tryFocus(targetElement);
                }, 5);
            } else if (offsetObj.offset < 0) {
                var keyPath = getKeyPath(focusMenuKey, true);
                var parentKey = keyPath[keyPath.length - 2];
                var parentMenuElement = key2element.get(parentKey); // Focus menu item
                triggerAccessibilityOpen(parentKey, false);
                tryFocus(parentMenuElement);
            }
        } // Pass origin key down event
        originOnKeyDown === null || originOnKeyDown === void 0 || originOnKeyDown(e);
    };
}
exports.default = useAccessibility;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","rc-util/es/KeyCode":"1ukEC","rc-util/es/raf":"h9LA9","rc-util/es/Dom/focus":"5HWpM","../context/IdContext":"cda9o","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5HWpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFocusNodeList", ()=>getFocusNodeList
);
/** @deprecated Do not use since this may failed when used in async */ parcelHelpers.export(exports, "saveLastFocusNode", ()=>saveLastFocusNode
);
/** @deprecated Do not use since this may failed when used in async */ parcelHelpers.export(exports, "clearLastFocusNode", ()=>clearLastFocusNode
);
/** @deprecated Do not use since this may failed when used in async */ parcelHelpers.export(exports, "backLastFocusNode", ()=>backLastFocusNode
);
parcelHelpers.export(exports, "limitTabRange", ()=>limitTabRange
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _isVisible = require("./isVisible");
var _isVisibleDefault = parcelHelpers.interopDefault(_isVisible);
function focusable(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (_isVisibleDefault.default(node)) {
        var nodeName = node.nodeName.toLowerCase();
        var isFocusableElement = [
            'input',
            'select',
            'textarea',
            'button'
        ].includes(nodeName) || node.isContentEditable || nodeName === 'a' && !!node.getAttribute('href'); // Get tabIndex
        var tabIndexAttr = node.getAttribute('tabindex');
        var tabIndexNum = Number(tabIndexAttr); // Parse as number if validate
        var tabIndex = null;
        if (tabIndexAttr && !Number.isNaN(tabIndexNum)) tabIndex = tabIndexNum;
        else if (isFocusableElement && tabIndex === null) tabIndex = 0;
         // Block focusable if disabled
        if (isFocusableElement && node.disabled) tabIndex = null;
        return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
    }
    return false;
}
function getFocusNodeList(node) {
    var includePositive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var res = _toConsumableArrayDefault.default(node.querySelectorAll('*')).filter(function(child) {
        return focusable(child, includePositive);
    });
    if (focusable(node, includePositive)) res.unshift(node);
    return res;
}
var lastFocusElement = null;
function saveLastFocusNode() {
    lastFocusElement = document.activeElement;
}
function clearLastFocusNode() {
    lastFocusElement = null;
}
function backLastFocusNode() {
    if (lastFocusElement) try {
        // 元素可能已经被移动了
        lastFocusElement.focus();
    /* eslint-disable no-empty */ } catch (e) {}
}
function limitTabRange(node, e) {
    if (e.keyCode === 9) {
        var tabNodeList = getFocusNodeList(node);
        var lastTabNode = tabNodeList[e.shiftKey ? 0 : tabNodeList.length - 1];
        var leavingTab = lastTabNode === document.activeElement || node === document.activeElement;
        if (leavingTab) {
            var target = tabNodeList[e.shiftKey ? tabNodeList.length - 1 : 0];
            target.focus();
            e.preventDefault();
        }
    }
}

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","./isVisible":"lNA7G","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7YhGI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var uniquePrefix = Math.random().toFixed(5).toString().slice(2);
var internalId = 0;
function useUUID(id) {
    var _useMergedState1 = _useMergedStateDefault.default(id, {
        value: id
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), uuid = _useMergedState2[0], setUUID = _useMergedState2[1];
    _react.useEffect(function() {
        internalId += 1;
        var newId = "".concat(uniquePrefix, "-").concat(internalId);
        setUUID("rc-menu-uuid-".concat(newId));
    }, []);
    return uuid;
}
exports.default = useUUID;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/hooks/useMergedState":"jUfJa","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hTs33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OVERFLOW_KEY", ()=>OVERFLOW_KEY
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _warning = require("rc-util/es/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _timeUtil = require("../utils/timeUtil");
var PATH_SPLIT = '__RC_UTIL_PATH_SPLIT__';
var getPathStr = function getPathStr(keyPath) {
    return keyPath.join(PATH_SPLIT);
};
var getPathKeys = function getPathKeys(keyPathStr) {
    return keyPathStr.split(PATH_SPLIT);
};
var OVERFLOW_KEY = 'rc-menu-more';
function useKeyRecords() {
    var _React$useState = _react.useState({}), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), internalForceUpdate = _React$useState2[1];
    var key2pathRef = _react.useRef(new Map());
    var path2keyRef = _react.useRef(new Map());
    var _React$useState3 = _react.useState([]), _React$useState4 = _slicedToArrayDefault.default(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
    var updateRef = _react.useRef(0);
    var destroyRef = _react.useRef(false);
    var forceUpdate = function forceUpdate() {
        if (!destroyRef.current) internalForceUpdate({});
    };
    var registerPath = _react.useCallback(function(key, keyPath) {
        _warningDefault.default(!key2pathRef.current.has(key), "Duplicated key '".concat(key, "' used in Menu by path [").concat(keyPath.join(' > '), "]"));
        var connectedPath = getPathStr(keyPath);
        path2keyRef.current.set(connectedPath, key);
        key2pathRef.current.set(key, connectedPath);
        updateRef.current += 1;
        var id = updateRef.current;
        _timeUtil.nextSlice(function() {
            if (id === updateRef.current) forceUpdate();
        });
    }, []);
    var unregisterPath = _react.useCallback(function(key, keyPath) {
        var connectedPath = getPathStr(keyPath);
        path2keyRef.current.delete(connectedPath);
        key2pathRef.current.delete(key);
    }, []);
    var refreshOverflowKeys = _react.useCallback(function(keys) {
        setOverflowKeys(keys);
    }, []);
    var getKeyPath = _react.useCallback(function(eventKey, includeOverflow) {
        var fullPath = key2pathRef.current.get(eventKey) || '';
        var keys = getPathKeys(fullPath);
        if (includeOverflow && overflowKeys.includes(keys[0])) keys.unshift(OVERFLOW_KEY);
        return keys;
    }, [
        overflowKeys
    ]);
    var isSubPathKey = _react.useCallback(function(pathKeys, eventKey) {
        return pathKeys.some(function(pathKey) {
            var pathKeyList = getKeyPath(pathKey, true);
            return pathKeyList.includes(eventKey);
        });
    }, [
        getKeyPath
    ]);
    var getKeys = function getKeys() {
        var keys = _toConsumableArrayDefault.default(key2pathRef.current.keys());
        if (overflowKeys.length) keys.push(OVERFLOW_KEY);
        return keys;
    };
    /**
   * Find current key related child path keys
   */ var getSubPathKeys = _react.useCallback(function(key) {
        var connectedPath = "".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);
        var pathKeys = new Set();
        _toConsumableArrayDefault.default(path2keyRef.current.keys()).forEach(function(pathKey) {
            if (pathKey.startsWith(connectedPath)) pathKeys.add(path2keyRef.current.get(pathKey));
        });
        return pathKeys;
    }, []);
    _react.useEffect(function() {
        return function() {
            destroyRef.current = true;
        };
    }, []);
    return {
        // Register
        registerPath: registerPath,
        unregisterPath: unregisterPath,
        refreshOverflowKeys: refreshOverflowKeys,
        // Util
        isSubPathKey: isSubPathKey,
        getKeyPath: getKeyPath,
        getKeys: getKeys,
        getSubPathKeys: getSubPathKeys
    };
}
exports.default = useKeyRecords;

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/warning":"bfz97","../utils/timeUtil":"2rGc4","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2rGc4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextSlice", ()=>nextSlice
);
function nextSlice(callback) {
    /* istanbul ignore next */ Promise.resolve().then(callback);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2WAOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _nodeUtil = require("./utils/nodeUtil");
var _menuContext = require("./context/MenuContext");
var _pathContext = require("./context/PathContext");
var _excluded = [
    "className",
    "title",
    "eventKey",
    "children"
], _excluded2 = [
    "children"
];
var InternalMenuItemGroup = function InternalMenuItemGroup(_ref) {
    var className = _ref.className, title = _ref.title, eventKey = _ref.eventKey, children = _ref.children, restProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls;
    var groupPrefixCls = "".concat(prefixCls, "-item-group");
    return /*#__PURE__*/ _react.createElement("li", _extendsDefault.default({}, restProps, {
        onClick: function onClick(e) {
            return e.stopPropagation();
        },
        className: _classnamesDefault.default(groupPrefixCls, className)
    }), /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(groupPrefixCls, "-title"),
        title: typeof title === 'string' ? title : undefined
    }, title), /*#__PURE__*/ _react.createElement("ul", {
        className: "".concat(groupPrefixCls, "-list")
    }, children));
};
function MenuItemGroup(_ref2) {
    var children = _ref2.children, props = _objectWithoutPropertiesDefault.default(_ref2, _excluded2);
    var connectedKeyPath = _pathContext.useFullPath(props.eventKey);
    var childList = _nodeUtil.parseChildren(children, connectedKeyPath);
    var measure = _pathContext.useMeasure();
    if (measure) return childList;
    return /*#__PURE__*/ _react.createElement(InternalMenuItemGroup, _omitDefault.default(props, [
        'warnKey'
    ]), childList);
}
exports.default = MenuItemGroup;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","rc-util/es/omit":"9TJfY","./utils/nodeUtil":"jgEqH","./context/MenuContext":"2kTm7","./context/PathContext":"4UY6b","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kvl59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _menuContext = require("./context/MenuContext");
var _pathContext = require("./context/PathContext");
function Divider(_ref) {
    var className = _ref.className, style = _ref.style;
    var _React$useContext = _react.useContext(_menuContext.MenuContext), prefixCls = _React$useContext.prefixCls;
    var measure = _pathContext.useMeasure();
    if (measure) return null;
    return /*#__PURE__*/ _react.createElement("li", {
        className: _classnamesDefault.default("".concat(prefixCls, "-item-divider"), className),
        style: style
    });
}
exports.default = Divider;

},{"react":"b4tPL","classnames":"dFgpN","./context/MenuContext":"2kTm7","./context/PathContext":"4UY6b","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eoMNg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
exports.default = _dropdownDefault.default;

},{"./Dropdown":"eRJ1s","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eRJ1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _rcTrigger = require("rc-trigger");
var _rcTriggerDefault = parcelHelpers.interopDefault(_rcTrigger);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _placements = require("./placements");
var _placementsDefault = parcelHelpers.interopDefault(_placements);
var _useAccessibility = require("./hooks/useAccessibility");
var _useAccessibilityDefault = parcelHelpers.interopDefault(_useAccessibility);
var _ref = require("rc-util/es/ref");
var _excluded = [
    "arrow",
    "prefixCls",
    "transitionName",
    "animation",
    "align",
    "placement",
    "placements",
    "getPopupContainer",
    "showAction",
    "hideAction",
    "overlayClassName",
    "overlayStyle",
    "visible",
    "trigger"
];
function Dropdown(props, ref) {
    var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-dropdown' : _props$prefixCls, transitionName = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? 'bottomLeft' : _props$placement, _props$placements = props.placements, placements = _props$placements === void 0 ? _placementsDefault.default : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? [
        'hover'
    ] : _props$trigger, otherProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var _React$useState = _react.useState(), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
    var mergedVisible = 'visible' in props ? visible : triggerVisible;
    var triggerRef = _react.useRef(null);
    _react.useImperativeHandle(ref, function() {
        return triggerRef.current;
    });
    var menuRef = _react.useRef(null);
    var menuClassName = "".concat(prefixCls, "-menu");
    var _useAccessibility1 = _useAccessibilityDefault.default({
        visible: mergedVisible,
        setTriggerVisible: setTriggerVisible,
        triggerRef: triggerRef,
        menuRef: menuRef,
        onVisibleChange: props.onVisibleChange
    }), returnFocus = _useAccessibility1.returnFocus;
    var getOverlayElement = function getOverlayElement() {
        var overlay = props.overlay;
        var overlayElement;
        if (typeof overlay === 'function') overlayElement = overlay();
        else overlayElement = overlay;
        return overlayElement;
    };
    var onClick = function onClick(e) {
        var onOverlayClick = props.onOverlayClick;
        var overlayProps = getOverlayElement().props;
        setTriggerVisible(false);
        if (onOverlayClick) onOverlayClick(e);
        if (overlayProps.onClick) overlayProps.onClick(e);
        returnFocus();
    };
    var onVisibleChange = function onVisibleChange(newVisible) {
        var onVisibleChangeProp = props.onVisibleChange;
        setTriggerVisible(newVisible);
        if (typeof onVisibleChangeProp === 'function') onVisibleChangeProp(newVisible);
    };
    var getMenuElement = function getMenuElement() {
        var overlayElement = getOverlayElement(); // @ts-ignore
        var composedMenuRef = _ref.composeRef(menuRef, overlayElement.ref);
        var extraOverlayProps = {
            prefixCls: menuClassName,
            onClick: onClick,
            ref: _ref.supportRef(overlayElement) ? composedMenuRef : undefined
        };
        if (typeof overlayElement.type === 'string') delete extraOverlayProps.prefixCls;
        return /*#__PURE__*/ _react.createElement(_react.Fragment, null, arrow && /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-arrow")
        }), /*#__PURE__*/ _react.cloneElement(overlayElement, extraOverlayProps));
    };
    var getMenuElementOrLambda = function getMenuElementOrLambda() {
        var overlay = props.overlay;
        if (typeof overlay === 'function') return getMenuElement;
        return getMenuElement();
    };
    var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger() {
        var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint = props.alignPoint;
        if ('minOverlayWidthMatchTrigger' in props) return minOverlayWidthMatchTrigger;
        return !alignPoint;
    };
    var getOpenClassName = function getOpenClassName() {
        var openClassName = props.openClassName;
        if (openClassName !== undefined) return openClassName;
        return "".concat(prefixCls, "-open");
    };
    var renderChildren = function renderChildren() {
        var children = props.children;
        var childrenProps = children.props ? children.props : {};
        var childClassName = _classnamesDefault.default(childrenProps.className, getOpenClassName());
        return mergedVisible && children ? /*#__PURE__*/ _react.cloneElement(children, {
            className: childClassName
        }) : children;
    };
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger.indexOf('contextMenu') !== -1) triggerHideAction = [
        'click'
    ];
    return /*#__PURE__*/ _react.createElement(_rcTriggerDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({
        builtinPlacements: placements
    }, otherProps), {}, {
        prefixCls: prefixCls,
        ref: triggerRef,
        popupClassName: _classnamesDefault.default(overlayClassName, _definePropertyDefault.default({}, "".concat(prefixCls, "-show-arrow"), arrow)),
        popupStyle: overlayStyle,
        action: trigger,
        showAction: showAction,
        hideAction: triggerHideAction || [],
        popupPlacement: placement,
        popupAlign: align,
        popupTransitionName: transitionName,
        popupAnimation: animation,
        popupVisible: mergedVisible,
        stretch: getMinOverlayWidthMatchTrigger() ? 'minWidth' : '',
        popup: getMenuElementOrLambda(),
        onPopupVisibleChange: onVisibleChange,
        getPopupContainer: getPopupContainer
    }), renderChildren());
}
exports.default = /*#__PURE__*/ _react.forwardRef(Dropdown);

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","rc-trigger":"7w4OL","classnames":"dFgpN","./placements":"aJPlE","./hooks/useAccessibility":"kPfsS","rc-util/es/ref":"bvnCQ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aJPlE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
};
var targetOffset = [
    0,
    0
];
var placements = {
    topLeft: {
        points: [
            'bl',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    topCenter: {
        points: [
            'bc',
            'tc'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    topRight: {
        points: [
            'br',
            'tr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    bottomLeft: {
        points: [
            'tl',
            'bl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    },
    bottomCenter: {
        points: [
            'tc',
            'bc'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    },
    bottomRight: {
        points: [
            'tr',
            'br'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    }
};
exports.default = placements;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kPfsS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
var ESC = _keyCodeDefault.default.ESC, TAB = _keyCodeDefault.default.TAB;
function useAccessibility(_ref) {
    var visible = _ref.visible, setTriggerVisible = _ref.setTriggerVisible, triggerRef = _ref.triggerRef, menuRef = _ref.menuRef, onVisibleChange = _ref.onVisibleChange;
    var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {
        if (visible && triggerRef.current) {
            var _triggerRef$current, _triggerRef$current$t, _triggerRef$current$t2;
            (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || (_triggerRef$current$t = _triggerRef$current.triggerRef) === null || _triggerRef$current$t === void 0 || (_triggerRef$current$t2 = _triggerRef$current$t.current) === null || _triggerRef$current$t2 === void 0 || _triggerRef$current$t2.focus();
            setTriggerVisible(false);
            if (typeof onVisibleChange === 'function') onVisibleChange(false);
        }
    };
    var handleKeyDown = function handleKeyDown(event) {
        switch(event.keyCode){
            case ESC:
                handleCloseMenuAndReturnFocus();
                break;
            case TAB:
                handleCloseMenuAndReturnFocus();
                break;
        }
    };
    var focusOpenedMenu = function focusOpenedMenu() {
        var _menuRef$current, _menuRef$current$focu;
        (_menuRef$current = menuRef.current) === null || _menuRef$current === void 0 || (_menuRef$current$focu = _menuRef$current.focus) === null || _menuRef$current$focu === void 0 || _menuRef$current$focu.call(_menuRef$current);
    };
    _react.useEffect(function() {
        if (visible) {
            setTimeout(function() {
                focusOpenedMenu();
                window.addEventListener('keydown', handleKeyDown);
            }, 100);
            return function() {
                window.removeEventListener('keydown', handleKeyDown);
            };
        }
        return function() {
            return null;
        };
    }, [
        visible
    ]); // eslint-disable-line react-hooks/exhaustive-deps
    var returnFocus = function returnFocus() {
        if (visible) setTimeout(function() {
            var _triggerRef$current2, _triggerRef$current2$, _triggerRef$current2$2, _triggerRef$current2$3;
            (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 || (_triggerRef$current2$ = _triggerRef$current2.triggerRef) === null || _triggerRef$current2$ === void 0 || (_triggerRef$current2$2 = _triggerRef$current2$.current) === null || _triggerRef$current2$2 === void 0 || (_triggerRef$current2$3 = _triggerRef$current2$2.focus) === null || _triggerRef$current2$3 === void 0 || _triggerRef$current2$3.call(_triggerRef$current2$2);
        }, 100);
    };
    return {
        returnFocus: returnFocus
    };
}
exports.default = useAccessibility;

},{"react":"b4tPL","rc-util/es/KeyCode":"1ukEC","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5cbyx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function AddButton(_ref, ref) {
    var prefixCls = _ref.prefixCls, editable = _ref.editable, locale = _ref.locale, style = _ref.style;
    if (!editable || editable.showAdd === false) return null;
    return /*#__PURE__*/ _react.createElement("button", {
        ref: ref,
        type: "button",
        className: "".concat(prefixCls, "-nav-add"),
        style: style,
        "aria-label": (locale === null || locale === void 0 ? void 0 : locale.addAriaLabel) || 'Add tab',
        onClick: function onClick(event) {
            editable.onEdit('add', {
                event: event
            });
        }
    }, editable.addIcon || '+');
}
exports.default = /*#__PURE__*/ _react.forwardRef(AddButton);

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"j4iht":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
exports.default = /*#__PURE__*/ _react.createContext(null);

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3u9dj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var MIN_SWIPE_DISTANCE = 0.1;
var STOP_SWIPE_DISTANCE = 0.01;
var REFRESH_INTERVAL = 20;
var SPEED_OFF_MULTIPLE = Math.pow(0.995, REFRESH_INTERVAL); // ================================= Hook =================================
function useTouchMove(ref, onOffset) {
    var _useState = _react.useState(), _useState2 = _slicedToArrayDefault.default(_useState, 2), touchPosition = _useState2[0], setTouchPosition = _useState2[1];
    var _useState3 = _react.useState(0), _useState4 = _slicedToArrayDefault.default(_useState3, 2), lastTimestamp = _useState4[0], setLastTimestamp = _useState4[1];
    var _useState5 = _react.useState(0), _useState6 = _slicedToArrayDefault.default(_useState5, 2), lastTimeDiff = _useState6[0], setLastTimeDiff = _useState6[1];
    var _useState7 = _react.useState(), _useState8 = _slicedToArrayDefault.default(_useState7, 2), lastOffset = _useState8[0], setLastOffset = _useState8[1];
    var motionRef = _react.useRef(); // ========================= Events =========================
    // >>> Touch events
    function onTouchStart(e) {
        var _e$touches$ = e.touches[0], screenX = _e$touches$.screenX, screenY = _e$touches$.screenY;
        setTouchPosition({
            x: screenX,
            y: screenY
        });
        window.clearInterval(motionRef.current);
    }
    function onTouchMove(e) {
        if (!touchPosition) return;
        e.preventDefault();
        var _e$touches$2 = e.touches[0], screenX = _e$touches$2.screenX, screenY = _e$touches$2.screenY;
        setTouchPosition({
            x: screenX,
            y: screenY
        });
        var offsetX = screenX - touchPosition.x;
        var offsetY = screenY - touchPosition.y;
        onOffset(offsetX, offsetY);
        var now = Date.now();
        setLastTimestamp(now);
        setLastTimeDiff(now - lastTimestamp);
        setLastOffset({
            x: offsetX,
            y: offsetY
        });
    }
    function onTouchEnd() {
        if (!touchPosition) return;
        setTouchPosition(null);
        setLastOffset(null); // Swipe if needed
        if (lastOffset) {
            var distanceX = lastOffset.x / lastTimeDiff;
            var distanceY = lastOffset.y / lastTimeDiff;
            var absX = Math.abs(distanceX);
            var absY = Math.abs(distanceY); // Skip swipe if low distance
            if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE) return;
            var currentX = distanceX;
            var currentY = distanceY;
            motionRef.current = window.setInterval(function() {
                if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {
                    window.clearInterval(motionRef.current);
                    return;
                }
                currentX *= SPEED_OFF_MULTIPLE;
                currentY *= SPEED_OFF_MULTIPLE;
                onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL);
            }, REFRESH_INTERVAL);
        }
    } // >>> Wheel event
    var lastWheelDirectionRef = _react.useRef();
    function onWheel(e) {
        var deltaX = e.deltaX, deltaY = e.deltaY; // Convert both to x & y since wheel only happened on PC
        var mixed = 0;
        var absX = Math.abs(deltaX);
        var absY = Math.abs(deltaY);
        if (absX === absY) mixed = lastWheelDirectionRef.current === 'x' ? deltaX : deltaY;
        else if (absX > absY) {
            mixed = deltaX;
            lastWheelDirectionRef.current = 'x';
        } else {
            mixed = deltaY;
            lastWheelDirectionRef.current = 'y';
        }
        if (onOffset(-mixed, -mixed)) e.preventDefault();
    } // ========================= Effect =========================
    var touchEventsRef = _react.useRef(null);
    touchEventsRef.current = {
        onTouchStart: onTouchStart,
        onTouchMove: onTouchMove,
        onTouchEnd: onTouchEnd,
        onWheel: onWheel
    };
    _react.useEffect(function() {
        function onProxyTouchStart(e) {
            touchEventsRef.current.onTouchStart(e);
        }
        function onProxyTouchMove(e) {
            touchEventsRef.current.onTouchMove(e);
        }
        function onProxyTouchEnd(e) {
            touchEventsRef.current.onTouchEnd(e);
        }
        function onProxyWheel(e) {
            touchEventsRef.current.onWheel(e);
        }
        document.addEventListener('touchmove', onProxyTouchMove, {
            passive: false
        });
        document.addEventListener('touchend', onProxyTouchEnd, {
            passive: false
        }); // No need to clean up since element removed
        ref.current.addEventListener('touchstart', onProxyTouchStart, {
            passive: false
        });
        ref.current.addEventListener('wheel', onProxyWheel);
        return function() {
            document.removeEventListener('touchmove', onProxyTouchMove);
            document.removeEventListener('touchend', onProxyTouchEnd);
        };
    }, []);
}
exports.default = useTouchMove;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bzXIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useRefs() {
    var cacheRefs = _react.useRef(new Map());
    function getRef(key) {
        if (!cacheRefs.current.has(key)) cacheRefs.current.set(key, /*#__PURE__*/ _react.createRef());
        return cacheRefs.current.get(key);
    }
    function removeRef(key) {
        cacheRefs.current.delete(key);
    }
    return [
        getRef,
        removeRef
    ];
}
exports.default = useRefs;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ahT9T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
function useSyncState(defaultState, onChange) {
    var stateRef = _react.useRef(defaultState);
    var _React$useState = _react.useState({}), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), forceUpdate = _React$useState2[1];
    function setState(updater) {
        var newValue = typeof updater === 'function' ? updater(stateRef.current) : updater;
        if (newValue !== stateRef.current) onChange(newValue, stateRef.current);
        stateRef.current = newValue;
        forceUpdate({});
    }
    return [
        stateRef.current,
        setState
    ];
}
exports.default = useSyncState;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jvPov":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _tabContext = require("../TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
function TabPanelList(_ref) {
    var id = _ref.id, activeKey = _ref.activeKey, animated = _ref.animated, tabPosition = _ref.tabPosition, rtl = _ref.rtl, destroyInactiveTabPane = _ref.destroyInactiveTabPane;
    var _React$useContext = _react.useContext(_tabContextDefault.default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var tabPaneAnimated = animated.tabPane;
    var activeIndex = tabs.findIndex(function(tab) {
        return tab.key === activeKey;
    });
    return /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-content-holder"))
    }, /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-content"), "".concat(prefixCls, "-content-").concat(tabPosition), _definePropertyDefault.default({}, "".concat(prefixCls, "-content-animated"), tabPaneAnimated)),
        style: activeIndex && tabPaneAnimated ? _definePropertyDefault.default({}, rtl ? 'marginRight' : 'marginLeft', "-".concat(activeIndex, "00%")) : null
    }, tabs.map(function(tab) {
        return /*#__PURE__*/ _react.cloneElement(tab.node, {
            key: tab.key,
            prefixCls: prefixCls,
            tabKey: tab.key,
            id: id,
            animated: tabPaneAnimated,
            active: tab.key === activeKey,
            destroyInactiveTabPane: destroyInactiveTabPane
        });
    })));
}
exports.default = TabPanelList;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","../TabContext":"j4iht","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aoHnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
function TabPane(_ref) {
    var prefixCls = _ref.prefixCls, forceRender = _ref.forceRender, className = _ref.className, style = _ref.style, id = _ref.id, active = _ref.active, animated = _ref.animated, destroyInactiveTabPane = _ref.destroyInactiveTabPane, tabKey = _ref.tabKey, children = _ref.children;
    var _React$useState = _react.useState(forceRender), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), visited = _React$useState2[0], setVisited = _React$useState2[1];
    _react.useEffect(function() {
        if (active) setVisited(true);
        else if (destroyInactiveTabPane) setVisited(false);
    }, [
        active,
        destroyInactiveTabPane
    ]);
    var mergedStyle = {};
    if (!active) {
        if (animated) {
            mergedStyle.visibility = 'hidden';
            mergedStyle.height = 0;
            mergedStyle.overflowY = 'hidden';
        } else mergedStyle.display = 'none';
    }
    return /*#__PURE__*/ _react.createElement("div", {
        id: id && "".concat(id, "-panel-").concat(tabKey),
        role: "tabpanel",
        tabIndex: active ? 0 : -1,
        "aria-labelledby": id && "".concat(id, "-tab-").concat(tabKey),
        "aria-hidden": !active,
        style: _objectSpread2Default.default(_objectSpread2Default.default({}, mergedStyle), style),
        className: _classnamesDefault.default("".concat(prefixCls, "-tabpane"), active && "".concat(prefixCls, "-tabpane-active"), className)
    }, (active || visited || forceRender) && children);
}
exports.default = TabPane;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5yqWH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _ellipsisOutlined = require("@ant-design/icons-svg/es/asn/EllipsisOutlined");
var _ellipsisOutlinedDefault = parcelHelpers.interopDefault(_ellipsisOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var EllipsisOutlined = function EllipsisOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _ellipsisOutlinedDefault.default
    }));
};
EllipsisOutlined.displayName = 'EllipsisOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(EllipsisOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/EllipsisOutlined":"dXXy2","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dXXy2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var EllipsisOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z"
                }
            }
        ]
    },
    "name": "ellipsis",
    "theme": "outlined"
};
exports.default = EllipsisOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"boSG6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _plusOutlined = require("@ant-design/icons-svg/es/asn/PlusOutlined");
var _plusOutlinedDefault = parcelHelpers.interopDefault(_plusOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var PlusOutlined = function PlusOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _plusOutlinedDefault.default
    }));
};
PlusOutlined.displayName = 'PlusOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(PlusOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/PlusOutlined":"5AqOh","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5AqOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var PlusOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "defs",
                "attrs": {},
                "children": [
                    {
                        "tag": "style",
                        "attrs": {}
                    }
                ]
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                }
            }
        ]
    },
    "name": "plus",
    "theme": "outlined"
};
exports.default = PlusOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"63sKn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _grid = require("../grid");
exports.default = _grid.Row;

},{"../grid":"lJL5G","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lJL5G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Row", ()=>_rowDefault.default
);
parcelHelpers.export(exports, "Col", ()=>_colDefault.default
);
var _row = require("./row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("./col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _useBreakpoint = require("./hooks/useBreakpoint"); // Do not export params
var _useBreakpointDefault = parcelHelpers.interopDefault(_useBreakpoint);
function useBreakpoint() {
    return _useBreakpointDefault.default();
}
exports.default = {
    useBreakpoint: useBreakpoint
};

},{"./row":"4EqqH","./col":"fn4L1","./hooks/useBreakpoint":"jQJtF","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4EqqH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var _rowContext = require("./RowContext");
var _rowContextDefault = parcelHelpers.interopDefault(_rowContext);
var _type = require("../_util/type");
var _responsiveObserve = require("../_util/responsiveObserve");
var _responsiveObserveDefault = parcelHelpers.interopDefault(_responsiveObserve);
var _useFlexGapSupport = require("../_util/hooks/useFlexGapSupport");
var _useFlexGapSupportDefault = parcelHelpers.interopDefault(_useFlexGapSupport);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var RowAligns = _type.tuple('top', 'middle', 'bottom', 'stretch');
var RowJustify = _type.tuple('start', 'end', 'center', 'space-around', 'space-between');
var Row = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, justify = props.justify, align = props.align, className = props.className, style = props.style, children = props.children, _props$gutter = props.gutter, gutter = _props$gutter === void 0 ? 0 : _props$gutter, wrap = props.wrap, others = __rest(props, [
        "prefixCls",
        "justify",
        "align",
        "className",
        "style",
        "children",
        "gutter",
        "wrap"
    ]);
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useState = _react.useState({
        xs: true,
        sm: true,
        md: true,
        lg: true,
        xl: true,
        xxl: true
    }), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), screens = _React$useState2[0], setScreens = _React$useState2[1];
    var supportFlexGap = _useFlexGapSupportDefault.default();
    var gutterRef = _react.useRef(gutter); // ================================== Effect ==================================
    _react.useEffect(function() {
        var token = _responsiveObserveDefault.default.subscribe(function(screen) {
            var currentGutter = gutterRef.current || 0;
            if (!Array.isArray(currentGutter) && _typeofDefault.default(currentGutter) === 'object' || Array.isArray(currentGutter) && (_typeofDefault.default(currentGutter[0]) === 'object' || _typeofDefault.default(currentGutter[1]) === 'object')) setScreens(screen);
        });
        return function() {
            return _responsiveObserveDefault.default.unsubscribe(token);
        };
    }, []); // ================================== Render ==================================
    var getGutter = function getGutter() {
        var results = [
            0,
            0
        ];
        var normalizedGutter = Array.isArray(gutter) ? gutter : [
            gutter,
            0
        ];
        normalizedGutter.forEach(function(g, index) {
            if (_typeofDefault.default(g) === 'object') for(var i = 0; i < _responsiveObserve.responsiveArray.length; i++){
                var breakpoint = _responsiveObserve.responsiveArray[i];
                if (screens[breakpoint] && g[breakpoint] !== undefined) {
                    results[index] = g[breakpoint];
                    break;
                }
            }
            else results[index] = g || 0;
        });
        return results;
    };
    var prefixCls = getPrefixCls('row', customizePrefixCls);
    var gutters = getGutter();
    var classes = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-no-wrap"), wrap === false), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(justify), justify), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(align), align), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className); // Add gutter related style
    var rowStyle = {};
    var horizontalGutter = gutters[0] > 0 ? gutters[0] / -2 : undefined;
    var verticalGutter = gutters[1] > 0 ? gutters[1] / -2 : undefined;
    if (horizontalGutter) {
        rowStyle.marginLeft = horizontalGutter;
        rowStyle.marginRight = horizontalGutter;
    }
    if (supportFlexGap) {
        // Set gap direct if flex gap support
        var _gutters = _slicedToArrayDefault.default(gutters, 2);
        rowStyle.rowGap = _gutters[1];
    } else if (verticalGutter) {
        rowStyle.marginTop = verticalGutter;
        rowStyle.marginBottom = verticalGutter;
    } // "gutters" is a new array in each rendering phase, it'll make 'React.useMemo' effectless.
    // So we deconstruct "gutters" variable here.
    var _gutters2 = _slicedToArrayDefault.default(gutters, 2), gutterH = _gutters2[0], gutterV = _gutters2[1];
    var rowContext = _react.useMemo(function() {
        return {
            gutter: [
                gutterH,
                gutterV
            ],
            wrap: wrap,
            supportFlexGap: supportFlexGap
        };
    }, [
        gutterH,
        gutterV,
        wrap,
        supportFlexGap
    ]);
    return /*#__PURE__*/ _react.createElement(_rowContextDefault.default.Provider, {
        value: rowContext
    }, /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, others, {
        className: classes,
        style: _extendsDefault.default(_extendsDefault.default({}, rowStyle), style),
        ref: ref
    }), children));
});
Row.displayName = 'Row';
exports.default = Row;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","./RowContext":"i0lnf","../_util/type":"cMtUJ","../_util/responsiveObserve":"50dEd","../_util/hooks/useFlexGapSupport":"g5Db2","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"i0lnf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var RowContext = /*#__PURE__*/ _react.createContext({});
exports.default = RowContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"50dEd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "responsiveArray", ()=>responsiveArray
);
parcelHelpers.export(exports, "responsiveMap", ()=>responsiveMap
);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var responsiveArray = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
var responsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
};
var subscribers = new Map();
var subUid = -1;
var screens = {};
var responsiveObserve = {
    matchHandlers: {},
    dispatch: function dispatch(pointMap) {
        screens = pointMap;
        subscribers.forEach(function(func) {
            return func(screens);
        });
        return subscribers.size >= 1;
    },
    subscribe: function subscribe(func) {
        if (!subscribers.size) this.register();
        subUid += 1;
        subscribers.set(subUid, func);
        func(screens);
        return subUid;
    },
    unsubscribe: function unsubscribe(token) {
        subscribers["delete"](token);
        if (!subscribers.size) this.unregister();
    },
    unregister: function unregister() {
        var _this = this;
        Object.keys(responsiveMap).forEach(function(screen) {
            var matchMediaQuery = responsiveMap[screen];
            var handler = _this.matchHandlers[matchMediaQuery];
            handler === null || handler === void 0 || handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
        });
        subscribers.clear();
    },
    register: function register() {
        var _this2 = this;
        Object.keys(responsiveMap).forEach(function(screen) {
            var matchMediaQuery = responsiveMap[screen];
            var listener = function listener(_ref) {
                var matches = _ref.matches;
                _this2.dispatch(_extendsDefault.default(_extendsDefault.default({}, screens), _definePropertyDefault.default({}, screen, matches)));
            };
            var mql = window.matchMedia(matchMediaQuery);
            mql.addListener(listener);
            _this2.matchHandlers[matchMediaQuery] = {
                mql: mql,
                listener: listener
            };
            listener(mql);
        });
    }
};
exports.default = responsiveObserve;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/extends":"9HBJh","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"g5Db2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _styleChecker = require("../styleChecker");
exports.default = function() {
    var _React$useState = _react.useState(false), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), flexible = _React$useState2[0], setFlexible = _React$useState2[1];
    _react.useEffect(function() {
        setFlexible(_styleChecker.detectFlexGapSupported());
    }, []);
    return flexible;
};

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","../styleChecker":"6l2QA","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6l2QA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "canUseDocElement", ()=>canUseDocElement
);
parcelHelpers.export(exports, "isStyleSupport", ()=>_styleChecker.isStyleSupport
);
parcelHelpers.export(exports, "detectFlexGapSupported", ()=>detectFlexGapSupported
);
var _canUseDom = require("rc-util/es/Dom/canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var _styleChecker = require("rc-util/es/Dom/styleChecker");
var canUseDocElement = function canUseDocElement() {
    return _canUseDomDefault.default() && window.document.documentElement;
};
var flexGapSupported;
var detectFlexGapSupported = function detectFlexGapSupported() {
    if (!canUseDocElement()) return false;
    if (flexGapSupported !== undefined) return flexGapSupported;
     // create flex container with row-gap set
    var flex = document.createElement('div');
    flex.style.display = 'flex';
    flex.style.flexDirection = 'column';
    flex.style.rowGap = '1px'; // create two, elements inside it
    flex.appendChild(document.createElement('div'));
    flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)
    document.body.appendChild(flex);
    flexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap
    document.body.removeChild(flex);
    return flexGapSupported;
};

},{"rc-util/es/Dom/canUseDom":"bCk8j","rc-util/es/Dom/styleChecker":"fBI0k","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fBI0k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isStyleSupport", ()=>isStyleSupport
);
var _canUseDom = require("./canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var isStyleNameSupport = function isStyleNameSupport(styleName) {
    if (_canUseDomDefault.default() && window.document.documentElement) {
        var styleNameList = Array.isArray(styleName) ? styleName : [
            styleName
        ];
        var documentElement = window.document.documentElement;
        return styleNameList.some(function(name) {
            return name in documentElement.style;
        });
    }
    return false;
};
var isStyleValueSupport = function isStyleValueSupport(styleName, value) {
    if (!isStyleNameSupport(styleName)) return false;
    var ele = document.createElement('div');
    var origin = ele.style[styleName];
    ele.style[styleName] = value;
    return ele.style[styleName] !== origin;
};
function isStyleSupport(styleName, styleValue) {
    if (!Array.isArray(styleName) && styleValue !== undefined) return isStyleValueSupport(styleName, styleValue);
    return isStyleNameSupport(styleName);
}

},{"./canUseDom":"bCk8j","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"fn4L1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rowContext = require("./RowContext");
var _rowContextDefault = parcelHelpers.interopDefault(_rowContext);
var _configProvider = require("../config-provider");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function parseFlex(flex) {
    if (typeof flex === 'number') return "".concat(flex, " ").concat(flex, " auto");
    if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) return "0 0 ".concat(flex);
    return flex;
}
var sizes = [
    'xs',
    'sm',
    'md',
    'lg',
    'xl',
    'xxl'
];
var Col = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _React$useContext2 = _react.useContext(_rowContextDefault.default), gutter = _React$useContext2.gutter, wrap = _React$useContext2.wrap, supportFlexGap = _React$useContext2.supportFlexGap;
    var customizePrefixCls = props.prefixCls, span = props.span, order = props.order, offset = props.offset, push = props.push, pull = props.pull, className = props.className, children = props.children, flex = props.flex, style = props.style, others = __rest(props, [
        "prefixCls",
        "span",
        "order",
        "offset",
        "push",
        "pull",
        "className",
        "children",
        "flex",
        "style"
    ]);
    var prefixCls = getPrefixCls('col', customizePrefixCls);
    var sizeClassObj = {};
    sizes.forEach(function(size) {
        var _extends2;
        var sizeProps = {};
        var propSize = props[size];
        if (typeof propSize === 'number') sizeProps.span = propSize;
        else if (_typeofDefault.default(propSize) === 'object') sizeProps = propSize || {};
        delete others[size];
        sizeClassObj = _extendsDefault.default(_extendsDefault.default({}, sizeClassObj), (_extends2 = {}, _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== undefined), _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _definePropertyDefault.default(_extends2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _extends2));
    });
    var classes = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-").concat(span), span !== undefined), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-order-").concat(order), order), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-offset-").concat(offset), offset), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-push-").concat(push), push), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-pull-").concat(pull), pull), _classNames), className, sizeClassObj);
    var mergedStyle = {}; // Horizontal gutter use padding
    if (gutter && gutter[0] > 0) {
        var horizontalGutter = gutter[0] / 2;
        mergedStyle.paddingLeft = horizontalGutter;
        mergedStyle.paddingRight = horizontalGutter;
    } // Vertical gutter use padding when gap not support
    if (gutter && gutter[1] > 0 && !supportFlexGap) {
        var verticalGutter = gutter[1] / 2;
        mergedStyle.paddingTop = verticalGutter;
        mergedStyle.paddingBottom = verticalGutter;
    }
    if (flex) {
        mergedStyle.flex = parseFlex(flex); // Hack for Firefox to avoid size issue
        // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553
        if (wrap === false && !mergedStyle.minWidth) mergedStyle.minWidth = 0;
    }
    return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, others, {
        style: _extendsDefault.default(_extendsDefault.default({}, mergedStyle), style),
        className: classes,
        ref: ref
    }), children);
});
Col.displayName = 'Col';
exports.default = Col;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","classnames":"dFgpN","./RowContext":"i0lnf","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jQJtF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useForceUpdate = require("../../_util/hooks/useForceUpdate");
var _useForceUpdateDefault = parcelHelpers.interopDefault(_useForceUpdate);
var _responsiveObserve = require("../../_util/responsiveObserve");
var _responsiveObserveDefault = parcelHelpers.interopDefault(_responsiveObserve);
function useBreakpoint() {
    var refreshOnChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var screensRef = _react.useRef({});
    var forceUpdate = _useForceUpdateDefault.default();
    _react.useEffect(function() {
        var token = _responsiveObserveDefault.default.subscribe(function(supportScreens) {
            screensRef.current = supportScreens;
            if (refreshOnChange) forceUpdate();
        });
        return function() {
            return _responsiveObserveDefault.default.unsubscribe(token);
        };
    }, []);
    return screensRef.current;
}
exports.default = useBreakpoint;

},{"react":"b4tPL","../../_util/hooks/useForceUpdate":"aS29V","../../_util/responsiveObserve":"50dEd","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"aS29V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
function useForceUpdate() {
    var _React$useReducer = _react.useReducer(function(x) {
        return x + 1;
    }, 0), _React$useReducer2 = _slicedToArrayDefault.default(_React$useReducer, 2), forceUpdate = _React$useReducer2[1];
    return forceUpdate;
}
exports.default = useForceUpdate;

},{"@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hY9cv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _grid = require("../grid");
exports.default = _grid.Col;

},{"../grid":"lJL5G","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jIZZ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _react = require("react");
var _eyeOutlined = require("@ant-design/icons/es/icons/EyeOutlined");
var _eyeOutlinedDefault = parcelHelpers.interopDefault(_eyeOutlined);
var _rcImage = require("rc-image");
var _rcImageDefault = parcelHelpers.interopDefault(_rcImage);
var _enUS = require("../locale/en_US");
var _enUSDefault = parcelHelpers.interopDefault(_enUS);
var _previewGroup = require("./PreviewGroup");
var _previewGroupDefault = parcelHelpers.interopDefault(_previewGroup);
var _configProvider = require("../config-provider");
var _motion = require("../_util/motion");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var Image = function Image(_a) {
    var customizePrefixCls = _a.prefixCls, preview = _a.preview, otherProps = __rest(_a, [
        "prefixCls",
        "preview"
    ]);
    var _useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _useContext.getPrefixCls;
    var prefixCls = getPrefixCls('image', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var _useContext2 = _react.useContext(_configProvider.ConfigContext), _useContext2$locale = _useContext2.locale, contextLocale = _useContext2$locale === void 0 ? _enUSDefault.default : _useContext2$locale;
    var imageLocale = contextLocale.Image || _enUSDefault.default.Image;
    var mergedPreview = _react.useMemo(function() {
        if (preview === false) return preview;
        var _preview = _typeofDefault.default(preview) === 'object' ? preview : {};
        return _extendsDefault.default(_extendsDefault.default({
            mask: /*#__PURE__*/ _react.createElement("div", {
                className: "".concat(prefixCls, "-mask-info")
            }, /*#__PURE__*/ _react.createElement(_eyeOutlinedDefault.default, null), imageLocale === null || imageLocale === void 0 ? void 0 : imageLocale.preview),
            icons: _previewGroup.icons
        }, _preview), {
            transitionName: _motion.getTransitionName(rootPrefixCls, 'zoom', _preview.transitionName),
            maskTransitionName: _motion.getTransitionName(rootPrefixCls, 'fade', _preview.maskTransitionName)
        });
    }, [
        preview,
        imageLocale
    ]);
    return /*#__PURE__*/ _react.createElement(_rcImageDefault.default, _extendsDefault.default({
        prefixCls: prefixCls,
        preview: mergedPreview
    }, otherProps));
};
Image.PreviewGroup = _previewGroupDefault.default;
exports.default = Image;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","@ant-design/icons/es/icons/EyeOutlined":"3Lhq9","rc-image":"dwY3x","../locale/en_US":"1SByz","./PreviewGroup":"gCeZH","../config-provider":"dg9FJ","../_util/motion":"f0OsB","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3Lhq9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _eyeOutlined = require("@ant-design/icons-svg/es/asn/EyeOutlined");
var _eyeOutlinedDefault = parcelHelpers.interopDefault(_eyeOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var EyeOutlined = function EyeOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _eyeOutlinedDefault.default
    }));
};
EyeOutlined.displayName = 'EyeOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(EyeOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/EyeOutlined":"cE6Kg","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cE6Kg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var EyeOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z"
                }
            }
        ]
    },
    "name": "eye",
    "theme": "outlined"
};
exports.default = EyeOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dwY3x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _image = require("./Image");
var _imageDefault = parcelHelpers.interopDefault(_image);
parcelHelpers.exportAll(_image, exports);
exports.default = _imageDefault.default;

},{"./Image":"1OPbn","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1OPbn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _css = require("rc-util/es/Dom/css");
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _preview = require("./Preview");
var _previewDefault = parcelHelpers.interopDefault(_preview);
var _previewGroup = require("./PreviewGroup");
var _previewGroupDefault = parcelHelpers.interopDefault(_previewGroup);
var _excluded = [
    "src",
    "alt",
    "onPreviewClose",
    "prefixCls",
    "previewPrefixCls",
    "placeholder",
    "fallback",
    "width",
    "height",
    "style",
    "preview",
    "className",
    "onClick",
    "onError",
    "wrapperClassName",
    "wrapperStyle",
    "crossOrigin",
    "decoding",
    "loading",
    "referrerPolicy",
    "sizes",
    "srcSet",
    "useMap"
], _excluded2 = [
    "src",
    "visible",
    "onVisibleChange",
    "getContainer",
    "mask",
    "maskClassName",
    "icons"
];
var uuid = 0;
var ImageInternal = function ImageInternal(_ref) {
    var imgSrc = _ref.src, alt = _ref.alt, onInitialPreviewClose = _ref.onPreviewClose, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? 'rc-image' : _ref$prefixCls, _ref$previewPrefixCls = _ref.previewPrefixCls, previewPrefixCls = _ref$previewPrefixCls === void 0 ? "".concat(prefixCls, "-preview") : _ref$previewPrefixCls, placeholder = _ref.placeholder, fallback = _ref.fallback, width = _ref.width, height = _ref.height, style = _ref.style, _ref$preview = _ref.preview, preview = _ref$preview === void 0 ? true : _ref$preview, className = _ref.className, onClick = _ref.onClick, onImageError = _ref.onError, wrapperClassName = _ref.wrapperClassName, wrapperStyle = _ref.wrapperStyle, crossOrigin = _ref.crossOrigin, decoding = _ref.decoding, loading = _ref.loading, referrerPolicy = _ref.referrerPolicy, sizes = _ref.sizes, srcSet = _ref.srcSet, useMap = _ref.useMap, otherProps = _objectWithoutPropertiesDefault.default(_ref, _excluded);
    var isCustomPlaceholder = placeholder && placeholder !== true;
    var _ref2 = _typeofDefault.default(preview) === 'object' ? preview : {}, previewSrc = _ref2.src, _ref2$visible = _ref2.visible, previewVisible = _ref2$visible === void 0 ? undefined : _ref2$visible, _ref2$onVisibleChange = _ref2.onVisibleChange, onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? onInitialPreviewClose : _ref2$onVisibleChange, _ref2$getContainer = _ref2.getContainer, getPreviewContainer = _ref2$getContainer === void 0 ? undefined : _ref2$getContainer, previewMask = _ref2.mask, maskClassName = _ref2.maskClassName, icons = _ref2.icons, dialogProps = _objectWithoutPropertiesDefault.default(_ref2, _excluded2);
    var src = previewSrc !== null && previewSrc !== void 0 ? previewSrc : imgSrc;
    var isControlled = previewVisible !== undefined;
    var _useMergedState1 = _useMergedStateDefault.default(!!previewVisible, {
        value: previewVisible,
        onChange: onPreviewVisibleChange
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), isShowPreview = _useMergedState2[0], setShowPreview = _useMergedState2[1];
    var _useState = _react.useState(isCustomPlaceholder ? 'loading' : 'normal'), _useState2 = _slicedToArrayDefault.default(_useState, 2), status = _useState2[0], setStatus = _useState2[1];
    var _useState3 = _react.useState(null), _useState4 = _slicedToArrayDefault.default(_useState3, 2), mousePosition = _useState4[0], setMousePosition = _useState4[1];
    var isError = status === 'error';
    var _React$useContext = _react.useContext(_previewGroup.context), isPreviewGroup = _React$useContext.isPreviewGroup, setCurrent = _React$useContext.setCurrent, setGroupShowPreview = _React$useContext.setShowPreview, setGroupMousePosition = _React$useContext.setMousePosition, registerImage = _React$useContext.registerImage;
    var _React$useState = _react.useState(function() {
        uuid += 1;
        return uuid;
    }), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 1), currentId = _React$useState2[0];
    var canPreview = preview && !isError;
    var isLoaded = _react.useRef(false);
    var onLoad = function onLoad() {
        setStatus('normal');
    };
    var onError = function onError(e) {
        if (onImageError) onImageError(e);
        setStatus('error');
    };
    var onPreview = function onPreview(e) {
        if (!isControlled) {
            var _getOffset = _css.getOffset(e.target), left = _getOffset.left, top = _getOffset.top;
            if (isPreviewGroup) {
                setCurrent(currentId);
                setGroupMousePosition({
                    x: left,
                    y: top
                });
            } else setMousePosition({
                x: left,
                y: top
            });
        }
        if (isPreviewGroup) setGroupShowPreview(true);
        else setShowPreview(true);
        if (onClick) onClick(e);
    };
    var onPreviewClose = function onPreviewClose(e) {
        e.stopPropagation();
        setShowPreview(false);
        if (!isControlled) setMousePosition(null);
    };
    var getImgRef = function getImgRef(img) {
        isLoaded.current = false;
        if (status !== 'loading') return;
        if ((img === null || img === void 0 ? void 0 : img.complete) && (img.naturalWidth || img.naturalHeight)) {
            isLoaded.current = true;
            onLoad();
        }
    }; // Keep order start
    // Resolve https://github.com/ant-design/ant-design/issues/28881
    // Only need unRegister when component unMount
    _react.useEffect(function() {
        var unRegister = registerImage(currentId, src);
        return unRegister;
    }, []);
    _react.useEffect(function() {
        registerImage(currentId, src, canPreview);
    }, [
        src,
        canPreview
    ]); // Keep order end
    _react.useEffect(function() {
        if (isError) setStatus('normal');
        if (isCustomPlaceholder && !isLoaded.current) setStatus('loading');
    }, [
        imgSrc
    ]);
    var wrapperClass = _classnamesDefault.default(prefixCls, wrapperClassName, _definePropertyDefault.default({}, "".concat(prefixCls, "-error"), isError));
    var mergedSrc = isError && fallback ? fallback : src;
    var imgCommonProps = {
        crossOrigin: crossOrigin,
        decoding: decoding,
        loading: loading,
        referrerPolicy: referrerPolicy,
        sizes: sizes,
        srcSet: srcSet,
        useMap: useMap,
        alt: alt,
        className: _classnamesDefault.default("".concat(prefixCls, "-img"), _definePropertyDefault.default({}, "".concat(prefixCls, "-img-placeholder"), placeholder === true), className),
        style: _objectSpread2Default.default({
            height: height
        }, style)
    };
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({}, otherProps, {
        className: wrapperClass,
        onClick: canPreview ? onPreview : onClick,
        style: _objectSpread2Default.default({
            width: width,
            height: height
        }, wrapperStyle)
    }), /*#__PURE__*/ _react.createElement("img", _extendsDefault.default({}, imgCommonProps, {
        ref: getImgRef
    }, isError && fallback ? {
        src: fallback
    } : {
        onLoad: onLoad,
        onError: onError,
        src: imgSrc
    })), status === 'loading' && /*#__PURE__*/ _react.createElement("div", {
        "aria-hidden": "true",
        className: "".concat(prefixCls, "-placeholder")
    }, placeholder), previewMask && canPreview && /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-mask"), maskClassName)
    }, previewMask)), !isPreviewGroup && canPreview && /*#__PURE__*/ _react.createElement(_previewDefault.default, _extendsDefault.default({
        "aria-hidden": !isShowPreview,
        visible: isShowPreview,
        prefixCls: previewPrefixCls,
        onClose: onPreviewClose,
        mousePosition: mousePosition,
        src: mergedSrc,
        alt: alt,
        getContainer: getPreviewContainer,
        icons: icons
    }, dialogProps)));
};
ImageInternal.PreviewGroup = _previewGroupDefault.default;
ImageInternal.displayName = 'Image';
exports.default = ImageInternal;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","classnames":"dFgpN","rc-util/es/Dom/css":"cxI2O","rc-util/es/hooks/useMergedState":"jUfJa","./Preview":"kDErY","./PreviewGroup":"f4Fnn","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cxI2O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "get", ()=>get
);
parcelHelpers.export(exports, "set", ()=>set
);
parcelHelpers.export(exports, "getOuterWidth", ()=>getOuterWidth
);
parcelHelpers.export(exports, "getOuterHeight", ()=>getOuterHeight
);
parcelHelpers.export(exports, "getDocSize", ()=>getDocSize
);
parcelHelpers.export(exports, "getClientSize", ()=>getClientSize
);
parcelHelpers.export(exports, "getScroll", ()=>getScroll
);
parcelHelpers.export(exports, "getOffset", ()=>getOffset
);
/* eslint-disable no-nested-ternary */ var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset/;
var removePixel = {
    left: true,
    top: true
};
var floatMap = {
    cssFloat: 1,
    styleFloat: 1,
    float: 1
};
function getComputedStyle(node) {
    return node.nodeType === 1 ? node.ownerDocument.defaultView.getComputedStyle(node, null) : {};
}
function getStyleValue(node, type, value) {
    type = type.toLowerCase();
    if (value === 'auto') {
        if (type === 'height') return node.offsetHeight;
        if (type === 'width') return node.offsetWidth;
    }
    if (!(type in removePixel)) removePixel[type] = PIXEL_PATTERN.test(type);
    return removePixel[type] ? parseFloat(value) || 0 : value;
}
function get(node, name) {
    var length = arguments.length;
    var style = getComputedStyle(node);
    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
    return length === 1 ? style : getStyleValue(node, name, style[name] || node.style[name]);
}
function set(node, name, value) {
    var length = arguments.length;
    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
    if (length === 3) {
        if (typeof value === 'number' && PIXEL_PATTERN.test(name)) value = "".concat(value, "px");
        node.style[name] = value; // Number
        return value;
    }
    for(var x in name)if (name.hasOwnProperty(x)) set(node, x, name[x]);
    return getComputedStyle(node);
}
function getOuterWidth(el) {
    if (el === document.body) return document.documentElement.clientWidth;
    return el.offsetWidth;
}
function getOuterHeight(el) {
    if (el === document.body) return window.innerHeight || document.documentElement.clientHeight;
    return el.offsetHeight;
}
function getDocSize() {
    var width = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
    var height = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
    return {
        width: width,
        height: height
    };
}
function getClientSize() {
    var width = document.documentElement.clientWidth;
    var height = window.innerHeight || document.documentElement.clientHeight;
    return {
        width: width,
        height: height
    };
}
function getScroll() {
    return {
        scrollLeft: Math.max(document.documentElement.scrollLeft, document.body.scrollLeft),
        scrollTop: Math.max(document.documentElement.scrollTop, document.body.scrollTop)
    };
}
function getOffset(node) {
    var box = node.getBoundingClientRect();
    var docElem = document.documentElement; // < ie8 不支持 win.pageXOffset, 则使用 docElem.scrollLeft
    return {
        left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
        top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kDErY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _rcDialog = require("rc-dialog");
var _rcDialogDefault = parcelHelpers.interopDefault(_rcDialog);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _addEventListener = require("rc-util/es/Dom/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _warning = require("rc-util/es/warning");
var _useFrameSetState = require("./hooks/useFrameSetState");
var _useFrameSetStateDefault = parcelHelpers.interopDefault(_useFrameSetState);
var _getFixScaleEleTransPosition = require("./getFixScaleEleTransPosition");
var _getFixScaleEleTransPositionDefault = parcelHelpers.interopDefault(_getFixScaleEleTransPosition);
var _previewGroup = require("./PreviewGroup");
var _excluded = [
    "prefixCls",
    "src",
    "alt",
    "onClose",
    "afterClose",
    "visible",
    "icons"
];
var useState = _react.useState, useEffect = _react.useEffect;
var initialPosition = {
    x: 0,
    y: 0
};
var Preview = function Preview(props) {
    var prefixCls = props.prefixCls, src = props.src, alt = props.alt, onClose = props.onClose, afterClose = props.afterClose, visible = props.visible, _props$icons = props.icons, icons = _props$icons === void 0 ? {} : _props$icons, restProps = _objectWithoutPropertiesDefault.default(props, _excluded);
    var rotateLeft = icons.rotateLeft, rotateRight = icons.rotateRight, zoomIn = icons.zoomIn, zoomOut = icons.zoomOut, close = icons.close, left = icons.left, right = icons.right;
    var _useState = useState(1), _useState2 = _slicedToArrayDefault.default(_useState, 2), scale = _useState2[0], setScale = _useState2[1];
    var _useState3 = useState(0), _useState4 = _slicedToArrayDefault.default(_useState3, 2), rotate = _useState4[0], setRotate = _useState4[1];
    var _useFrameSetState1 = _useFrameSetStateDefault.default(initialPosition), _useFrameSetState2 = _slicedToArrayDefault.default(_useFrameSetState1, 2), position = _useFrameSetState2[0], setPosition = _useFrameSetState2[1];
    var imgRef = _react.useRef();
    var originPositionRef = _react.useRef({
        originX: 0,
        originY: 0,
        deltaX: 0,
        deltaY: 0
    });
    var _React$useState = _react.useState(false), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), isMoving = _React$useState2[0], setMoving = _React$useState2[1];
    var _React$useContext = _react.useContext(_previewGroup.context), previewUrls = _React$useContext.previewUrls, current = _React$useContext.current, isPreviewGroup = _React$useContext.isPreviewGroup, setCurrent = _React$useContext.setCurrent;
    var previewGroupCount = previewUrls.size;
    var previewUrlsKeys = Array.from(previewUrls.keys());
    var currentPreviewIndex = previewUrlsKeys.indexOf(current);
    var combinationSrc = isPreviewGroup ? previewUrls.get(current) : src;
    var showLeftOrRightSwitches = isPreviewGroup && previewGroupCount > 1;
    var _React$useState3 = _react.useState({
        wheelDirection: 0
    }), _React$useState4 = _slicedToArrayDefault.default(_React$useState3, 2), lastWheelZoomDirection = _React$useState4[0], setLastWheelZoomDirection = _React$useState4[1];
    var onAfterClose = function onAfterClose() {
        setScale(1);
        setRotate(0);
        setPosition(initialPosition);
    };
    var onZoomIn = function onZoomIn() {
        setScale(function(value) {
            return value + 1;
        });
        setPosition(initialPosition);
    };
    var onZoomOut = function onZoomOut() {
        if (scale > 1) setScale(function(value) {
            return value - 1;
        });
        setPosition(initialPosition);
    };
    var onRotateRight = function onRotateRight() {
        setRotate(function(value) {
            return value + 90;
        });
    };
    var onRotateLeft = function onRotateLeft() {
        setRotate(function(value) {
            return value - 90;
        });
    };
    var onSwitchLeft = function onSwitchLeft(event) {
        event.preventDefault(); // Without this mask close will abnormal
        event.stopPropagation();
        if (currentPreviewIndex > 0) setCurrent(previewUrlsKeys[currentPreviewIndex - 1]);
    };
    var onSwitchRight = function onSwitchRight(event) {
        event.preventDefault(); // Without this mask close will abnormal
        event.stopPropagation();
        if (currentPreviewIndex < previewGroupCount - 1) setCurrent(previewUrlsKeys[currentPreviewIndex + 1]);
    };
    var wrapClassName = _classnamesDefault.default(_definePropertyDefault.default({}, "".concat(prefixCls, "-moving"), isMoving));
    var toolClassName = "".concat(prefixCls, "-operations-operation");
    var iconClassName = "".concat(prefixCls, "-operations-icon");
    var tools = [
        {
            icon: close,
            onClick: onClose,
            type: 'close'
        },
        {
            icon: zoomIn,
            onClick: onZoomIn,
            type: 'zoomIn'
        },
        {
            icon: zoomOut,
            onClick: onZoomOut,
            type: 'zoomOut',
            disabled: scale === 1
        },
        {
            icon: rotateRight,
            onClick: onRotateRight,
            type: 'rotateRight'
        },
        {
            icon: rotateLeft,
            onClick: onRotateLeft,
            type: 'rotateLeft'
        }
    ];
    var onMouseUp = function onMouseUp() {
        if (visible && isMoving) {
            var width = imgRef.current.offsetWidth * scale;
            var height = imgRef.current.offsetHeight * scale; // eslint-disable-next-line @typescript-eslint/no-shadow
            var _imgRef$current$getBo = imgRef.current.getBoundingClientRect(), _left = _imgRef$current$getBo.left, top = _imgRef$current$getBo.top;
            var isRotate = rotate % 180 !== 0;
            setMoving(false);
            var fixState = _getFixScaleEleTransPositionDefault.default(isRotate ? height : width, isRotate ? width : height, _left, top);
            if (fixState) setPosition(_objectSpread2Default.default({}, fixState));
        }
    };
    var onMouseDown = function onMouseDown(event) {
        // Only allow main button
        if (event.button !== 0) return;
        event.preventDefault(); // Without this mask close will abnormal
        event.stopPropagation();
        originPositionRef.current.deltaX = event.pageX - position.x;
        originPositionRef.current.deltaY = event.pageY - position.y;
        originPositionRef.current.originX = position.x;
        originPositionRef.current.originY = position.y;
        setMoving(true);
    };
    var onMouseMove = function onMouseMove(event) {
        if (visible && isMoving) setPosition({
            x: event.pageX - originPositionRef.current.deltaX,
            y: event.pageY - originPositionRef.current.deltaY
        });
    };
    var onWheelMove = function onWheelMove(event) {
        if (!visible) return;
        event.preventDefault();
        var wheelDirection = event.deltaY;
        setLastWheelZoomDirection({
            wheelDirection: wheelDirection
        });
    };
    useEffect(function() {
        var wheelDirection = lastWheelZoomDirection.wheelDirection;
        if (wheelDirection > 0) onZoomOut();
        else if (wheelDirection < 0) onZoomIn();
    }, [
        lastWheelZoomDirection
    ]);
    useEffect(function() {
        var onTopMouseUpListener;
        var onTopMouseMoveListener;
        var onMouseUpListener = _addEventListenerDefault.default(window, 'mouseup', onMouseUp, false);
        var onMouseMoveListener = _addEventListenerDefault.default(window, 'mousemove', onMouseMove, false);
        var onScrollWheelListener = _addEventListenerDefault.default(window, 'wheel', onWheelMove, {
            passive: false
        });
        try {
            // Resolve if in iframe lost event
            /* istanbul ignore next */ if (window.top !== window.self) {
                onTopMouseUpListener = _addEventListenerDefault.default(window.top, 'mouseup', onMouseUp, false);
                onTopMouseMoveListener = _addEventListenerDefault.default(window.top, 'mousemove', onMouseMove, false);
            }
        } catch (error) {
            /* istanbul ignore next */ _warning.warning(false, "[rc-image] ".concat(error));
        }
        return function() {
            onMouseUpListener.remove();
            onMouseMoveListener.remove();
            onScrollWheelListener.remove();
            /* istanbul ignore next */ if (onTopMouseUpListener) onTopMouseUpListener.remove();
            /* istanbul ignore next */ if (onTopMouseMoveListener) onTopMouseMoveListener.remove();
        };
    }, [
        visible,
        isMoving
    ]);
    return /*#__PURE__*/ _react.createElement(_rcDialogDefault.default, _extendsDefault.default({
        transitionName: "zoom",
        maskTransitionName: "fade",
        closable: false,
        keyboard: true,
        prefixCls: prefixCls,
        onClose: onClose,
        afterClose: onAfterClose,
        visible: visible,
        wrapClassName: wrapClassName
    }, restProps), /*#__PURE__*/ _react.createElement("ul", {
        className: "".concat(prefixCls, "-operations")
    }, tools.map(function(_ref) {
        var icon = _ref.icon, onClick = _ref.onClick, type = _ref.type, disabled = _ref.disabled;
        return /*#__PURE__*/ _react.createElement("li", {
            className: _classnamesDefault.default(toolClassName, _definePropertyDefault.default({}, "".concat(prefixCls, "-operations-operation-disabled"), !!disabled)),
            onClick: onClick,
            key: type
        }, /*#__PURE__*/ _react.isValidElement(icon) ? /*#__PURE__*/ _react.cloneElement(icon, {
            className: iconClassName
        }) : icon);
    })), /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-img-wrapper"),
        style: {
            transform: "translate3d(".concat(position.x, "px, ").concat(position.y, "px, 0)")
        }
    }, /*#__PURE__*/ _react.createElement("img", {
        onMouseDown: onMouseDown,
        ref: imgRef,
        className: "".concat(prefixCls, "-img"),
        src: combinationSrc,
        alt: alt,
        style: {
            transform: "scale3d(".concat(scale, ", ").concat(scale, ", 1) rotate(").concat(rotate, "deg)")
        }
    })), showLeftOrRightSwitches && /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-switch-left"), _definePropertyDefault.default({}, "".concat(prefixCls, "-switch-left-disabled"), currentPreviewIndex === 0)),
        onClick: onSwitchLeft
    }, left), showLeftOrRightSwitches && /*#__PURE__*/ _react.createElement("div", {
        className: _classnamesDefault.default("".concat(prefixCls, "-switch-right"), _definePropertyDefault.default({}, "".concat(prefixCls, "-switch-right-disabled"), currentPreviewIndex === previewGroupCount - 1)),
        onClick: onSwitchRight
    }, right));
};
exports.default = Preview;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","rc-dialog":"6qjf5","classnames":"dFgpN","rc-util/es/Dom/addEventListener":"751ZW","rc-util/es/warning":"bfz97","./hooks/useFrameSetState":"5M9Mc","./getFixScaleEleTransPosition":"bWbY8","./PreviewGroup":"f4Fnn","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6qjf5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dialogWrap = require("./DialogWrap");
var _dialogWrapDefault = parcelHelpers.interopDefault(_dialogWrap);
exports.default = _dialogWrapDefault.default;

},{"./DialogWrap":"hu93x","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"hu93x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _portalWrapper = require("rc-util/es/PortalWrapper");
var _portalWrapperDefault = parcelHelpers.interopDefault(_portalWrapper);
var _dialog = require("./Dialog"); // fix issue #10656
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
/*
 * getContainer remarks
 * Custom container should not be return, because in the Portal component, it will remove the
 * return container element here, if the custom container is the only child of it's component,
 * like issue #10656, It will has a conflict with removeChild method in react-dom.
 * So here should add a child (div element) to custom container.
 * */ var DialogWrap = function DialogWrap(props) {
    var visible = props.visible, getContainer = props.getContainer, forceRender = props.forceRender, _props$destroyOnClose = props.destroyOnClose, destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose, _afterClose = props.afterClose;
    var _React$useState = _react.useState(visible), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    _react.useEffect(function() {
        if (visible) setAnimatedVisible(true);
    }, [
        visible
    ]); // 渲染在当前 dom 里；
    if (getContainer === false) return /*#__PURE__*/ _react.createElement(_dialogDefault.default, _extendsDefault.default({}, props, {
        getOpenCount: function getOpenCount() {
            return 2;
        } // 不对 body 做任何操作。。
    }));
     // Destroy on close will remove wrapped div
    if (!forceRender && destroyOnClose && !animatedVisible) return null;
    return /*#__PURE__*/ _react.createElement(_portalWrapperDefault.default, {
        visible: visible,
        forceRender: forceRender,
        getContainer: getContainer
    }, function(childProps) {
        return /*#__PURE__*/ _react.createElement(_dialogDefault.default, _extendsDefault.default({}, props, {
            destroyOnClose: destroyOnClose,
            afterClose: function afterClose() {
                _afterClose === null || _afterClose === void 0 || _afterClose();
                setAnimatedVisible(false);
            }
        }, childProps));
    });
};
DialogWrap.displayName = 'Dialog';
exports.default = DialogWrap;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/PortalWrapper":"evQVk","./Dialog":"b4JH4","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"evQVk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @private Test usage only */ parcelHelpers.export(exports, "getOpenCount", ()=>getOpenCount
) // https://github.com/ant-design/ant-design/issues/19340
;
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
/* eslint-disable no-underscore-dangle,react/require-default-props */ var _react = require("react");
var _raf = require("./raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
var _portal = require("./Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _canUseDom = require("./Dom/canUseDom");
var _canUseDomDefault = parcelHelpers.interopDefault(_canUseDom);
var _switchScrollingEffect = require("./switchScrollingEffect");
var _switchScrollingEffectDefault = parcelHelpers.interopDefault(_switchScrollingEffect);
var _setStyle = require("./setStyle");
var _setStyleDefault = parcelHelpers.interopDefault(_setStyle);
var _scrollLocker = require("./Dom/scrollLocker");
var _scrollLockerDefault = parcelHelpers.interopDefault(_scrollLocker);
var openCount = 0;
var supportDom = _canUseDomDefault.default();
function getOpenCount() {
    return 0;
}
// https://github.com/ant-design/ant-design/issues/19332
var cacheOverflow = {};
var getParent = function getParent(getContainer) {
    if (!supportDom) return null;
    if (getContainer) {
        if (typeof getContainer === 'string') return document.querySelectorAll(getContainer)[0];
        if (typeof getContainer === 'function') return getContainer();
        if (_typeofDefault.default(getContainer) === 'object' && getContainer instanceof window.HTMLElement) return getContainer;
    }
    return document.body;
};
var PortalWrapper = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(PortalWrapper1, _React$Component);
    var _super = _createSuperDefault.default(PortalWrapper1);
    function PortalWrapper1(props) {
        var _this;
        _classCallCheckDefault.default(this, PortalWrapper1);
        _this = _super.call(this, props);
        _this.container = void 0;
        _this.componentRef = /*#__PURE__*/ _react.createRef();
        _this.rafId = void 0;
        _this.scrollLocker = void 0;
        _this.renderComponent = void 0;
        _this.updateScrollLocker = function(prevProps) {
            var _ref = prevProps || {}, prevVisible = _ref.visible;
            var _this$props = _this.props, getContainer = _this$props.getContainer, visible = _this$props.visible;
            if (visible && visible !== prevVisible && supportDom && getParent(getContainer) !== _this.scrollLocker.getContainer()) _this.scrollLocker.reLock({
                container: getParent(getContainer)
            });
        };
        _this.updateOpenCount = function(prevProps) {
            var _ref2 = prevProps || {}, prevVisible = _ref2.visible, prevGetContainer = _ref2.getContainer;
            var _this$props2 = _this.props, visible = _this$props2.visible, getContainer = _this$props2.getContainer; // Update count
            if (visible !== prevVisible && supportDom && getParent(getContainer) === document.body) {
                if (visible && !prevVisible) openCount += 1;
                else if (prevProps) openCount -= 1;
            } // Clean up container if needed
            var getContainerIsFunc = typeof getContainer === 'function' && typeof prevGetContainer === 'function';
            if (getContainerIsFunc ? getContainer.toString() !== prevGetContainer.toString() : getContainer !== prevGetContainer) _this.removeCurrentContainer();
        };
        _this.attachToParent = function() {
            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            if (force || _this.container && !_this.container.parentNode) {
                var parent = getParent(_this.props.getContainer);
                if (parent) {
                    parent.appendChild(_this.container);
                    return true;
                }
                return false;
            }
            return true;
        };
        _this.getContainer = function() {
            if (!supportDom) return null;
            if (!_this.container) {
                _this.container = document.createElement('div');
                _this.attachToParent(true);
            }
            _this.setWrapperClassName();
            return _this.container;
        };
        _this.setWrapperClassName = function() {
            var wrapperClassName = _this.props.wrapperClassName;
            if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) _this.container.className = wrapperClassName;
        };
        _this.removeCurrentContainer = function() {
            var _this$container, _this$container$paren;
            // Portal will remove from `parentNode`.
            // Let's handle this again to avoid refactor issue.
            (_this$container = _this.container) === null || _this$container === void 0 || (_this$container$paren = _this$container.parentNode) === null || _this$container$paren === void 0 || _this$container$paren.removeChild(_this.container);
        };
        _this.switchScrollingEffect = function() {
            if (openCount === 1 && !Object.keys(cacheOverflow).length) {
                _switchScrollingEffectDefault.default(); // Must be set after switchScrollingEffect
                cacheOverflow = _setStyleDefault.default({
                    overflow: 'hidden',
                    overflowX: 'hidden',
                    overflowY: 'hidden'
                });
            } else if (!openCount) {
                _setStyleDefault.default(cacheOverflow);
                cacheOverflow = {};
                _switchScrollingEffectDefault.default(true);
            }
        };
        _this.scrollLocker = new _scrollLockerDefault.default({
            container: getParent(props.getContainer)
        });
        return _this;
    }
    _createClassDefault.default(PortalWrapper1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this2 = this;
                this.updateOpenCount();
                if (!this.attachToParent()) this.rafId = _rafDefault.default(function() {
                    _this2.forceUpdate();
                });
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                this.updateOpenCount(prevProps);
                this.updateScrollLocker(prevProps);
                this.setWrapperClassName();
                this.attachToParent();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var _this$props3 = this.props, visible = _this$props3.visible, getContainer = _this$props3.getContainer;
                if (supportDom && getParent(getContainer) === document.body) // 离开时不会 render， 导到离开时数值不变，改用 func 。。
                openCount = visible && openCount ? openCount - 1 : openCount;
                this.removeCurrentContainer();
                _rafDefault.default.cancel(this.rafId);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props4 = this.props, children = _this$props4.children, forceRender = _this$props4.forceRender, visible = _this$props4.visible;
                var portal = null;
                var childProps = {
                    getOpenCount: function getOpenCount() {
                        return openCount;
                    },
                    getContainer: this.getContainer,
                    switchScrollingEffect: this.switchScrollingEffect,
                    scrollLocker: this.scrollLocker
                };
                if (forceRender || visible || this.componentRef.current) portal = /*#__PURE__*/ _react.createElement(_portalDefault.default, {
                    getContainer: this.getContainer,
                    ref: this.componentRef
                }, children(childProps));
                return portal;
            }
        }
    ]);
    return PortalWrapper1;
}(_react.Component);
exports.default = PortalWrapper;

},{"@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","./raf":"h9LA9","./Portal":"ckHxh","./Dom/canUseDom":"bCk8j","./switchScrollingEffect":"o3OKL","./setStyle":"ZpYkQ","./Dom/scrollLocker":"5xI53","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"o3OKL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollBarSize = require("./getScrollBarSize");
var _getScrollBarSizeDefault = parcelHelpers.interopDefault(_getScrollBarSize);
var _setStyle = require("./setStyle");
var _setStyleDefault = parcelHelpers.interopDefault(_setStyle);
function isBodyOverflowing() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
}
var cacheStyle = {};
exports.default = function(close) {
    if (!isBodyOverflowing() && !close) return;
     // https://github.com/ant-design/ant-design/issues/19729
    var scrollingEffectClassName = 'ant-scrolling-effect';
    var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), 'g');
    var bodyClassName = document.body.className;
    if (close) {
        if (!scrollingEffectClassNameReg.test(bodyClassName)) return;
        _setStyleDefault.default(cacheStyle);
        cacheStyle = {};
        document.body.className = bodyClassName.replace(scrollingEffectClassNameReg, '').trim();
        return;
    }
    var scrollBarSize = _getScrollBarSizeDefault.default();
    if (scrollBarSize) {
        cacheStyle = _setStyleDefault.default({
            position: 'relative',
            width: "calc(100% - ".concat(scrollBarSize, "px)")
        });
        if (!scrollingEffectClassNameReg.test(bodyClassName)) {
            var addClassName = "".concat(bodyClassName, " ").concat(scrollingEffectClassName);
            document.body.className = addClassName.trim();
        }
    }
};

},{"./getScrollBarSize":"9wv8Z","./setStyle":"ZpYkQ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9wv8Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTargetScrollBarSize", ()=>getTargetScrollBarSize
);
/* eslint-disable no-param-reassign */ var cached;
function getScrollBarSize(fresh) {
    if (typeof document === 'undefined') return 0;
    if (fresh || cached === undefined) {
        var inner = document.createElement('div');
        inner.style.width = '100%';
        inner.style.height = '200px';
        var outer = document.createElement('div');
        var outerStyle = outer.style;
        outerStyle.position = 'absolute';
        outerStyle.top = '0';
        outerStyle.left = '0';
        outerStyle.pointerEvents = 'none';
        outerStyle.visibility = 'hidden';
        outerStyle.width = '200px';
        outerStyle.height = '150px';
        outerStyle.overflow = 'hidden';
        outer.appendChild(inner);
        document.body.appendChild(outer);
        var widthContained = inner.offsetWidth;
        outer.style.overflow = 'scroll';
        var widthScroll = inner.offsetWidth;
        if (widthContained === widthScroll) widthScroll = outer.clientWidth;
        document.body.removeChild(outer);
        cached = widthContained - widthScroll;
    }
    return cached;
}
exports.default = getScrollBarSize;
function ensureSize(str) {
    var match = str.match(/^(.*)px$/);
    var value = Number(match === null || match === void 0 ? void 0 : match[1]);
    return Number.isNaN(value) ? getScrollBarSize() : value;
}
function getTargetScrollBarSize(target) {
    if (typeof document === 'undefined' || !target || !(target instanceof Element)) return {
        width: 0,
        height: 0
    };
    var _getComputedStyle = getComputedStyle(target, '::-webkit-scrollbar'), width = _getComputedStyle.width, height = _getComputedStyle.height;
    return {
        width: ensureSize(width),
        height: ensureSize(height)
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"ZpYkQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Easy to set element style, return previous style
 * IE browser compatible(IE browser doesn't merge overflow style, need to set it separately)
 * https://github.com/ant-design/ant-design/issues/19393
 *
 */ function setStyle(style) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!style) return {};
    var _options$element = options.element, element = _options$element === void 0 ? document.body : _options$element;
    var oldStyle = {};
    var styleKeys = Object.keys(style); // IE browser compatible
    styleKeys.forEach(function(key) {
        oldStyle[key] = element.style[key];
    });
    styleKeys.forEach(function(key) {
        element.style[key] = style[key];
    });
    return oldStyle;
}
exports.default = setStyle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5xI53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>ScrollLocker
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _getScrollBarSize = require("../getScrollBarSize");
var _getScrollBarSizeDefault = parcelHelpers.interopDefault(_getScrollBarSize);
var _setStyle = require("../setStyle");
var _setStyleDefault = parcelHelpers.interopDefault(_setStyle);
var locks = [];
var scrollingEffectClassName = 'ant-scrolling-effect';
var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), 'g');
var uuid = 0; // https://github.com/ant-design/ant-design/issues/19340
// https://github.com/ant-design/ant-design/issues/19332
var cacheStyle = new Map();
var ScrollLocker = /*#__PURE__*/ _createClassDefault.default(function ScrollLocker1(_options) {
    var _this = this;
    _classCallCheckDefault.default(this, ScrollLocker1);
    this.lockTarget = void 0;
    this.options = void 0;
    this.getContainer = function() {
        var _this$options;
        return (_this$options = _this.options) === null || _this$options === void 0 ? void 0 : _this$options.container;
    };
    this.reLock = function(options) {
        var findLock = locks.find(function(_ref) {
            var target = _ref.target;
            return target === _this.lockTarget;
        });
        if (findLock) _this.unLock();
        _this.options = options;
        if (findLock) {
            findLock.options = options;
            _this.lock();
        }
    };
    this.lock = function() {
        var _this$options3;
        // If lockTarget exist return
        if (locks.some(function(_ref2) {
            var target = _ref2.target;
            return target === _this.lockTarget;
        })) return;
         // If same container effect, return
        if (locks.some(function(_ref3) {
            var _this$options2;
            var options = _ref3.options;
            return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.container);
        })) {
            locks = [].concat(_toConsumableArrayDefault.default(locks), [
                {
                    target: _this.lockTarget,
                    options: _this.options
                }
            ]);
            return;
        }
        var scrollBarSize = 0;
        var container = ((_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.container) || document.body;
        if (container === document.body && window.innerWidth - document.documentElement.clientWidth > 0 || container.scrollHeight > container.clientHeight) scrollBarSize = _getScrollBarSizeDefault.default();
        var containerClassName = container.className;
        if (locks.filter(function(_ref4) {
            var _this$options4;
            var options = _ref4.options;
            return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options4 = _this.options) === null || _this$options4 === void 0 ? void 0 : _this$options4.container);
        }).length === 0) cacheStyle.set(container, _setStyleDefault.default({
            width: scrollBarSize !== 0 ? "calc(100% - ".concat(scrollBarSize, "px)") : undefined,
            overflow: 'hidden',
            overflowX: 'hidden',
            overflowY: 'hidden'
        }, {
            element: container
        }));
         // https://github.com/ant-design/ant-design/issues/19729
        if (!scrollingEffectClassNameReg.test(containerClassName)) {
            var addClassName = "".concat(containerClassName, " ").concat(scrollingEffectClassName);
            container.className = addClassName.trim();
        }
        locks = [].concat(_toConsumableArrayDefault.default(locks), [
            {
                target: _this.lockTarget,
                options: _this.options
            }
        ]);
    };
    this.unLock = function() {
        var _this$options5;
        var findLock = locks.find(function(_ref5) {
            var target = _ref5.target;
            return target === _this.lockTarget;
        });
        locks = locks.filter(function(_ref6) {
            var target = _ref6.target;
            return target !== _this.lockTarget;
        });
        if (!findLock || locks.some(function(_ref7) {
            var _findLock$options;
            var options = _ref7.options;
            return (options === null || options === void 0 ? void 0 : options.container) === ((_findLock$options = findLock.options) === null || _findLock$options === void 0 ? void 0 : _findLock$options.container);
        })) return;
         // Remove Effect
        var container = ((_this$options5 = _this.options) === null || _this$options5 === void 0 ? void 0 : _this$options5.container) || document.body;
        var containerClassName = container.className;
        if (!scrollingEffectClassNameReg.test(containerClassName)) return;
        _setStyleDefault.default(cacheStyle.get(container), {
            element: container
        });
        cacheStyle.delete(container);
        container.className = container.className.replace(scrollingEffectClassNameReg, '').trim();
    };
    // eslint-disable-next-line no-plusplus
    this.lockTarget = uuid++;
    this.options = _options;
});

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","../getScrollBarSize":"9wv8Z","../setStyle":"ZpYkQ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"b4JH4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _keyCode = require("rc-util/es/KeyCode");
var _keyCodeDefault = parcelHelpers.interopDefault(_keyCode);
var _contains = require("rc-util/es/Dom/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _pickAttrs = require("rc-util/es/pickAttrs");
var _pickAttrsDefault = parcelHelpers.interopDefault(_pickAttrs);
var _mask = require("./Mask");
var _maskDefault = parcelHelpers.interopDefault(_mask);
var _util = require("../util");
var _content = require("./Content");
var _contentDefault = parcelHelpers.interopDefault(_content);
function Dialog(props) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-dialog' : _props$prefixCls, zIndex = props.zIndex, _props$visible = props.visible, visible = _props$visible === void 0 ? false : _props$visible, _props$keyboard = props.keyboard, keyboard = _props$keyboard === void 0 ? true : _props$keyboard, _props$focusTriggerAf = props.focusTriggerAfterClose, focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf, scrollLocker = props.scrollLocker, title = props.title, wrapStyle = props.wrapStyle, wrapClassName = props.wrapClassName, wrapProps = props.wrapProps, onClose = props.onClose, afterClose = props.afterClose, transitionName = props.transitionName, animation = props.animation, _props$closable = props.closable, closable = _props$closable === void 0 ? true : _props$closable, _props$mask = props.mask, mask = _props$mask === void 0 ? true : _props$mask, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, maskStyle = props.maskStyle, maskProps = props.maskProps;
    var lastOutSideActiveElementRef = _react.useRef();
    var wrapperRef = _react.useRef();
    var contentRef = _react.useRef();
    var _React$useState = _react.useState(visible), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1]; // ========================== Init ==========================
    var ariaIdRef = _react.useRef();
    if (!ariaIdRef.current) ariaIdRef.current = "rcDialogTitle".concat(_util.getUUID());
     // ========================= Events =========================
    function onDialogVisibleChanged(newVisible) {
        if (newVisible) // Try to focus
        {
            if (!_containsDefault.default(wrapperRef.current, document.activeElement)) {
                var _contentRef$current;
                lastOutSideActiveElementRef.current = document.activeElement;
                (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
            }
        } else {
            // Clean up scroll bar & focus back
            setAnimatedVisible(false);
            if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {
                try {
                    lastOutSideActiveElementRef.current.focus({
                        preventScroll: true
                    });
                } catch (e) {}
                lastOutSideActiveElementRef.current = null;
            } // Trigger afterClose only when change visible from true to false
            if (animatedVisible) afterClose === null || afterClose === void 0 || afterClose();
        }
    }
    function onInternalClose(e) {
        onClose === null || onClose === void 0 || onClose(e);
    } // >>> Content
    var contentClickRef = _react.useRef(false);
    var contentTimeoutRef = _react.useRef(); // We need record content click incase content popup out of dialog
    var onContentMouseDown = function onContentMouseDown() {
        clearTimeout(contentTimeoutRef.current);
        contentClickRef.current = true;
    };
    var onContentMouseUp = function onContentMouseUp() {
        contentTimeoutRef.current = setTimeout(function() {
            contentClickRef.current = false;
        });
    }; // >>> Wrapper
    // Close only when element not on dialog
    var onWrapperClick = null;
    if (maskClosable) onWrapperClick = function onWrapperClick(e) {
        if (contentClickRef.current) contentClickRef.current = false;
        else if (wrapperRef.current === e.target) onInternalClose(e);
    };
    function onWrapperKeyDown(e) {
        if (keyboard && e.keyCode === _keyCodeDefault.default.ESC) {
            e.stopPropagation();
            onInternalClose(e);
            return;
        } // keep focus inside dialog
        if (visible) {
            if (e.keyCode === _keyCodeDefault.default.TAB) contentRef.current.changeActive(!e.shiftKey);
        }
    } // ========================= Effect =========================
    _react.useEffect(function() {
        if (visible) setAnimatedVisible(true);
        return function() {};
    }, [
        visible
    ]); // Remove direct should also check the scroll bar update
    _react.useEffect(function() {
        return function() {
            clearTimeout(contentTimeoutRef.current);
        };
    }, []);
    _react.useEffect(function() {
        if (animatedVisible) {
            scrollLocker === null || scrollLocker === void 0 || scrollLocker.lock();
            return scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock;
        }
        return function() {};
    }, [
        animatedVisible,
        scrollLocker
    ]); // ========================= Render =========================
    return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: "".concat(prefixCls, "-root")
    }, _pickAttrsDefault.default(props, {
        data: true
    })), /*#__PURE__*/ _react.createElement(_maskDefault.default, {
        prefixCls: prefixCls,
        visible: mask && visible,
        motionName: _util.getMotionName(prefixCls, maskTransitionName, maskAnimation),
        style: _objectSpread2Default.default({
            zIndex: zIndex
        }, maskStyle),
        maskProps: maskProps
    }), /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        tabIndex: -1,
        onKeyDown: onWrapperKeyDown,
        className: _classnamesDefault.default("".concat(prefixCls, "-wrap"), wrapClassName),
        ref: wrapperRef,
        onClick: onWrapperClick,
        role: "dialog",
        "aria-labelledby": title ? ariaIdRef.current : null,
        style: _objectSpread2Default.default(_objectSpread2Default.default({
            zIndex: zIndex
        }, wrapStyle), {}, {
            display: !animatedVisible ? 'none' : null
        })
    }, wrapProps), /*#__PURE__*/ _react.createElement(_contentDefault.default, _extendsDefault.default({}, props, {
        onMouseDown: onContentMouseDown,
        onMouseUp: onContentMouseUp,
        ref: contentRef,
        closable: closable,
        ariaId: ariaIdRef.current,
        prefixCls: prefixCls,
        visible: visible,
        onClose: onInternalClose,
        onVisibleChanged: onDialogVisibleChanged,
        motionName: _util.getMotionName(prefixCls, transitionName, animation)
    }))));
}
exports.default = Dialog;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","rc-util/es/KeyCode":"1ukEC","rc-util/es/Dom/contains":"1BmkL","rc-util/es/pickAttrs":"92E8P","./Mask":"e3dbp","../util":"h1iRk","./Content":"9Fr43","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"92E8P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
/* eslint-enable max-len */ var ariaPrefix = 'aria-';
var dataPrefix = 'data-';
function match(key, prefix) {
    return key.indexOf(prefix) === 0;
}
function pickAttrs(props) {
    var ariaOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var mergedConfig;
    if (ariaOnly === false) mergedConfig = {
        aria: true,
        data: true,
        attr: true
    };
    else if (ariaOnly === true) mergedConfig = {
        aria: true
    };
    else mergedConfig = _objectSpread2Default.default({}, ariaOnly);
    var attrs = {};
    Object.keys(props).forEach(function(key) {
        if (mergedConfig.aria && (key === 'role' || match(key, ariaPrefix)) || mergedConfig.data && match(key, dataPrefix) || mergedConfig.attr && propList.includes(key)) attrs[key] = props[key];
    });
    return attrs;
}
exports.default = pickAttrs;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"e3dbp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
function Mask(props) {
    var prefixCls = props.prefixCls, style = props.style, visible = props.visible, maskProps = props.maskProps, motionName = props.motionName;
    return /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, {
        key: "mask",
        visible: visible,
        motionName: motionName,
        leavedClassName: "".concat(prefixCls, "-mask-hidden")
    }, function(_ref) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        return /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
            style: _objectSpread2Default.default(_objectSpread2Default.default({}, motionStyle), style),
            className: _classnamesDefault.default("".concat(prefixCls, "-mask"), motionClassName)
        }, maskProps));
    });
}
exports.default = Mask;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","classnames":"dFgpN","rc-motion":"01wSt","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"h1iRk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// =============================== Motion ===============================
parcelHelpers.export(exports, "getMotionName", ()=>getMotionName
) // ================================ UUID ================================
;
parcelHelpers.export(exports, "getUUID", ()=>getUUID
) // =============================== Offset ===============================
;
parcelHelpers.export(exports, "offset", ()=>offset
);
function getMotionName(prefixCls, transitionName, animationName) {
    var motionName = transitionName;
    if (!motionName && animationName) motionName = "".concat(prefixCls, "-").concat(animationName);
    return motionName;
}
var uuid = -1;
function getUUID() {
    uuid += 1;
    return uuid;
}
function getScroll(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');
    if (typeof ret !== 'number') {
        var d = w.document;
        ret = d.documentElement[method];
        if (typeof ret !== 'number') ret = d.body[method];
    }
    return ret;
}
function offset(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
        left: rect.left,
        top: rect.top
    };
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScroll(w);
    pos.top += getScroll(w, true);
    return pos;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9Fr43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcMotion = require("rc-motion");
var _rcMotionDefault = parcelHelpers.interopDefault(_rcMotion);
var _util = require("../../util");
var _memoChildren = require("./MemoChildren");
var _memoChildrenDefault = parcelHelpers.interopDefault(_memoChildren);
var sentinelStyle = {
    width: 0,
    height: 0,
    overflow: 'hidden',
    outline: 'none'
};
var Content = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var closable = props.closable, prefixCls = props.prefixCls, width = props.width, height = props.height, footer = props.footer, title = props.title, closeIcon = props.closeIcon, style = props.style, className = props.className, visible = props.visible, forceRender = props.forceRender, bodyStyle = props.bodyStyle, bodyProps = props.bodyProps, children = props.children, destroyOnClose = props.destroyOnClose, modalRender = props.modalRender, motionName = props.motionName, ariaId = props.ariaId, onClose = props.onClose, onVisibleChanged = props.onVisibleChanged, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, mousePosition = props.mousePosition;
    var sentinelStartRef = _react.useRef();
    var sentinelEndRef = _react.useRef();
    var dialogRef = _react.useRef(); // ============================== Ref ===============================
    _react.useImperativeHandle(ref, function() {
        return {
            focus: function focus() {
                var _sentinelStartRef$cur;
                (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 || _sentinelStartRef$cur.focus();
            },
            changeActive: function changeActive(next) {
                var _document = document, activeElement = _document.activeElement;
                if (next && activeElement === sentinelEndRef.current) sentinelStartRef.current.focus();
                else if (!next && activeElement === sentinelStartRef.current) sentinelEndRef.current.focus();
            }
        };
    }); // ============================= Style ==============================
    var _React$useState = _react.useState(), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), transformOrigin = _React$useState2[0], setTransformOrigin = _React$useState2[1];
    var contentStyle = {};
    if (width !== undefined) contentStyle.width = width;
    if (height !== undefined) contentStyle.height = height;
    if (transformOrigin) contentStyle.transformOrigin = transformOrigin;
    function onPrepare() {
        var elementOffset = _util.offset(dialogRef.current);
        setTransformOrigin(mousePosition ? "".concat(mousePosition.x - elementOffset.left, "px ").concat(mousePosition.y - elementOffset.top, "px") : '');
    } // ============================= Render =============================
    var footerNode;
    if (footer) footerNode = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-footer")
    }, footer);
    var headerNode;
    if (title) headerNode = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-header")
    }, /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        id: ariaId
    }, title));
    var closer;
    if (closable) closer = /*#__PURE__*/ _react.createElement("button", {
        type: "button",
        onClick: onClose,
        "aria-label": "Close",
        className: "".concat(prefixCls, "-close")
    }, closeIcon || /*#__PURE__*/ _react.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
    }));
    var content = /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-content")
    }, closer, headerNode, /*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: "".concat(prefixCls, "-body"),
        style: bodyStyle
    }, bodyProps), children), footerNode);
    return /*#__PURE__*/ _react.createElement(_rcMotionDefault.default, {
        visible: visible,
        onVisibleChanged: onVisibleChanged,
        onAppearPrepare: onPrepare,
        onEnterPrepare: onPrepare,
        forceRender: forceRender,
        motionName: motionName,
        removeOnLeave: destroyOnClose,
        ref: dialogRef
    }, function(_ref, motionRef) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        return /*#__PURE__*/ _react.createElement("div", {
            key: "dialog-element",
            role: "document",
            ref: motionRef,
            style: _objectSpread2Default.default(_objectSpread2Default.default(_objectSpread2Default.default({}, motionStyle), style), contentStyle),
            className: _classnamesDefault.default(prefixCls, className, motionClassName),
            onMouseDown: onMouseDown,
            onMouseUp: onMouseUp
        }, /*#__PURE__*/ _react.createElement("div", {
            tabIndex: 0,
            ref: sentinelStartRef,
            style: sentinelStyle,
            "aria-hidden": "true"
        }), /*#__PURE__*/ _react.createElement(_memoChildrenDefault.default, {
            shouldUpdate: visible || forceRender
        }, modalRender ? modalRender(content) : content), /*#__PURE__*/ _react.createElement("div", {
            tabIndex: 0,
            ref: sentinelEndRef,
            style: sentinelStyle,
            "aria-hidden": "true"
        }));
    });
});
Content.displayName = 'Content';
exports.default = Content;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","rc-motion":"01wSt","../../util":"h1iRk","./MemoChildren":"2jv0X","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2jv0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
exports.default = /*#__PURE__*/ _react.memo(function(_ref) {
    var children = _ref.children;
    return children;
}, function(_, _ref2) {
    var shouldUpdate = _ref2.shouldUpdate;
    return !shouldUpdate;
});

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5M9Mc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _raf = require("rc-util/es/raf");
var _rafDefault = parcelHelpers.interopDefault(_raf);
function useFrameSetState(initial) {
    var frame = _react.useRef(null);
    var _React$useState = _react.useState(initial), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), state = _React$useState2[0], setState = _React$useState2[1];
    var queue = _react.useRef([]);
    var setFrameState = function setFrameState(newState) {
        if (frame.current === null) {
            queue.current = [];
            frame.current = _rafDefault.default(function() {
                setState(function(preState) {
                    var memoState = preState;
                    queue.current.forEach(function(queueState) {
                        memoState = _objectSpread2Default.default(_objectSpread2Default.default({}, memoState), queueState);
                    });
                    frame.current = null;
                    return memoState;
                });
            });
        }
        queue.current.push(newState);
    };
    _react.useEffect(function() {
        return function() {
            return frame.current && _rafDefault.default.cancel(frame.current);
        };
    }, []);
    return [
        state,
        setFrameState
    ];
}
exports.default = useFrameSetState;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","rc-util/es/raf":"h9LA9","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bWbY8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _css = require("rc-util/es/Dom/css");
function fixPoint(key, start, width, clientWidth) {
    var startAddWidth = start + width;
    var offsetStart = (width - clientWidth) / 2;
    if (width > clientWidth) {
        if (start > 0) return _definePropertyDefault.default({}, key, offsetStart);
        if (start < 0 && startAddWidth < clientWidth) return _definePropertyDefault.default({}, key, -offsetStart);
    } else if (start < 0 || startAddWidth > clientWidth) return _definePropertyDefault.default({}, key, start < 0 ? offsetStart : -offsetStart);
    return {};
}
function getFixScaleEleTransPosition(width, height, left, top) {
    var _getClientSize = _css.getClientSize(), clientWidth = _getClientSize.width, clientHeight = _getClientSize.height;
    var fixPos = null;
    if (width <= clientWidth && height <= clientHeight) fixPos = {
        x: 0,
        y: 0
    };
    else if (width > clientWidth || height > clientHeight) fixPos = _objectSpread2Default.default(_objectSpread2Default.default({}, fixPoint('x', left, width, clientWidth)), fixPoint('y', top, height, clientHeight));
    return fixPos;
}
exports.default = getFixScaleEleTransPosition;

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/defineProperty":"dIbZx","rc-util/es/Dom/css":"cxI2O","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"f4Fnn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "context", ()=>context
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _preview = require("./Preview");
var _previewDefault = parcelHelpers.interopDefault(_preview);
var _excluded = [
    "visible",
    "onVisibleChange",
    "getContainer",
    "current"
];
var context = /*#__PURE__*/ _react.createContext({
    previewUrls: new Map(),
    setPreviewUrls: function setPreviewUrls() {
        return null;
    },
    current: null,
    setCurrent: function setCurrent() {
        return null;
    },
    setShowPreview: function setShowPreview() {
        return null;
    },
    setMousePosition: function setMousePosition() {
        return null;
    },
    registerImage: function registerImage() {
        return function() {
            return null;
        };
    }
});
var Provider = context.Provider;
var Group = function Group(_ref) {
    var _ref$previewPrefixCls = _ref.previewPrefixCls, previewPrefixCls = _ref$previewPrefixCls === void 0 ? 'rc-image-preview' : _ref$previewPrefixCls, children = _ref.children, _ref$icons = _ref.icons, icons = _ref$icons === void 0 ? {} : _ref$icons, preview = _ref.preview;
    var _ref2 = _typeofDefault.default(preview) === 'object' ? preview : {}, _ref2$visible = _ref2.visible, previewVisible = _ref2$visible === void 0 ? undefined : _ref2$visible, _ref2$onVisibleChange = _ref2.onVisibleChange, onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? undefined : _ref2$onVisibleChange, _ref2$getContainer = _ref2.getContainer, getContainer = _ref2$getContainer === void 0 ? undefined : _ref2$getContainer, _ref2$current = _ref2.current, currentIndex = _ref2$current === void 0 ? 0 : _ref2$current, dialogProps = _objectWithoutPropertiesDefault.default(_ref2, _excluded);
    var _useState = _react.useState(new Map()), _useState2 = _slicedToArrayDefault.default(_useState, 2), previewUrls = _useState2[0], setPreviewUrls = _useState2[1];
    var _useState3 = _react.useState(), _useState4 = _slicedToArrayDefault.default(_useState3, 2), current = _useState4[0], setCurrent = _useState4[1];
    var _useMergedState1 = _useMergedStateDefault.default(!!previewVisible, {
        value: previewVisible,
        onChange: onPreviewVisibleChange
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), isShowPreview = _useMergedState2[0], setShowPreview = _useMergedState2[1];
    var _useState5 = _react.useState(null), _useState6 = _slicedToArrayDefault.default(_useState5, 2), mousePosition = _useState6[0], setMousePosition = _useState6[1];
    var isControlled = previewVisible !== undefined;
    var previewUrlsKeys = Array.from(previewUrls.keys());
    var currentControlledKey = previewUrlsKeys[currentIndex];
    var canPreviewUrls = new Map(Array.from(previewUrls).filter(function(_ref3) {
        var _ref4 = _slicedToArrayDefault.default(_ref3, 2), canPreview = _ref4[1].canPreview;
        return !!canPreview;
    }).map(function(_ref5) {
        var _ref6 = _slicedToArrayDefault.default(_ref5, 2), id = _ref6[0], url = _ref6[1].url;
        return [
            id,
            url
        ];
    }));
    var registerImage = function registerImage(id, url) {
        var canPreview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var unRegister = function unRegister() {
            setPreviewUrls(function(oldPreviewUrls) {
                var clonePreviewUrls = new Map(oldPreviewUrls);
                var deleteResult = clonePreviewUrls.delete(id);
                return deleteResult ? clonePreviewUrls : oldPreviewUrls;
            });
        };
        setPreviewUrls(function(oldPreviewUrls) {
            return new Map(oldPreviewUrls).set(id, {
                url: url,
                canPreview: canPreview
            });
        });
        return unRegister;
    };
    var onPreviewClose = function onPreviewClose(e) {
        e.stopPropagation();
        setShowPreview(false);
        setMousePosition(null);
    };
    _react.useEffect(function() {
        setCurrent(currentControlledKey);
    }, [
        currentControlledKey
    ]);
    _react.useEffect(function() {
        if (!isShowPreview && isControlled) setCurrent(currentControlledKey);
    }, [
        currentControlledKey,
        isControlled,
        isShowPreview
    ]);
    return /*#__PURE__*/ _react.createElement(Provider, {
        value: {
            isPreviewGroup: true,
            previewUrls: canPreviewUrls,
            setPreviewUrls: setPreviewUrls,
            current: current,
            setCurrent: setCurrent,
            setShowPreview: setShowPreview,
            setMousePosition: setMousePosition,
            registerImage: registerImage
        }
    }, children, /*#__PURE__*/ _react.createElement(_previewDefault.default, _extendsDefault.default({
        "aria-hidden": !isShowPreview,
        visible: isShowPreview,
        prefixCls: previewPrefixCls,
        onClose: onPreviewClose,
        mousePosition: mousePosition,
        src: canPreviewUrls.get(current),
        icons: icons,
        getContainer: getContainer
    }, dialogProps)));
};
exports.default = Group;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","rc-util/es/hooks/useMergedState":"jUfJa","./Preview":"kDErY","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1SByz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _default = require("./default");
var _defaultDefault = parcelHelpers.interopDefault(_default);
exports.default = _defaultDefault.default;

},{"./default":"bQ1He","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gCeZH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "icons", ()=>icons
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _react = require("react");
var _rcImage = require("rc-image");
var _rcImageDefault = parcelHelpers.interopDefault(_rcImage);
var _rotateLeftOutlined = require("@ant-design/icons/es/icons/RotateLeftOutlined");
var _rotateLeftOutlinedDefault = parcelHelpers.interopDefault(_rotateLeftOutlined);
var _rotateRightOutlined = require("@ant-design/icons/es/icons/RotateRightOutlined");
var _rotateRightOutlinedDefault = parcelHelpers.interopDefault(_rotateRightOutlined);
var _zoomInOutlined = require("@ant-design/icons/es/icons/ZoomInOutlined");
var _zoomInOutlinedDefault = parcelHelpers.interopDefault(_zoomInOutlined);
var _zoomOutOutlined = require("@ant-design/icons/es/icons/ZoomOutOutlined");
var _zoomOutOutlinedDefault = parcelHelpers.interopDefault(_zoomOutOutlined);
var _closeOutlined = require("@ant-design/icons/es/icons/CloseOutlined");
var _closeOutlinedDefault = parcelHelpers.interopDefault(_closeOutlined);
var _leftOutlined = require("@ant-design/icons/es/icons/LeftOutlined");
var _leftOutlinedDefault = parcelHelpers.interopDefault(_leftOutlined);
var _rightOutlined = require("@ant-design/icons/es/icons/RightOutlined");
var _rightOutlinedDefault = parcelHelpers.interopDefault(_rightOutlined);
var _configProvider = require("../config-provider");
var _motion = require("../_util/motion");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var icons = {
    rotateLeft: /*#__PURE__*/ _react.createElement(_rotateLeftOutlinedDefault.default, null),
    rotateRight: /*#__PURE__*/ _react.createElement(_rotateRightOutlinedDefault.default, null),
    zoomIn: /*#__PURE__*/ _react.createElement(_zoomInOutlinedDefault.default, null),
    zoomOut: /*#__PURE__*/ _react.createElement(_zoomOutOutlinedDefault.default, null),
    close: /*#__PURE__*/ _react.createElement(_closeOutlinedDefault.default, null),
    left: /*#__PURE__*/ _react.createElement(_leftOutlinedDefault.default, null),
    right: /*#__PURE__*/ _react.createElement(_rightOutlinedDefault.default, null)
};
var InternalPreviewGroup = function InternalPreviewGroup(_a) {
    var customizePrefixCls = _a.previewPrefixCls, preview = _a.preview, props = __rest(_a, [
        "previewPrefixCls",
        "preview"
    ]);
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('image-preview', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var mergedPreview = _react.useMemo(function() {
        if (preview === false) return preview;
        var _preview = _typeofDefault.default(preview) === 'object' ? preview : {};
        return _extendsDefault.default(_extendsDefault.default({}, _preview), {
            transitionName: _motion.getTransitionName(rootPrefixCls, 'zoom', _preview.transitionName),
            maskTransitionName: _motion.getTransitionName(rootPrefixCls, 'fade', _preview.maskTransitionName)
        });
    }, [
        preview
    ]);
    return /*#__PURE__*/ _react.createElement(_rcImageDefault.default.PreviewGroup, _extendsDefault.default({
        preview: mergedPreview,
        previewPrefixCls: prefixCls,
        icons: icons
    }, props));
};
exports.default = InternalPreviewGroup;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","rc-image":"dwY3x","@ant-design/icons/es/icons/RotateLeftOutlined":"65991","@ant-design/icons/es/icons/RotateRightOutlined":"7VkqE","@ant-design/icons/es/icons/ZoomInOutlined":"6lMfw","@ant-design/icons/es/icons/ZoomOutOutlined":"3wWaM","@ant-design/icons/es/icons/CloseOutlined":"9ps37","@ant-design/icons/es/icons/LeftOutlined":"9G5WF","@ant-design/icons/es/icons/RightOutlined":"5Bvwd","../config-provider":"dg9FJ","../_util/motion":"f0OsB","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"65991":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _rotateLeftOutlined = require("@ant-design/icons-svg/es/asn/RotateLeftOutlined");
var _rotateLeftOutlinedDefault = parcelHelpers.interopDefault(_rotateLeftOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var RotateLeftOutlined = function RotateLeftOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _rotateLeftOutlinedDefault.default
    }));
};
RotateLeftOutlined.displayName = 'RotateLeftOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(RotateLeftOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/RotateLeftOutlined":"7DP2k","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7DP2k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var RotateLeftOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "defs",
                "attrs": {},
                "children": [
                    {
                        "tag": "style",
                        "attrs": {}
                    }
                ]
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M672 418H144c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H188V494h440v326z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M819.3 328.5c-78.8-100.7-196-153.6-314.6-154.2l-.2-64c0-6.5-7.6-10.1-12.6-6.1l-128 101c-4 3.1-3.9 9.1 0 12.3L492 318.6c5.1 4 12.7.4 12.6-6.1v-63.9c12.9.1 25.9.9 38.8 2.5 42.1 5.2 82.1 18.2 119 38.7 38.1 21.2 71.2 49.7 98.4 84.3 27.1 34.7 46.7 73.7 58.1 115.8a325.95 325.95 0 016.5 140.9h74.9c14.8-103.6-11.3-213-81-302.3z"
                }
            }
        ]
    },
    "name": "rotate-left",
    "theme": "outlined"
};
exports.default = RotateLeftOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"7VkqE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _rotateRightOutlined = require("@ant-design/icons-svg/es/asn/RotateRightOutlined");
var _rotateRightOutlinedDefault = parcelHelpers.interopDefault(_rotateRightOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var RotateRightOutlined = function RotateRightOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _rotateRightOutlinedDefault.default
    }));
};
RotateRightOutlined.displayName = 'RotateRightOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(RotateRightOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/RotateRightOutlined":"lwFPM","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"lwFPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var RotateRightOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "defs",
                "attrs": {},
                "children": [
                    {
                        "tag": "style",
                        "attrs": {}
                    }
                ]
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M480.5 251.2c13-1.6 25.9-2.4 38.8-2.5v63.9c0 6.5 7.5 10.1 12.6 6.1L660 217.6c4-3.2 4-9.2 0-12.3l-128-101c-5.1-4-12.6-.4-12.6 6.1l-.2 64c-118.6.5-235.8 53.4-314.6 154.2A399.75 399.75 0 00123.5 631h74.9c-.9-5.3-1.7-10.7-2.4-16.1-5.1-42.1-2.1-84.1 8.9-124.8 11.4-42.2 31-81.1 58.1-115.8 27.2-34.7 60.3-63.2 98.4-84.3 37-20.6 76.9-33.6 119.1-38.8z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M880 418H352c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H396V494h440v326z"
                }
            }
        ]
    },
    "name": "rotate-right",
    "theme": "outlined"
};
exports.default = RotateRightOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"6lMfw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _zoomInOutlined = require("@ant-design/icons-svg/es/asn/ZoomInOutlined");
var _zoomInOutlinedDefault = parcelHelpers.interopDefault(_zoomInOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var ZoomInOutlined = function ZoomInOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _zoomInOutlinedDefault.default
    }));
};
ZoomInOutlined.displayName = 'ZoomInOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(ZoomInOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/ZoomInOutlined":"bejFq","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bejFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var ZoomInOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z"
                }
            }
        ]
    },
    "name": "zoom-in",
    "theme": "outlined"
};
exports.default = ZoomInOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"3wWaM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _zoomOutOutlined = require("@ant-design/icons-svg/es/asn/ZoomOutOutlined");
var _zoomOutOutlinedDefault = parcelHelpers.interopDefault(_zoomOutOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var ZoomOutOutlined = function ZoomOutOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _zoomOutOutlinedDefault.default
    }));
};
ZoomOutOutlined.displayName = 'ZoomOutOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(ZoomOutOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/ZoomOutOutlined":"49X8M","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"49X8M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var ZoomOutOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z"
                }
            }
        ]
    },
    "name": "zoom-out",
    "theme": "outlined"
};
exports.default = ZoomOutOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9G5WF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _leftOutlined = require("@ant-design/icons-svg/es/asn/LeftOutlined");
var _leftOutlinedDefault = parcelHelpers.interopDefault(_leftOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var LeftOutlined = function LeftOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _leftOutlinedDefault.default
    }));
};
LeftOutlined.displayName = 'LeftOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(LeftOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/LeftOutlined":"dfC4V","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dfC4V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var LeftOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                }
            }
        ]
    },
    "name": "left",
    "theme": "outlined"
};
exports.default = LeftOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5Bvwd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _rightOutlined = require("@ant-design/icons-svg/es/asn/RightOutlined");
var _rightOutlinedDefault = parcelHelpers.interopDefault(_rightOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var RightOutlined = function RightOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _rightOutlinedDefault.default
    }));
};
RightOutlined.displayName = 'RightOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(RightOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/RightOutlined":"bM8dB","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"bM8dB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var RightOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"
                }
            }
        ]
    },
    "name": "right",
    "theme": "outlined"
};
exports.default = RightOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"f0OsB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTransitionName", ()=>getTransitionName
);
parcelHelpers.export(exports, "getTransitionDirection", ()=>getTransitionDirection
);
var _type = require("./type"); // ================== Collapse Motion ==================
var getCollapsedHeight = function getCollapsedHeight() {
    return {
        height: 0,
        opacity: 0
    };
};
var getRealHeight = function getRealHeight(node) {
    var scrollHeight = node.scrollHeight;
    return {
        height: scrollHeight,
        opacity: 1
    };
};
var getCurrentHeight = function getCurrentHeight(node) {
    return {
        height: node ? node.offsetHeight : 0
    };
};
var skipOpacityTransition = function skipOpacityTransition(_, event) {
    return (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === 'height';
};
var collapseMotion = {
    motionName: 'ant-motion-collapse',
    onAppearStart: getCollapsedHeight,
    onEnterStart: getCollapsedHeight,
    onAppearActive: getRealHeight,
    onEnterActive: getRealHeight,
    onLeaveStart: getCurrentHeight,
    onLeaveActive: getCollapsedHeight,
    onAppearEnd: skipOpacityTransition,
    onEnterEnd: skipOpacityTransition,
    onLeaveEnd: skipOpacityTransition,
    motionDeadline: 500
};
var SelectPlacements = _type.tuple('bottomLeft', 'bottomRight', 'topLeft', 'topRight');
var getTransitionDirection = function getTransitionDirection(placement) {
    if (placement !== undefined && (placement === 'topLeft' || placement === 'topRight')) return "slide-down";
    return "slide-up";
};
var getTransitionName = function getTransitionName(rootPrefixCls, motion, transitionName) {
    if (transitionName !== undefined) return transitionName;
    return "".concat(rootPrefixCls, "-").concat(motion);
};
exports.default = collapseMotion;

},{"./type":"cMtUJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9clLO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _rcMenu = require("rc-menu");
var _rcMenuDefault = parcelHelpers.interopDefault(_rcMenu);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _ellipsisOutlined = require("@ant-design/icons/es/icons/EllipsisOutlined");
var _ellipsisOutlinedDefault = parcelHelpers.interopDefault(_ellipsisOutlined);
var _subMenu = require("./SubMenu");
var _subMenuDefault = parcelHelpers.interopDefault(_subMenu);
var _menuItem = require("./MenuItem");
var _menuItemDefault = parcelHelpers.interopDefault(_menuItem);
var _configProvider = require("../config-provider");
var _devWarning = require("../_util/devWarning");
var _devWarningDefault = parcelHelpers.interopDefault(_devWarning);
var _sider = require("../layout/Sider");
var _motion = require("../_util/motion");
var _motionDefault = parcelHelpers.interopDefault(_motion);
var _reactNode = require("../_util/reactNode");
var _menuContext = require("./MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _menuDivider = require("./MenuDivider");
var _menuDividerDefault = parcelHelpers.interopDefault(_menuDivider);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function InternalMenu(props) {
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, getPopupContainer = _React$useContext.getPopupContainer, direction = _React$useContext.direction;
    var rootPrefixCls = getPrefixCls();
    var customizePrefixCls = props.prefixCls, className = props.className, _props$theme = props.theme, theme = _props$theme === void 0 ? 'light' : _props$theme, expandIcon = props.expandIcon, _internalDisableMenuItemTitleTooltip = props._internalDisableMenuItemTitleTooltip, inlineCollapsed = props.inlineCollapsed, siderCollapsed = props.siderCollapsed, restProps = __rest(props, [
        "prefixCls",
        "className",
        "theme",
        "expandIcon",
        "_internalDisableMenuItemTitleTooltip",
        "inlineCollapsed",
        "siderCollapsed"
    ]);
    var passedProps = _omitDefault.default(restProps, [
        'collapsedWidth'
    ]); // ======================== Warning ==========================
    _devWarningDefault.default(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');
    _devWarningDefault.default(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.'); // ======================== Collapsed ========================
    // Inline Collapsed
    var mergedInlineCollapsed = _react.useMemo(function() {
        if (siderCollapsed !== undefined) return siderCollapsed;
        return inlineCollapsed;
    }, [
        inlineCollapsed,
        siderCollapsed
    ]);
    var defaultMotions = {
        horizontal: {
            motionName: "".concat(rootPrefixCls, "-slide-up")
        },
        inline: _motionDefault.default,
        other: {
            motionName: "".concat(rootPrefixCls, "-zoom-big")
        }
    };
    var prefixCls = getPrefixCls('menu', customizePrefixCls);
    var menuClassName = _classnamesDefault.default("".concat(prefixCls, "-").concat(theme), className); // ======================== Context ==========================
    var contextValue = _react.useMemo(function() {
        return {
            prefixCls: prefixCls,
            inlineCollapsed: mergedInlineCollapsed || false,
            antdMenuTheme: theme,
            direction: direction,
            firstLevel: true,
            disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip
        };
    }, [
        prefixCls,
        mergedInlineCollapsed,
        theme,
        direction,
        _internalDisableMenuItemTitleTooltip
    ]); // ========================= Render ==========================
    return /*#__PURE__*/ _react.createElement(_menuContextDefault.default.Provider, {
        value: contextValue
    }, /*#__PURE__*/ _react.createElement(_rcMenuDefault.default, _extendsDefault.default({
        getPopupContainer: getPopupContainer,
        overflowedIndicator: /*#__PURE__*/ _react.createElement(_ellipsisOutlinedDefault.default, null),
        overflowedIndicatorPopupClassName: "".concat(prefixCls, "-").concat(theme)
    }, passedProps, {
        inlineCollapsed: mergedInlineCollapsed,
        className: menuClassName,
        prefixCls: prefixCls,
        direction: direction,
        defaultMotions: defaultMotions,
        expandIcon: _reactNode.cloneElement(expandIcon, {
            className: "".concat(prefixCls, "-submenu-expand-icon")
        })
    })));
} // We should keep this as ref-able
var Menu = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(Menu1, _React$Component);
    var _super = _createSuperDefault.default(Menu1);
    function Menu1() {
        _classCallCheckDefault.default(this, Menu1);
        return _super.apply(this, arguments);
    }
    _createClassDefault.default(Menu1, [
        {
            key: "render",
            value: function render() {
                var _this = this;
                return /*#__PURE__*/ _react.createElement(_sider.SiderContext.Consumer, null, function(context) {
                    return /*#__PURE__*/ _react.createElement(InternalMenu, _extendsDefault.default({}, _this.props, context));
                });
            }
        }
    ]);
    return Menu1;
}(_react.Component);
Menu.Divider = _menuDividerDefault.default;
Menu.Item = _menuItemDefault.default;
Menu.SubMenu = _subMenuDefault.default;
Menu.ItemGroup = _rcMenu.ItemGroup;
exports.default = Menu;

},{"@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","rc-menu":"iesKx","classnames":"dFgpN","rc-util/es/omit":"9TJfY","@ant-design/icons/es/icons/EllipsisOutlined":"5yqWH","./SubMenu":"iMkA0","./MenuItem":"gInLh","../config-provider":"dg9FJ","../_util/devWarning":"dPrhV","../layout/Sider":"jkdsM","../_util/motion":"f0OsB","../_util/reactNode":"hPDx5","./MenuContext":"4OAWx","./MenuDivider":"8nVMh","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"iMkA0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _rcMenu = require("rc-menu");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _menuContext = require("./MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _reactNode = require("../_util/reactNode");
function SubMenu(props) {
    var _a;
    var popupClassName = props.popupClassName, icon = props.icon, title = props.title, theme = props.theme;
    var context = _react.useContext(_menuContextDefault.default);
    var prefixCls = context.prefixCls, inlineCollapsed = context.inlineCollapsed, antdMenuTheme = context.antdMenuTheme;
    var parentPath = _rcMenu.useFullPath();
    var titleNode;
    if (!icon) titleNode = inlineCollapsed && !parentPath.length && title && typeof title === 'string' ? /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-inline-collapsed-noicon")
    }, title.charAt(0)) : /*#__PURE__*/ _react.createElement("span", {
        className: "".concat(prefixCls, "-title-content")
    }, title);
    else {
        // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span
        // ref: https://github.com/ant-design/ant-design/pull/23456
        var titleIsSpan = _reactNode.isValidElement(title) && title.type === 'span';
        titleNode = /*#__PURE__*/ _react.createElement(_react.Fragment, null, _reactNode.cloneElement(icon, {
            className: _classnamesDefault.default(_reactNode.isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', "".concat(prefixCls, "-item-icon"))
        }), titleIsSpan ? title : /*#__PURE__*/ _react.createElement("span", {
            className: "".concat(prefixCls, "-title-content")
        }, title));
    }
    var contextValue = _react.useMemo(function() {
        return _extendsDefault.default(_extendsDefault.default({}, context), {
            firstLevel: false
        });
    }, [
        context
    ]);
    return /*#__PURE__*/ _react.createElement(_menuContextDefault.default.Provider, {
        value: contextValue
    }, /*#__PURE__*/ _react.createElement(_rcMenu.SubMenu, _extendsDefault.default({}, _omitDefault.default(props, [
        'icon'
    ]), {
        title: titleNode,
        popupClassName: _classnamesDefault.default(prefixCls, "".concat(prefixCls, "-").concat(theme || antdMenuTheme), popupClassName)
    })));
}
exports.default = SubMenu;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","rc-menu":"iesKx","classnames":"dFgpN","rc-util/es/omit":"9TJfY","./MenuContext":"4OAWx","../_util/reactNode":"hPDx5","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"4OAWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var MenuContext = /*#__PURE__*/ _react.createContext({
    prefixCls: '',
    firstLevel: true,
    inlineCollapsed: false
});
exports.default = MenuContext;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"gInLh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>MenuItem
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _createSuper = require("@babel/runtime/helpers/esm/createSuper");
var _createSuperDefault = parcelHelpers.interopDefault(_createSuper);
var _react = require("react");
var _rcMenu = require("rc-menu");
var _toArray = require("rc-util/es/Children/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _menuContext = require("./MenuContext");
var _menuContextDefault = parcelHelpers.interopDefault(_menuContext);
var _tooltip = require("../tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _sider = require("../layout/Sider");
var _reactNode = require("../_util/reactNode");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var MenuItem = /*#__PURE__*/ function(_React$Component) {
    _inheritsDefault.default(MenuItem1, _React$Component);
    var _super = _createSuperDefault.default(MenuItem1);
    function MenuItem1() {
        var _this;
        _classCallCheckDefault.default(this, MenuItem1);
        _this = _super.apply(this, arguments);
        _this.renderItem = function(_ref) {
            var _classNames;
            var siderCollapsed = _ref.siderCollapsed;
            var _a;
            var _this$context = _this.context, prefixCls = _this$context.prefixCls, firstLevel = _this$context.firstLevel, inlineCollapsed = _this$context.inlineCollapsed, direction = _this$context.direction, disableMenuItemTitleTooltip = _this$context.disableMenuItemTitleTooltip;
            var _this$props = _this.props, className = _this$props.className, children = _this$props.children;
            var _b = _this.props, title = _b.title, icon = _b.icon, danger = _b.danger, rest = __rest(_b, [
                "title",
                "icon",
                "danger"
            ]);
            var tooltipTitle = title;
            if (typeof title === 'undefined') tooltipTitle = firstLevel ? children : '';
            else if (title === false) tooltipTitle = '';
            var tooltipProps = {
                title: tooltipTitle
            };
            if (!siderCollapsed && !inlineCollapsed) {
                tooltipProps.title = null; // Reset `visible` to fix control mode tooltip display not correct
                // ref: https://github.com/ant-design/ant-design/issues/16742
                tooltipProps.visible = false;
            }
            var childrenLength = _toArrayDefault.default(children).length;
            var returnNode = /*#__PURE__*/ _react.createElement(_rcMenu.Item, _extendsDefault.default({}, rest, {
                className: _classnamesDefault.default((_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-item-danger"), danger), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),
                title: typeof title === 'string' ? title : undefined
            }), _reactNode.cloneElement(icon, {
                className: _classnamesDefault.default(_reactNode.isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', "".concat(prefixCls, "-item-icon"))
            }), _this.renderItemChildren(inlineCollapsed));
            if (!disableMenuItemTitleTooltip) returnNode = /*#__PURE__*/ _react.createElement(_tooltipDefault.default, _extendsDefault.default({}, tooltipProps, {
                placement: direction === 'rtl' ? 'left' : 'right',
                overlayClassName: "".concat(prefixCls, "-inline-collapsed-tooltip")
            }), returnNode);
            return returnNode;
        };
        return _this;
    }
    _createClassDefault.default(MenuItem1, [
        {
            key: "renderItemChildren",
            value: function renderItemChildren(inlineCollapsed) {
                var _this$context2 = this.context, prefixCls = _this$context2.prefixCls, firstLevel = _this$context2.firstLevel;
                var _this$props2 = this.props, icon = _this$props2.icon, children = _this$props2.children;
                var wrapNode = /*#__PURE__*/ _react.createElement("span", {
                    className: "".concat(prefixCls, "-title-content")
                }, children); // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span
                // ref: https://github.com/ant-design/ant-design/pull/23456
                if (!icon || _reactNode.isValidElement(children) && children.type === 'span') {
                    if (children && inlineCollapsed && firstLevel && typeof children === 'string') return /*#__PURE__*/ _react.createElement("div", {
                        className: "".concat(prefixCls, "-inline-collapsed-noicon")
                    }, children.charAt(0));
                }
                return wrapNode;
            }
        },
        {
            key: "render",
            value: function render() {
                return /*#__PURE__*/ _react.createElement(_sider.SiderContext.Consumer, null, this.renderItem);
            }
        }
    ]);
    return MenuItem1;
}(_react.Component);
MenuItem.contextType = _menuContextDefault.default;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/classCallCheck":"FeO1U","@babel/runtime/helpers/esm/createClass":"214ZK","@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/createSuper":"dE0vQ","react":"b4tPL","rc-menu":"iesKx","rc-util/es/Children/toArray":"ijisy","classnames":"dFgpN","./MenuContext":"4OAWx","../tooltip":"dx81e","../layout/Sider":"jkdsM","../_util/reactNode":"hPDx5","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"dx81e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _rcTooltip = require("rc-tooltip");
var _rcTooltipDefault = parcelHelpers.interopDefault(_rcTooltip);
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _placements = require("../_util/placements");
var _placementsDefault = parcelHelpers.interopDefault(_placements);
var _reactNode = require("../_util/reactNode");
var _configProvider = require("../config-provider");
var _colors = require("../_util/colors");
var _motion = require("../_util/motion");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var splitObject = function splitObject(obj, keys) {
    var picked = {};
    var omitted = _extendsDefault.default({}, obj);
    keys.forEach(function(key) {
        if (obj && key in obj) {
            picked[key] = obj[key];
            delete omitted[key];
        }
    });
    return {
        picked: picked,
        omitted: omitted
    };
};
var PresetColorRegex = new RegExp("^(".concat(_colors.PresetColorTypes.join('|'), ")(-inverse)?$")); // Fix Tooltip won't hide at disabled button
// mouse events don't trigger at disabled button in Chrome
// https://github.com/react-component/tooltip/issues/18
function getDisabledCompatibleChildren(element, prefixCls) {
    var elementType = element.type;
    if ((elementType.__ANT_BUTTON === true || element.type === 'button') && element.props.disabled || elementType.__ANT_SWITCH === true && (element.props.disabled || element.props.loading)) {
        // Pick some layout related style properties up to span
        // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254
        var _splitObject = splitObject(element.props.style, [
            'position',
            'left',
            'right',
            'top',
            'bottom',
            'float',
            'display',
            'zIndex'
        ]), picked = _splitObject.picked, omitted = _splitObject.omitted;
        var spanStyle = _extendsDefault.default(_extendsDefault.default({
            display: 'inline-block'
        }, picked), {
            cursor: 'not-allowed',
            width: element.props.block ? '100%' : null
        });
        var buttonStyle = _extendsDefault.default(_extendsDefault.default({}, omitted), {
            pointerEvents: 'none'
        });
        var child = _reactNode.cloneElement(element, {
            style: buttonStyle,
            className: null
        });
        return /*#__PURE__*/ _react.createElement("span", {
            style: spanStyle,
            className: _classnamesDefault.default(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
        }, child);
    }
    return element;
}
var Tooltip = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _classNames2;
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var _useMergedState1 = _useMergedStateDefault.default(false, {
        value: props.visible,
        defaultValue: props.defaultVisible
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), visible = _useMergedState2[0], setVisible = _useMergedState2[1];
    var isNoTitle = function isNoTitle() {
        var title = props.title, overlay = props.overlay;
        return !title && !overlay && title !== 0; // overlay for old version compatibility
    };
    var onVisibleChange = function onVisibleChange(vis) {
        var _a;
        setVisible(isNoTitle() ? false : vis);
        if (!isNoTitle()) (_a = props.onVisibleChange) === null || _a === void 0 || _a.call(props, vis);
    };
    var getTooltipPlacements = function getTooltipPlacements() {
        var builtinPlacements = props.builtinPlacements, arrowPointAtCenter = props.arrowPointAtCenter, autoAdjustOverflow = props.autoAdjustOverflow;
        return builtinPlacements || _placementsDefault.default({
            arrowPointAtCenter: arrowPointAtCenter,
            autoAdjustOverflow: autoAdjustOverflow
        });
    }; // 动态设置动画点
    var onPopupAlign = function onPopupAlign(domNode, align) {
        var placements = getTooltipPlacements(); // 当前返回的位置
        var placement = Object.keys(placements).find(function(key) {
            return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
        });
        if (!placement) return;
         // 根据当前坐标设置动画点
        var rect = domNode.getBoundingClientRect();
        var transformOrigin = {
            top: '50%',
            left: '50%'
        };
        if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
        else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) transformOrigin.top = "".concat(-align.offset[1], "px");
        if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
        else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) transformOrigin.left = "".concat(-align.offset[0], "px");
        domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    };
    var getOverlay = function getOverlay() {
        var title = props.title, overlay = props.overlay;
        if (title === 0) return title;
        return overlay || title || '';
    };
    var getPopupContainer = props.getPopupContainer, otherProps = __rest(props, [
        "getPopupContainer"
    ]);
    var customizePrefixCls = props.prefixCls, openClassName = props.openClassName, getTooltipContainer = props.getTooltipContainer, overlayClassName = props.overlayClassName, color = props.color, overlayInnerStyle = props.overlayInnerStyle, children = props.children;
    var prefixCls = getPrefixCls('tooltip', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var tempVisible = visible; // Hide tooltip when there is no title
    if (!('visible' in props) && isNoTitle()) tempVisible = false;
    var child = getDisabledCompatibleChildren(_reactNode.isValidElement(children) ? children : /*#__PURE__*/ _react.createElement("span", null, children), prefixCls);
    var childProps = child.props;
    var childCls = _classnamesDefault.default(childProps.className, _definePropertyDefault.default({}, openClassName || "".concat(prefixCls, "-open"), true));
    var customOverlayClassName = _classnamesDefault.default(overlayClassName, (_classNames2 = {}, _definePropertyDefault.default(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _definePropertyDefault.default(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
    var formattedOverlayInnerStyle = overlayInnerStyle;
    var arrowContentStyle;
    if (color && !PresetColorRegex.test(color)) {
        formattedOverlayInnerStyle = _extendsDefault.default(_extendsDefault.default({}, overlayInnerStyle), {
            background: color
        }); // @ts-ignore
        arrowContentStyle = {
            '--antd-arrow-background-color': color
        };
    }
    return /*#__PURE__*/ _react.createElement(_rcTooltipDefault.default, _extendsDefault.default({}, otherProps, {
        prefixCls: prefixCls,
        overlayClassName: customOverlayClassName,
        getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
        ref: ref,
        builtinPlacements: getTooltipPlacements(),
        overlay: getOverlay(),
        visible: tempVisible,
        onVisibleChange: onVisibleChange,
        onPopupAlign: onPopupAlign,
        overlayInnerStyle: formattedOverlayInnerStyle,
        arrowContent: /*#__PURE__*/ _react.createElement("span", {
            className: "".concat(prefixCls, "-arrow-content"),
            style: arrowContentStyle
        }),
        motion: {
            motionName: _motion.getTransitionName(rootPrefixCls, 'zoom-big-fast', props.transitionName),
            motionDeadline: 1000
        }
    }), tempVisible ? _reactNode.cloneElement(child, {
        className: childCls
    }) : child);
});
Tooltip.displayName = 'Tooltip';
Tooltip.defaultProps = {
    placement: 'top',
    mouseEnterDelay: 0.1,
    mouseLeaveDelay: 0.1,
    arrowPointAtCenter: false,
    autoAdjustOverflow: true
};
exports.default = Tooltip;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","rc-tooltip":"d7QkD","rc-util/es/hooks/useMergedState":"jUfJa","classnames":"dFgpN","../_util/placements":"eDPDz","../_util/reactNode":"hPDx5","../config-provider":"dg9FJ","../_util/colors":"5mRfd","../_util/motion":"f0OsB","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"d7QkD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tooltip = require("./Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
exports.default = _tooltipDefault.default;

},{"./Tooltip":"cp8GR","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"cp8GR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _rcTrigger = require("rc-trigger");
var _rcTriggerDefault = parcelHelpers.interopDefault(_rcTrigger);
var _placements = require("./placements");
var _content = require("./Content");
var _contentDefault = parcelHelpers.interopDefault(_content);
var Tooltip = function Tooltip(props, ref) {
    var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? [
        'hover'
    ] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-tooltip' : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName = props.transitionName, animation = props.animation, motion = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? 'right' : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle, restProps = _objectWithoutPropertiesDefault.default(props, [
        "overlayClassName",
        "trigger",
        "mouseEnterDelay",
        "mouseLeaveDelay",
        "overlayStyle",
        "prefixCls",
        "children",
        "onVisibleChange",
        "afterVisibleChange",
        "transitionName",
        "animation",
        "motion",
        "placement",
        "align",
        "destroyTooltipOnHide",
        "defaultVisible",
        "getTooltipContainer",
        "overlayInnerStyle"
    ]);
    var domRef = _react.useRef(null);
    _react.useImperativeHandle(ref, function() {
        return domRef.current;
    });
    var extraProps = _objectSpread2Default.default({}, restProps);
    if ('visible' in props) extraProps.popupVisible = props.visible;
    var getPopupElement = function getPopupElement() {
        var _props$arrowContent = props.arrowContent, arrowContent = _props$arrowContent === void 0 ? null : _props$arrowContent, overlay = props.overlay, id = props.id;
        return [
            /*#__PURE__*/ _react.createElement("div", {
                className: "".concat(prefixCls, "-arrow"),
                key: "arrow"
            }, arrowContent),
            /*#__PURE__*/ _react.createElement(_contentDefault.default, {
                key: "content",
                prefixCls: prefixCls,
                id: id,
                overlay: overlay,
                overlayInnerStyle: overlayInnerStyle
            })
        ];
    };
    var destroyTooltip = false;
    var autoDestroy = false;
    if (typeof destroyTooltipOnHide === 'boolean') destroyTooltip = destroyTooltipOnHide;
    else if (destroyTooltipOnHide && _typeofDefault.default(destroyTooltipOnHide) === 'object') {
        var keepParent = destroyTooltipOnHide.keepParent;
        destroyTooltip = keepParent === true;
        autoDestroy = keepParent === false;
    }
    return /*#__PURE__*/ _react.createElement(_rcTriggerDefault.default, _extendsDefault.default({
        popupClassName: overlayClassName,
        prefixCls: prefixCls,
        popup: getPopupElement,
        action: trigger,
        builtinPlacements: _placements.placements,
        popupPlacement: placement,
        ref: domRef,
        popupAlign: align,
        getPopupContainer: getTooltipContainer,
        onPopupVisibleChange: onVisibleChange,
        afterPopupVisibleChange: afterVisibleChange,
        popupTransitionName: transitionName,
        popupAnimation: animation,
        popupMotion: motion,
        defaultPopupVisible: defaultVisible,
        destroyPopupOnHide: destroyTooltip,
        autoDestroy: autoDestroy,
        mouseLeaveDelay: mouseLeaveDelay,
        popupStyle: overlayStyle,
        mouseEnterDelay: mouseEnterDelay
    }, extraProps), children);
};
exports.default = /*#__PURE__*/ _react.forwardRef(Tooltip);

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","rc-trigger":"7w4OL","./placements":"2cav6","./Content":"9dzNc","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2cav6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "placements", ()=>placements
);
var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
};
var targetOffset = [
    0,
    0
];
var placements = {
    left: {
        points: [
            'cr',
            'cl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            -4,
            0
        ],
        targetOffset: targetOffset
    },
    right: {
        points: [
            'cl',
            'cr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            4,
            0
        ],
        targetOffset: targetOffset
    },
    top: {
        points: [
            'bc',
            'tc'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    bottom: {
        points: [
            'tc',
            'bc'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    },
    topLeft: {
        points: [
            'bl',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    leftTop: {
        points: [
            'tr',
            'tl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            -4,
            0
        ],
        targetOffset: targetOffset
    },
    topRight: {
        points: [
            'br',
            'tr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            -4
        ],
        targetOffset: targetOffset
    },
    rightTop: {
        points: [
            'tl',
            'tr'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            4,
            0
        ],
        targetOffset: targetOffset
    },
    bottomRight: {
        points: [
            'tr',
            'br'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    },
    rightBottom: {
        points: [
            'bl',
            'br'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            4,
            0
        ],
        targetOffset: targetOffset
    },
    bottomLeft: {
        points: [
            'tl',
            'bl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            0,
            4
        ],
        targetOffset: targetOffset
    },
    leftBottom: {
        points: [
            'br',
            'bl'
        ],
        overflow: autoAdjustOverflow,
        offset: [
            -4,
            0
        ],
        targetOffset: targetOffset
    }
};
exports.default = placements;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9dzNc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var Content = function Content(props) {
    var overlay = props.overlay, prefixCls = props.prefixCls, id = props.id, overlayInnerStyle = props.overlayInnerStyle;
    return /*#__PURE__*/ _react.createElement("div", {
        className: "".concat(prefixCls, "-inner"),
        id: id,
        role: "tooltip",
        style: overlayInnerStyle
    }, typeof overlay === 'function' ? overlay() : overlay);
};
exports.default = Content;

},{"react":"b4tPL","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"eDPDz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOverflowOptions", ()=>getOverflowOptions
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _placements = require("rc-tooltip/es/placements");
var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
};
var autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0
};
var targetOffset = [
    0,
    0
];
function getOverflowOptions(autoAdjustOverflow) {
    if (typeof autoAdjustOverflow === 'boolean') return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    return _extendsDefault.default(_extendsDefault.default({}, autoAdjustOverflowDisabled), autoAdjustOverflow);
}
function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth, arrowWidth = _config$arrowWidth === void 0 ? 4 : _config$arrowWidth, _config$horizontalArr = config.horizontalArrowShift, horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr, _config$verticalArrow = config.verticalArrowShift, verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow, autoAdjustOverflow = config.autoAdjustOverflow, arrowPointAtCenter = config.arrowPointAtCenter;
    var placementMap = {
        left: {
            points: [
                'cr',
                'cl'
            ],
            offset: [
                -4,
                0
            ]
        },
        right: {
            points: [
                'cl',
                'cr'
            ],
            offset: [
                4,
                0
            ]
        },
        top: {
            points: [
                'bc',
                'tc'
            ],
            offset: [
                0,
                -4
            ]
        },
        bottom: {
            points: [
                'tc',
                'bc'
            ],
            offset: [
                0,
                4
            ]
        },
        topLeft: {
            points: [
                'bl',
                'tc'
            ],
            offset: [
                -(horizontalArrowShift + arrowWidth),
                -4
            ]
        },
        leftTop: {
            points: [
                'tr',
                'cl'
            ],
            offset: [
                -4,
                -(verticalArrowShift + arrowWidth)
            ]
        },
        topRight: {
            points: [
                'br',
                'tc'
            ],
            offset: [
                horizontalArrowShift + arrowWidth,
                -4
            ]
        },
        rightTop: {
            points: [
                'tl',
                'cr'
            ],
            offset: [
                4,
                -(verticalArrowShift + arrowWidth)
            ]
        },
        bottomRight: {
            points: [
                'tr',
                'bc'
            ],
            offset: [
                horizontalArrowShift + arrowWidth,
                4
            ]
        },
        rightBottom: {
            points: [
                'bl',
                'cr'
            ],
            offset: [
                4,
                verticalArrowShift + arrowWidth
            ]
        },
        bottomLeft: {
            points: [
                'tl',
                'bc'
            ],
            offset: [
                -(horizontalArrowShift + arrowWidth),
                4
            ]
        },
        leftBottom: {
            points: [
                'br',
                'cl'
            ],
            offset: [
                -4,
                verticalArrowShift + arrowWidth
            ]
        }
    };
    Object.keys(placementMap).forEach(function(key) {
        placementMap[key] = arrowPointAtCenter ? _extendsDefault.default(_extendsDefault.default({}, placementMap[key]), {
            overflow: getOverflowOptions(autoAdjustOverflow),
            targetOffset: targetOffset
        }) : _extendsDefault.default(_extendsDefault.default({}, _placements.placements[key]), {
            overflow: getOverflowOptions(autoAdjustOverflow)
        });
        placementMap[key].ignoreShake = true;
    });
    return placementMap;
}
exports.default = getPlacements;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","rc-tooltip/es/placements":"2cav6","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5mRfd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PresetStatusColorTypes", ()=>PresetStatusColorTypes
);
parcelHelpers.export(exports, "PresetColorTypes", ()=>PresetColorTypes
);
var _type = require("./type");
var PresetStatusColorTypes = _type.tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export
var PresetColorTypes = _type.tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');

},{"./type":"cMtUJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jkdsM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SiderContext", ()=>SiderContext
);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _barsOutlined = require("@ant-design/icons/es/icons/BarsOutlined");
var _barsOutlinedDefault = parcelHelpers.interopDefault(_barsOutlined);
var _rightOutlined = require("@ant-design/icons/es/icons/RightOutlined");
var _rightOutlinedDefault = parcelHelpers.interopDefault(_rightOutlined);
var _leftOutlined = require("@ant-design/icons/es/icons/LeftOutlined");
var _leftOutlinedDefault = parcelHelpers.interopDefault(_leftOutlined);
var _layout = require("./layout");
var _configProvider = require("../config-provider");
var _isNumeric = require("../_util/isNumeric");
var _isNumericDefault = parcelHelpers.interopDefault(_isNumeric);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var dimensionMaxMap = {
    xs: '479.98px',
    sm: '575.98px',
    md: '767.98px',
    lg: '991.98px',
    xl: '1199.98px',
    xxl: '1599.98px'
};
var SiderContext = /*#__PURE__*/ _react.createContext({});
var generateId = function() {
    var i = 0;
    return function() {
        var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        i += 1;
        return "".concat(prefix).concat(i);
    };
}();
var Sider = /*#__PURE__*/ _react.forwardRef(function(_a, ref) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, trigger = _a.trigger, children = _a.children, _a$defaultCollapsed = _a.defaultCollapsed, defaultCollapsed = _a$defaultCollapsed === void 0 ? false : _a$defaultCollapsed, _a$theme = _a.theme, theme = _a$theme === void 0 ? 'dark' : _a$theme, _a$style = _a.style, style = _a$style === void 0 ? {} : _a$style, _a$collapsible = _a.collapsible, collapsible = _a$collapsible === void 0 ? false : _a$collapsible, _a$reverseArrow = _a.reverseArrow, reverseArrow = _a$reverseArrow === void 0 ? false : _a$reverseArrow, _a$width = _a.width, width = _a$width === void 0 ? 200 : _a$width, _a$collapsedWidth = _a.collapsedWidth, collapsedWidth = _a$collapsedWidth === void 0 ? 80 : _a$collapsedWidth, zeroWidthTriggerStyle = _a.zeroWidthTriggerStyle, breakpoint = _a.breakpoint, onCollapse = _a.onCollapse, onBreakpoint = _a.onBreakpoint, props = __rest(_a, [
        "prefixCls",
        "className",
        "trigger",
        "children",
        "defaultCollapsed",
        "theme",
        "style",
        "collapsible",
        "reverseArrow",
        "width",
        "collapsedWidth",
        "zeroWidthTriggerStyle",
        "breakpoint",
        "onCollapse",
        "onBreakpoint"
    ]);
    var _useContext = _react.useContext(_layout.LayoutContext), siderHook = _useContext.siderHook;
    var _useState = _react.useState('collapsed' in props ? props.collapsed : defaultCollapsed), _useState2 = _slicedToArrayDefault.default(_useState, 2), collapsed = _useState2[0], setCollapsed = _useState2[1];
    var _useState3 = _react.useState(false), _useState4 = _slicedToArrayDefault.default(_useState3, 2), below = _useState4[0], setBelow = _useState4[1];
    _react.useEffect(function() {
        if ('collapsed' in props) setCollapsed(props.collapsed);
    }, [
        props.collapsed
    ]);
    var handleSetCollapsed = function handleSetCollapsed(value, type) {
        if (!('collapsed' in props)) setCollapsed(value);
        onCollapse === null || onCollapse === void 0 || onCollapse(value, type);
    }; // ========================= Responsive =========================
    var responsiveHandlerRef = _react.useRef();
    responsiveHandlerRef.current = function(mql) {
        setBelow(mql.matches);
        onBreakpoint === null || onBreakpoint === void 0 || onBreakpoint(mql.matches);
        if (collapsed !== mql.matches) handleSetCollapsed(mql.matches, 'responsive');
    };
    _react.useEffect(function() {
        function responsiveHandler(mql) {
            return responsiveHandlerRef.current(mql);
        }
        var mql1;
        if (typeof window !== 'undefined') {
            var _window = window, matchMedia = _window.matchMedia;
            if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
                mql1 = matchMedia("(max-width: ".concat(dimensionMaxMap[breakpoint], ")"));
                try {
                    mql1.addEventListener('change', responsiveHandler);
                } catch (error) {
                    mql1.addListener(responsiveHandler);
                }
                responsiveHandler(mql1);
            }
        }
        return function() {
            try {
                mql1 === null || mql1 === void 0 || mql1.removeEventListener('change', responsiveHandler);
            } catch (error) {
                mql1 === null || mql1 === void 0 || mql1.removeListener(responsiveHandler);
            }
        };
    }, [
        breakpoint
    ]); // in order to accept dynamic 'breakpoint' property, we need to add 'breakpoint' into dependency array.
    _react.useEffect(function() {
        var uniqueId = generateId('ant-sider-');
        siderHook.addSider(uniqueId);
        return function() {
            return siderHook.removeSider(uniqueId);
        };
    }, []);
    var toggle = function toggle() {
        handleSetCollapsed(!collapsed, 'clickTrigger');
    };
    var _useContext2 = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _useContext2.getPrefixCls;
    var renderSider = function renderSider() {
        var _classNames;
        var prefixCls = getPrefixCls('layout-sider', customizePrefixCls);
        var divProps = _omitDefault.default(props, [
            'collapsed'
        ]);
        var rawWidth = collapsed ? collapsedWidth : width; // use "px" as fallback unit for width
        var siderWidth = _isNumericDefault.default(rawWidth) ? "".concat(rawWidth, "px") : String(rawWidth); // special trigger when collapsedWidth == 0
        var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /*#__PURE__*/ _react.createElement("span", {
            onClick: toggle,
            className: _classnamesDefault.default("".concat(prefixCls, "-zero-width-trigger"), "".concat(prefixCls, "-zero-width-trigger-").concat(reverseArrow ? 'right' : 'left')),
            style: zeroWidthTriggerStyle
        }, trigger || /*#__PURE__*/ _react.createElement(_barsOutlinedDefault.default, null)) : null;
        var iconObj = {
            expanded: reverseArrow ? /*#__PURE__*/ _react.createElement(_rightOutlinedDefault.default, null) : /*#__PURE__*/ _react.createElement(_leftOutlinedDefault.default, null),
            collapsed: reverseArrow ? /*#__PURE__*/ _react.createElement(_leftOutlinedDefault.default, null) : /*#__PURE__*/ _react.createElement(_rightOutlinedDefault.default, null)
        };
        var status = collapsed ? 'collapsed' : 'expanded';
        var defaultTrigger = iconObj[status];
        var triggerDom = trigger !== null ? zeroWidthTrigger || /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-trigger"),
            onClick: toggle,
            style: {
                width: siderWidth
            }
        }, trigger || defaultTrigger) : null;
        var divStyle = _extendsDefault.default(_extendsDefault.default({}, style), {
            flex: "0 0 ".concat(siderWidth),
            maxWidth: siderWidth,
            minWidth: siderWidth,
            width: siderWidth
        });
        var siderCls = _classnamesDefault.default(prefixCls, "".concat(prefixCls, "-").concat(theme), (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-collapsed"), !!collapsed), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-has-trigger"), collapsible && trigger !== null && !zeroWidthTrigger), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-below"), !!below), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-zero-width"), parseFloat(siderWidth) === 0), _classNames), className);
        return /*#__PURE__*/ _react.createElement("aside", _extendsDefault.default({
            className: siderCls
        }, divProps, {
            style: divStyle,
            ref: ref
        }), /*#__PURE__*/ _react.createElement("div", {
            className: "".concat(prefixCls, "-children")
        }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
    };
    var contextValue = _react.useMemo(function() {
        return {
            siderCollapsed: collapsed
        };
    }, [
        collapsed
    ]);
    return /*#__PURE__*/ _react.createElement(SiderContext.Provider, {
        value: contextValue
    }, renderSider());
});
Sider.displayName = 'Sider';
exports.default = Sider;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","react":"b4tPL","classnames":"dFgpN","rc-util/es/omit":"9TJfY","@ant-design/icons/es/icons/BarsOutlined":"5uJbN","@ant-design/icons/es/icons/RightOutlined":"5Bvwd","@ant-design/icons/es/icons/LeftOutlined":"9G5WF","./layout":"2WRie","../config-provider":"dg9FJ","../_util/isNumeric":"9lXVe","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"5uJbN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var _react = require("react");
var _barsOutlined = require("@ant-design/icons-svg/es/asn/BarsOutlined");
var _barsOutlinedDefault = parcelHelpers.interopDefault(_barsOutlined);
var _antdIcon = require("../components/AntdIcon");
var _antdIconDefault = parcelHelpers.interopDefault(_antdIcon);
var BarsOutlined = function BarsOutlined(props, ref) {
    return /*#__PURE__*/ _react.createElement(_antdIconDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, props), {}, {
        ref: ref,
        icon: _barsOutlinedDefault.default
    }));
};
BarsOutlined.displayName = 'BarsOutlined';
exports.default = /*#__PURE__*/ _react.forwardRef(BarsOutlined);

},{"@babel/runtime/helpers/esm/objectSpread2":"aKBZs","react":"b4tPL","@ant-design/icons-svg/es/asn/BarsOutlined":"1E3dt","../components/AntdIcon":"krnKi","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1E3dt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This icon file is generated automatically.
var BarsOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "0 0 1024 1024",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z"
                }
            }
        ]
    },
    "name": "bars",
    "theme": "outlined"
};
exports.default = BarsOutlined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"2WRie":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LayoutContext", ()=>LayoutContext
);
parcelHelpers.export(exports, "Header", ()=>Header
);
parcelHelpers.export(exports, "Footer", ()=>Footer
);
parcelHelpers.export(exports, "Content", ()=>Content
);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _configProvider = require("../config-provider");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var LayoutContext = /*#__PURE__*/ _react.createContext({
    siderHook: {
        addSider: function addSider() {
            return null;
        },
        removeSider: function removeSider() {
            return null;
        }
    }
});
function generator(_ref) {
    var suffixCls = _ref.suffixCls, tagName = _ref.tagName, displayName = _ref.displayName;
    return function(BasicComponent) {
        var Adapter = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
            var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
            var customizePrefixCls = props.prefixCls;
            var prefixCls = getPrefixCls(suffixCls, customizePrefixCls);
            return /*#__PURE__*/ _react.createElement(BasicComponent, _extendsDefault.default({
                ref: ref,
                prefixCls: prefixCls,
                tagName: tagName
            }, props));
        });
        Adapter.displayName = displayName;
        return Adapter;
    };
}
var Basic = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, children = props.children, tagName = props.tagName, others = __rest(props, [
        "prefixCls",
        "className",
        "children",
        "tagName"
    ]);
    var classString = _classnamesDefault.default(prefixCls, className);
    return /*#__PURE__*/ _react.createElement(tagName, _extendsDefault.default(_extendsDefault.default({
        className: classString
    }, others), {
        ref: ref
    }), children);
});
var BasicLayout = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var _classNames;
    var _React$useContext2 = _react.useContext(_configProvider.ConfigContext), direction = _React$useContext2.direction;
    var _React$useState = _react.useState([]), _React$useState2 = _slicedToArrayDefault.default(_React$useState, 2), siders = _React$useState2[0], setSiders = _React$useState2[1];
    var prefixCls = props.prefixCls, className = props.className, children = props.children, hasSider = props.hasSider, Tag = props.tagName, others = __rest(props, [
        "prefixCls",
        "className",
        "children",
        "hasSider",
        "tagName"
    ]);
    var classString = _classnamesDefault.default(prefixCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-has-sider"), typeof hasSider === 'boolean' ? hasSider : siders.length > 0), _definePropertyDefault.default(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
    var contextValue = _react.useMemo(function() {
        return {
            siderHook: {
                addSider: function addSider(id) {
                    setSiders(function(prev) {
                        return [].concat(_toConsumableArrayDefault.default(prev), [
                            id
                        ]);
                    });
                },
                removeSider: function removeSider(id) {
                    setSiders(function(prev) {
                        return prev.filter(function(currentId) {
                            return currentId !== id;
                        });
                    });
                }
            }
        };
    }, []);
    return /*#__PURE__*/ _react.createElement(LayoutContext.Provider, {
        value: contextValue
    }, /*#__PURE__*/ _react.createElement(Tag, _extendsDefault.default({
        ref: ref,
        className: classString
    }, others), children));
});
var Layout = generator({
    suffixCls: 'layout',
    tagName: 'section',
    displayName: 'Layout'
})(BasicLayout);
var Header = generator({
    suffixCls: 'layout-header',
    tagName: 'header',
    displayName: 'Header'
})(Basic);
var Footer = generator({
    suffixCls: 'layout-footer',
    tagName: 'footer',
    displayName: 'Footer'
})(Basic);
var Content = generator({
    suffixCls: 'layout-content',
    tagName: 'main',
    displayName: 'Content'
})(Basic);
exports.default = Layout;

},{"@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/extends":"9HBJh","react":"b4tPL","classnames":"dFgpN","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"9lXVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isNumeric = function isNumeric(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
};
exports.default = isNumeric;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8nVMh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _rcMenu = require("rc-menu");
var _configProvider = require("../config-provider");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var MenuDivider = function MenuDivider(_a) {
    var customizePrefixCls = _a.prefixCls, className = _a.className, dashed = _a.dashed, restProps = __rest(_a, [
        "prefixCls",
        "className",
        "dashed"
    ]);
    var _React$useContext = _react.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('menu', customizePrefixCls);
    var classString = _classnamesDefault.default(_definePropertyDefault.default({}, "".concat(prefixCls, "-item-divider-dashed"), !!dashed), className);
    return /*#__PURE__*/ _react.createElement(_rcMenu.Divider, _extendsDefault.default({
        className: classString
    }, restProps));
};
exports.default = MenuDivider;

},{"@babel/runtime/helpers/esm/extends":"9HBJh","@babel/runtime/helpers/esm/defineProperty":"dIbZx","react":"b4tPL","classnames":"dFgpN","rc-menu":"iesKx","../config-provider":"dg9FJ","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1OHv6":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ref = require("rc-util/lib/ref");
var _SearchOutlined = _interopRequireDefault(require("@ant-design/icons/SearchOutlined"));
var _Input = _interopRequireDefault(require("./Input"));
var _button = _interopRequireDefault(require("../button"));
var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));
var _configProvider = require("../config-provider");
var _reactNode = require("../_util/reactNode");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __rest = function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var Search = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var _classNames;
    var customizePrefixCls = props.prefixCls, customizeInputPrefixCls = props.inputPrefixCls, className = props.className, customizeSize = props.size, suffix = props.suffix, _props$enterButton = props.enterButton, enterButton = _props$enterButton === void 0 ? false : _props$enterButton, addonAfter = props.addonAfter, loading = props.loading, disabled = props.disabled, customOnSearch = props.onSearch, customOnChange = props.onChange, restProps = __rest(props, [
        "prefixCls",
        "inputPrefixCls",
        "className",
        "size",
        "suffix",
        "enterButton",
        "addonAfter",
        "loading",
        "disabled",
        "onSearch",
        "onChange"
    ]);
    var _React$useContext = React.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    var contextSize = React.useContext(_SizeContext["default"]);
    var size = customizeSize || contextSize;
    var inputRef = React.useRef(null);
    var onChange = function onChange(e) {
        if (e && e.target && e.type === 'click' && customOnSearch) customOnSearch(e.target.value, e);
        if (customOnChange) customOnChange(e);
    };
    var onMouseDown = function onMouseDown(e) {
        var _a;
        if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) e.preventDefault();
    };
    var onSearch = function onSearch(e) {
        var _a, _b;
        if (customOnSearch) customOnSearch((_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) === null || _b === void 0 ? void 0 : _b.value, e);
    };
    var prefixCls = getPrefixCls('input-search', customizePrefixCls);
    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
    var searchIcon = typeof enterButton === 'boolean' ? /*#__PURE__*/ React.createElement(_SearchOutlined["default"], null) : null;
    var btnClassName = "".concat(prefixCls, "-button");
    var button;
    var enterButtonAsElement = enterButton || {};
    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;
    if (isAntdButton || enterButtonAsElement.type === 'button') button = (0, _reactNode.cloneElement)(enterButtonAsElement, (0, _extends2["default"])({
        onMouseDown: onMouseDown,
        onClick: function onClick(e) {
            var _a, _b;
            (_b = (_a = enterButtonAsElement === null || enterButtonAsElement === void 0 ? void 0 : enterButtonAsElement.props) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 || _b.call(_a, e);
            onSearch(e);
        },
        key: 'enterButton'
    }, isAntdButton ? {
        className: btnClassName,
        size: size
    } : {}));
    else button = /*#__PURE__*/ React.createElement(_button["default"], {
        className: btnClassName,
        type: enterButton ? 'primary' : undefined,
        size: size,
        disabled: disabled,
        key: "enterButton",
        onMouseDown: onMouseDown,
        onClick: onSearch,
        loading: loading,
        icon: searchIcon
    }, enterButton);
    if (addonAfter) button = [
        button,
        (0, _reactNode.cloneElement)(addonAfter, {
            key: 'addonAfter'
        })
    ];
    var cls = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(size), !!size), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-with-button"), !!enterButton), _classNames), className);
    return /*#__PURE__*/ React.createElement(_Input["default"], (0, _extends2["default"])({
        ref: (0, _ref.composeRef)(inputRef, ref),
        onPressEnter: onSearch
    }, restProps, {
        size: size,
        prefixCls: inputPrefixCls,
        addonAfter: button,
        suffix: suffix,
        onChange: onChange,
        className: cls,
        disabled: disabled
    }));
});
Search.displayName = 'Search';
var _default = Search;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/defineProperty":"f7qFM","@babel/runtime/helpers/extends":"gGTxl","react":"b4tPL","classnames":"dFgpN","rc-util/lib/ref":"3r6Bz","@ant-design/icons/SearchOutlined":"bUAzT","./Input":"3PLl5","../button":"89yUa","../config-provider/SizeContext":"GlbV5","../config-provider":"en4XD","../_util/reactNode":"jJTgh"}],"8WoZp":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"ew9pR":[function(require,module,exports) {
function _typeof(obj1) {
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj1);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"f7qFM":[function(require,module,exports) {
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"gGTxl":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"3r6Bz":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.composeRef = composeRef;
exports.fillRef = fillRef;
exports.supportRef = supportRef;
exports.useComposeRef = useComposeRef;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _reactIs = require("react-is");
var _useMemo = _interopRequireDefault(require("./hooks/useMemo"));
function fillRef(ref, node) {
    if (typeof ref === 'function') ref(node);
    else if ((0, _typeof2.default)(ref) === 'object' && ref && 'current' in ref) ref.current = node;
}
/**
 * Merge refs into one ref function to support ref passing.
 */ function composeRef() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++)refs[_key] = arguments[_key];
    var refList = refs.filter(function(ref) {
        return ref;
    });
    if (refList.length <= 1) return refList[0];
    return function(node) {
        refs.forEach(function(ref) {
            fillRef(ref, node);
        });
    };
}
function useComposeRef() {
    for(var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)refs[_key2] = arguments[_key2];
    return (0, _useMemo.default)(function() {
        return composeRef.apply(void 0, refs);
    }, refs, function(prev, next) {
        return prev.length === next.length && prev.every(function(ref, i) {
            return ref === next[i];
        });
    });
}
function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    var type = (0, _reactIs.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node
    if (typeof type === 'function' && !((_type$prototype = type.prototype) === null || _type$prototype === void 0 ? void 0 : _type$prototype.render)) return false;
     // Class component
    if (typeof nodeOrComponent === 'function' && !((_nodeOrComponent$prot = nodeOrComponent.prototype) === null || _nodeOrComponent$prot === void 0 ? void 0 : _nodeOrComponent$prot.render)) return false;
    return true;
} /* eslint-enable */ 

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","react-is":"3cYn4","./hooks/useMemo":"kuQ5b"}],"kuQ5b":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useMemo;
var React = _interopRequireWildcard(require("react"));
function useMemo(getValue, condition, shouldUpdate) {
    var cacheRef = React.useRef({});
    if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
        cacheRef.current.value = getValue();
        cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
}

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","react":"b4tPL"}],"4WkBt":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./typeof.js":"ew9pR"}],"bUAzT":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _SearchOutlined = _interopRequireDefault(require('./lib/icons/SearchOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _SearchOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/SearchOutlined":"9GQkW"}],"9GQkW":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _SearchOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/SearchOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var SearchOutlined = function SearchOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _SearchOutlined.default
    }));
};
SearchOutlined.displayName = 'SearchOutlined';
var _default = /*#__PURE__*/ React.forwardRef(SearchOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/SearchOutlined":"fHh3x","../components/AntdIcon":"8J0Vz"}],"50HAg":[function(require,module,exports) {
var defineProperty = require("./defineProperty.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./defineProperty.js":"f7qFM"}],"fHh3x":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var SearchOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"
                }
            }
        ]
    },
    "name": "search",
    "theme": "outlined"
};
exports.default = SearchOutlined;

},{}],"8J0Vz":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _Context = _interopRequireDefault(require("./Context"));
var _IconBase = _interopRequireDefault(require("./IconBase"));
var _twoTonePrimaryColor = require("./twoTonePrimaryColor");
var _utils = require("../utils");
var _excluded = [
    "className",
    "icon",
    "spin",
    "rotate",
    "tabIndex",
    "onClick",
    "twoToneColor"
];
// Initial setting
// should move it to antd main repo?
(0, _twoTonePrimaryColor.setTwoToneColor)('#1890ff');
var Icon = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var _classNames;
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _React$useContext = React.useContext(_Context.default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? 'anticon' : _React$useContext$pre;
    var classString = (0, _classnames.default)(prefixCls, (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === 'loading'), _classNames), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === undefined && onClick) iconTabIndex = -1;
    var svgStyle = rotate ? {
        msTransform: "rotate(".concat(rotate, "deg)"),
        transform: "rotate(".concat(rotate, "deg)")
    } : undefined;
    var _normalizeTwoToneColo = (0, _utils.normalizeTwoToneColors)(twoToneColor), _normalizeTwoToneColo2 = (0, _slicedToArray2.default)(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /*#__PURE__*/ React.createElement("span", (0, _objectSpread2.default)((0, _objectSpread2.default)({
        role: "img",
        "aria-label": icon.name
    }, restProps), {}, {
        ref: ref,
        tabIndex: iconTabIndex,
        onClick: onClick,
        className: classString
    }), /*#__PURE__*/ React.createElement(_IconBase.default, {
        icon: icon,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        style: svgStyle
    }));
});
Icon.displayName = 'AntdIcon';
Icon.getTwoToneColor = _twoTonePrimaryColor.getTwoToneColor;
Icon.setTwoToneColor = _twoTonePrimaryColor.setTwoToneColor;
var _default = Icon;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/objectSpread2":"50HAg","@babel/runtime/helpers/slicedToArray":"iAocj","@babel/runtime/helpers/defineProperty":"f7qFM","@babel/runtime/helpers/objectWithoutProperties":"1GdLV","react":"b4tPL","classnames":"dFgpN","./Context":"lH6SI","./IconBase":"4YgP7","./twoTonePrimaryColor":"beBUk","../utils":"4ulvG"}],"iAocj":[function(require,module,exports) {
var arrayWithHoles = require("./arrayWithHoles.js");
var iterableToArrayLimit = require("./iterableToArrayLimit.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableRest = require("./nonIterableRest.js");
function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./arrayWithHoles.js":"5DPWd","./iterableToArrayLimit.js":"aTs8I","./unsupportedIterableToArray.js":"idadU","./nonIterableRest.js":"jja4g"}],"5DPWd":[function(require,module,exports) {
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"aTs8I":[function(require,module,exports) {
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"idadU":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./arrayLikeToArray.js":"5rjYV"}],"5rjYV":[function(require,module,exports) {
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"jja4g":[function(require,module,exports) {
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"1GdLV":[function(require,module,exports) {
var objectWithoutPropertiesLoose = require("./objectWithoutPropertiesLoose.js");
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./objectWithoutPropertiesLoose.js":"esvPF"}],"esvPF":[function(require,module,exports) {
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"lH6SI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = require("react");
var IconContext = /*#__PURE__*/ (0, _react.createContext)({});
var _default = IconContext;
exports.default = _default;

},{"react":"b4tPL"}],"4YgP7":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _utils = require("../utils");
var _excluded = [
    "icon",
    "className",
    "onClick",
    "style",
    "primaryColor",
    "secondaryColor"
];
var twoToneColorPalette = {
    primaryColor: '#333',
    secondaryColor: '#E6E6E6',
    calculated: false
};
function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || (0, _utils.getSecondaryColor)(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
    return (0, _objectSpread2.default)({}, twoToneColorPalette);
}
var IconBase = function IconBase(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var colors = twoToneColorPalette;
    if (primaryColor) colors = {
        primaryColor: primaryColor,
        secondaryColor: secondaryColor || (0, _utils.getSecondaryColor)(primaryColor)
    };
    (0, _utils.useInsertStyles)();
    (0, _utils.warning)((0, _utils.isIconDefinition)(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!(0, _utils.isIconDefinition)(icon)) return null;
    var target = icon;
    if (target && typeof target.icon === 'function') target = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
    });
    return (0, _utils.generate)(target.icon, "svg-".concat(target.name), (0, _objectSpread2.default)({
        className: className,
        onClick: onClick,
        style: style,
        'data-icon': target.name,
        width: '1em',
        height: '1em',
        fill: 'currentColor',
        'aria-hidden': 'true'
    }, restProps));
};
IconBase.displayName = 'IconReact';
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
var _default = IconBase;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectWithoutProperties":"1GdLV","@babel/runtime/helpers/objectSpread2":"50HAg","../utils":"4ulvG"}],"4ulvG":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.warning = warning;
exports.isIconDefinition = isIconDefinition;
exports.normalizeAttrs = normalizeAttrs;
exports.generate = generate;
exports.getSecondaryColor = getSecondaryColor;
exports.normalizeTwoToneColors = normalizeTwoToneColors;
exports.useInsertStyles = exports.iconStyles = exports.svgBaseProps = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _colors = require("@ant-design/colors");
var _react = _interopRequireWildcard(require("react"));
var _warning = _interopRequireDefault(require("rc-util/lib/warning"));
var _dynamicCSS = require("rc-util/lib/Dom/dynamicCSS");
var _Context = _interopRequireDefault(require("./components/Context"));
function warning(valid, message) {
    (0, _warning.default)(valid, "[@ant-design/icons] ".concat(message));
}
function isIconDefinition(target) {
    return (0, _typeof2.default)(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && ((0, _typeof2.default)(target.icon) === 'object' || typeof target.icon === 'function');
}
function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key) {
        var val = attrs[key];
        switch(key){
            case 'class':
                acc.className = val;
                delete acc.class;
                break;
            default:
                acc[key] = val;
        }
        return acc;
    }, {});
}
function generate(node, key, rootProps) {
    if (!rootProps) return /*#__PURE__*/ _react.default.createElement(node.tag, (0, _objectSpread2.default)({
        key: key
    }, normalizeAttrs(node.attrs)), (node.children || []).map(function(child, index) {
        return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
    return /*#__PURE__*/ _react.default.createElement(node.tag, (0, _objectSpread2.default)((0, _objectSpread2.default)({
        key: key
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function(child, index) {
        return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
}
function getSecondaryColor(primaryColor) {
    // choose the second color
    return (0, _colors.generate)(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) return [];
    return Array.isArray(twoToneColor) ? twoToneColor : [
        twoToneColor
    ];
} // These props make sure that the SVG behaviours like general text.
// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
var svgBaseProps = {
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    'aria-hidden': 'true',
    focusable: 'false'
};
exports.svgBaseProps = svgBaseProps;
var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
exports.iconStyles = iconStyles;
var useInsertStyles = function useInsertStyles() {
    var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;
    var _useContext = (0, _react.useContext)(_Context.default), csp = _useContext.csp;
    (0, _react.useEffect)(function() {
        (0, _dynamicCSS.updateCSS)(styleStr, '@ant-design-icons', {
            prepend: true,
            csp: csp
        });
    }, []);
};
exports.useInsertStyles = useInsertStyles;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","@babel/runtime/helpers/typeof":"ew9pR","@ant-design/colors":"51wCJ","react":"b4tPL","rc-util/lib/warning":"6xW49","rc-util/lib/Dom/dynamicCSS":"2jczC","./components/Context":"lH6SI"}],"6xW49":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.call = call;
exports.default = void 0;
exports.note = note;
exports.noteOnce = noteOnce;
exports.resetWarned = resetWarned;
exports.warning = warning;
exports.warningOnce = warningOnce;
/* eslint-disable no-console */ var warned = {};
function warning(valid, message) {
    // Support uglify
    if (!valid && console !== undefined) console.error("Warning: ".concat(message));
}
function note(valid, message) {
    // Support uglify
    if (!valid && console !== undefined) console.warn("Note: ".concat(message));
}
function resetWarned() {
    warned = {};
}
function call(method, valid, message) {
    if (!valid && !warned[message]) {
        method(false, message);
        warned[message] = true;
    }
}
function warningOnce(valid, message) {
    call(warning, valid, message);
}
function noteOnce(valid, message) {
    call(note, valid, message);
}
var _default = warningOnce;
/* eslint-enable */ exports.default = _default;

},{}],"2jczC":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.injectCSS = injectCSS;
exports.removeCSS = removeCSS;
exports.updateCSS = updateCSS;
var _canUseDom = _interopRequireDefault(require("./canUseDom"));
var MARK_KEY = "rc-util-key";
function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, mark = _ref.mark;
    if (mark) return mark.startsWith('data-') ? mark : "data-".concat(mark);
    return MARK_KEY;
}
function getContainer(option) {
    if (option.attachTo) return option.attachTo;
    var head = document.querySelector('head');
    return head || document.body;
}
function injectCSS(css) {
    var _option$csp;
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!(0, _canUseDom.default)()) return null;
    var styleNode = document.createElement('style');
    if ((_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce) {
        var _option$csp2;
        styleNode.nonce = (_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce;
    }
    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (option.prepend && container.prepend) // Use `prepend` first
    container.prepend(styleNode);
    else if (option.prepend && firstChild) // Fallback to `insertBefore` like IE not support `prepend`
    container.insertBefore(styleNode, firstChild);
    else container.appendChild(styleNode);
    return styleNode;
}
var containerCache = new Map();
function findExistNode(key) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var container = getContainer(option);
    return Array.from(containerCache.get(container).children).find(function(node) {
        return node.tagName === 'STYLE' && node.getAttribute(getMark(option)) === key;
    });
}
function removeCSS(key) {
    var _existNode$parentNode;
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var existNode = findExistNode(key, option);
    existNode === null || existNode === void 0 || (_existNode$parentNode = existNode.parentNode) === null || _existNode$parentNode === void 0 || _existNode$parentNode.removeChild(existNode);
}
function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var container = getContainer(option); // Get real parent
    if (!containerCache.has(container)) {
        var placeholderStyle = injectCSS('', option);
        var parentNode = placeholderStyle.parentNode;
        containerCache.set(container, parentNode);
        parentNode.removeChild(placeholderStyle);
    }
    var existNode = findExistNode(key, option);
    if (existNode) {
        var _option$csp3, _option$csp4;
        if (((_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce) && existNode.nonce !== ((_option$csp4 = option.csp) === null || _option$csp4 === void 0 ? void 0 : _option$csp4.nonce)) {
            var _option$csp5;
            existNode.nonce = (_option$csp5 = option.csp) === null || _option$csp5 === void 0 ? void 0 : _option$csp5.nonce;
        }
        if (existNode.innerHTML !== css) existNode.innerHTML = css;
        return existNode;
    }
    var newNode = injectCSS(css, option);
    newNode.setAttribute(getMark(option), key);
    return newNode;
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","./canUseDom":"10TIB"}],"10TIB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = canUseDom;
function canUseDom() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
}

},{}],"beBUk":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setTwoToneColor = setTwoToneColor;
exports.getTwoToneColor = getTwoToneColor;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _IconBase = _interopRequireDefault(require("./IconBase"));
var _utils = require("../utils");
function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = (0, _utils.normalizeTwoToneColors)(twoToneColor), _normalizeTwoToneColo2 = (0, _slicedToArray2.default)(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return _IconBase.default.setTwoToneColors({
        primaryColor: primaryColor,
        secondaryColor: secondaryColor
    });
}
function getTwoToneColor() {
    var colors = _IconBase.default.getTwoToneColors();
    if (!colors.calculated) return colors.primaryColor;
    return [
        colors.primaryColor,
        colors.secondaryColor
    ];
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/slicedToArray":"iAocj","./IconBase":"4YgP7","../utils":"4ulvG"}],"3PLl5":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
exports.fixControlledValue = fixControlledValue;
exports.resolveOnChange = resolveOnChange;
exports.triggerFocus = triggerFocus;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireWildcard(require("react"));
var _rcInput = _interopRequireDefault(require("rc-input"));
var _CloseCircleFilled = _interopRequireDefault(require("@ant-design/icons/CloseCircleFilled"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ref2 = require("rc-util/lib/ref");
var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));
var _statusUtils = require("../_util/statusUtils");
var _configProvider = require("../config-provider");
var _context = require("../form/context");
var _utils = require("./utils");
var _devWarning = _interopRequireDefault(require("../_util/devWarning"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __rest = function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function fixControlledValue(value) {
    if (typeof value === 'undefined' || value === null) return '';
    return String(value);
}
function resolveOnChange(target, e, onChange, targetValue) {
    if (!onChange) return;
    var event = e;
    if (e.type === 'click') {
        // Clone a new target for event.
        // Avoid the following usage, the setQuery method gets the original value.
        //
        // const [query, setQuery] = React.useState('');
        // <Input
        //   allowClear
        //   value={query}
        //   onChange={(e)=> {
        //     setQuery((prevStatus) => e.target.value);
        //   }}
        // />
        var currentTarget = target.cloneNode(true); // click clear icon
        event = Object.create(e, {
            target: {
                value: currentTarget
            },
            currentTarget: {
                value: currentTarget
            }
        });
        currentTarget.value = '';
        onChange(event);
        return;
    } // Trigger by composition event, this means we need force change the input value
    if (targetValue !== undefined) {
        event = Object.create(e, {
            target: {
                value: target
            },
            currentTarget: {
                value: target
            }
        });
        target.value = targetValue;
        onChange(event);
        return;
    }
    onChange(event);
}
function triggerFocus(element, option) {
    if (!element) return;
    element.focus(option); // Selection content
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
        var len = element.value.length;
        switch(cursor){
            case 'start':
                element.setSelectionRange(0, 0);
                break;
            case 'end':
                element.setSelectionRange(len, len);
                break;
            default:
                element.setSelectionRange(0, len);
        }
    }
}
var Input = /*#__PURE__*/ (0, _react.forwardRef)(function(props, ref) {
    var _classNames, _classNames2, _classNames4;
    var customizePrefixCls = props.prefixCls, _props$bordered = props.bordered, bordered = _props$bordered === void 0 ? true : _props$bordered, customStatus = props.status, customSize = props.size, onBlur = props.onBlur, onFocus = props.onFocus, suffix = props.suffix, allowClear = props.allowClear, addonAfter = props.addonAfter, addonBefore = props.addonBefore, rest = __rest(props, [
        "prefixCls",
        "bordered",
        "status",
        "size",
        "onBlur",
        "onFocus",
        "suffix",
        "allowClear",
        "addonAfter",
        "addonBefore"
    ]);
    var _React$useContext = _react["default"].useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, input = _React$useContext.input;
    var prefixCls = getPrefixCls('input', customizePrefixCls);
    var inputRef = (0, _react.useRef)(null); // ===================== Size =====================
    var size = _react["default"].useContext(_SizeContext["default"]);
    var mergedSize = customSize || size; // ===================== Status =====================
    var _useContext = (0, _react.useContext)(_context.FormItemStatusContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback;
    var mergedStatus = (0, _statusUtils.getMergedStatus)(contextStatus, customStatus); // ===================== Focus warning =====================
    var inputHasPrefixSuffix = (0, _utils.hasPrefixSuffix)(props) || !!hasFeedback;
    var prevHasPrefixSuffix = (0, _react.useRef)(inputHasPrefixSuffix);
    (0, _react.useEffect)(function() {
        var _a;
        if (inputHasPrefixSuffix && !prevHasPrefixSuffix.current) (0, _devWarning["default"])(document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input), 'Input', "When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ");
        prevHasPrefixSuffix.current = inputHasPrefixSuffix;
    }, [
        inputHasPrefixSuffix
    ]); // ===================== Remove Password value =====================
    var removePasswordTimeoutRef = (0, _react.useRef)([]);
    var removePasswordTimeout = function removePasswordTimeout() {
        removePasswordTimeoutRef.current.push(window.setTimeout(function() {
            var _a, _b, _c, _d;
            if (((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) && ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.input.getAttribute('type')) === 'password' && ((_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.input.hasAttribute('value'))) (_d = inputRef.current) === null || _d === void 0 || _d.input.removeAttribute('value');
        }));
    };
    (0, _react.useEffect)(function() {
        removePasswordTimeout();
        return function() {
            return removePasswordTimeoutRef.current.forEach(function(item) {
                return window.clearTimeout(item);
            });
        };
    }, []);
    var handleBlur = function handleBlur(e) {
        removePasswordTimeout();
        onBlur === null || onBlur === void 0 || onBlur(e);
    };
    var handleFocus = function handleFocus(e) {
        removePasswordTimeout();
        onFocus === null || onFocus === void 0 || onFocus(e);
    };
    var suffixNode = (hasFeedback || suffix) && /*#__PURE__*/ _react["default"].createElement(_react["default"].Fragment, null, suffix, hasFeedback && (0, _statusUtils.getFeedbackIcon)(prefixCls, mergedStatus)); // Allow clear
    var mergedAllowClear;
    if ((0, _typeof2["default"])(allowClear) === 'object' && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) mergedAllowClear = allowClear;
    else if (allowClear) mergedAllowClear = {
        clearIcon: /*#__PURE__*/ _react["default"].createElement(_CloseCircleFilled["default"], null)
    };
    return /*#__PURE__*/ _react["default"].createElement(_rcInput["default"], (0, _extends2["default"])({
        ref: (0, _ref2.composeRef)(ref, inputRef),
        prefixCls: prefixCls,
        autoComplete: input === null || input === void 0 ? void 0 : input.autoComplete
    }, rest, {
        onBlur: handleBlur,
        onFocus: handleFocus,
        suffix: suffixNode,
        allowClear: mergedAllowClear,
        addonAfter: addonAfter && /*#__PURE__*/ _react["default"].createElement(_context.NoFormStatus, null, addonAfter),
        addonBefore: addonBefore && /*#__PURE__*/ _react["default"].createElement(_context.NoFormStatus, null, addonBefore),
        inputClassName: (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-sm"), mergedSize === 'small'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-lg"), mergedSize === 'large'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), !inputHasPrefixSuffix && (0, _statusUtils.getStatusClassNames)(prefixCls, mergedStatus)),
        affixWrapperClassName: (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-affix-wrapper-sm"), mergedSize === 'small'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-affix-wrapper-lg"), mergedSize === 'large'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === 'rtl'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _classNames2), (0, _statusUtils.getStatusClassNames)("".concat(prefixCls, "-affix-wrapper"), mergedStatus, hasFeedback)),
        wrapperClassName: (0, _classnames["default"])((0, _defineProperty2["default"])({}, "".concat(prefixCls, "-group-rtl"), direction === 'rtl')),
        groupClassName: (0, _classnames["default"])((_classNames4 = {}, (0, _defineProperty2["default"])(_classNames4, "".concat(prefixCls, "-group-wrapper-sm"), mergedSize === 'small'), (0, _defineProperty2["default"])(_classNames4, "".concat(prefixCls, "-group-wrapper-lg"), mergedSize === 'large'), (0, _defineProperty2["default"])(_classNames4, "".concat(prefixCls, "-group-wrapper-rtl"), direction === 'rtl'), _classNames4), (0, _statusUtils.getStatusClassNames)("".concat(prefixCls, "-group-wrapper"), mergedStatus, hasFeedback))
    }));
});
var _default = Input;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","rc-input":"fPF8h","@ant-design/icons/CloseCircleFilled":"1YOSh","classnames":"dFgpN","rc-util/lib/ref":"3r6Bz","../config-provider/SizeContext":"GlbV5","../_util/statusUtils":"k5MjJ","../config-provider":"en4XD","../form/context":"1hyJO","./utils":"5Ex80","../_util/devWarning":"2ZcNH"}],"fPF8h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseInput", ()=>_baseInputDefault.default
);
var _baseInput = require("./BaseInput");
var _baseInputDefault = parcelHelpers.interopDefault(_baseInput);
var _input = require("./Input");
var _inputDefault = parcelHelpers.interopDefault(_input);
exports.default = _inputDefault.default;

},{"./BaseInput":"jqTdx","./Input":"8LHVg","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"jqTdx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _commonUtils = require("./utils/commonUtils");
var BaseInput = function BaseInput(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style = props.style, affixWrapperClassName = props.affixWrapperClassName, groupClassName = props.groupClassName, wrapperClassName = props.wrapperClassName, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden;
    var containerRef = _react.useRef(null);
    var onInputMouseUp = function onInputMouseUp(e) {
        var _containerRef$current;
        if ((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.contains(e.target)) triggerFocus === null || triggerFocus === void 0 || triggerFocus();
    }; // ================== Clear Icon ================== //
    var getClearIcon = function getClearIcon() {
        var _classNames;
        if (!allowClear) return null;
        var needClear = !disabled && !readOnly && value;
        var clearIconCls = "".concat(prefixCls, "-clear-icon");
        var iconNode = _typeofDefault.default(allowClear) === 'object' && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon) ? allowClear.clearIcon : '✖';
        return /*#__PURE__*/ _reactDefault.default.createElement("span", {
            onClick: handleReset,
            // Do not trigger onBlur when clear input
            // https://github.com/ant-design/ant-design/issues/31200
            onMouseDown: function onMouseDown(e) {
                return e.preventDefault();
            },
            className: _classnamesDefault.default(clearIconCls, (_classNames = {}, _definePropertyDefault.default(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), _definePropertyDefault.default(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),
            role: "button",
            tabIndex: -1
        }, iconNode);
    };
    var element = /*#__PURE__*/ _react.cloneElement(inputElement, {
        value: value,
        hidden: hidden
    }); // ================== Prefix & Suffix ================== //
    if (_commonUtils.hasPrefixSuffix(props)) {
        var _classNames2;
        var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
        var affixWrapperCls = _classnamesDefault.default(affixWrapperPrefixCls, (_classNames2 = {}, _definePropertyDefault.default(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _definePropertyDefault.default(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _definePropertyDefault.default(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), _definePropertyDefault.default(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !_commonUtils.hasAddon(props) && className, affixWrapperClassName);
        var suffixNode = (suffix || allowClear) && /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: "".concat(prefixCls, "-suffix")
        }, getClearIcon(), suffix);
        element = /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: affixWrapperCls,
            style: style,
            hidden: !_commonUtils.hasAddon(props) && hidden,
            onMouseUp: onInputMouseUp,
            ref: containerRef
        }, prefix && /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: "".concat(prefixCls, "-prefix")
        }, prefix), /*#__PURE__*/ _react.cloneElement(inputElement, {
            style: null,
            value: value,
            hidden: null
        }), suffixNode);
    } // ================== Addon ================== //
    if (_commonUtils.hasAddon(props)) {
        var wrapperCls = "".concat(prefixCls, "-group");
        var addonCls = "".concat(wrapperCls, "-addon");
        var mergedWrapperClassName = _classnamesDefault.default("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);
        var mergedGroupClassName = _classnamesDefault.default("".concat(prefixCls, "-group-wrapper"), className, groupClassName); // Need another wrapper for changing display:table to display:inline-block
        // and put style prop in wrapper
        return /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: mergedGroupClassName,
            style: style,
            hidden: hidden
        }, /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: mergedWrapperClassName
        }, addonBefore && /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: addonCls
        }, addonBefore), /*#__PURE__*/ _react.cloneElement(element, {
            style: null,
            hidden: null
        }), addonAfter && /*#__PURE__*/ _reactDefault.default.createElement("span", {
            className: addonCls
        }, addonAfter)));
    }
    return element;
};
exports.default = BaseInput;

},{"@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/typeof":"bgxCq","react":"b4tPL","classnames":"dFgpN","./utils/commonUtils":"kOCHt","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"kOCHt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasAddon", ()=>hasAddon
);
parcelHelpers.export(exports, "hasPrefixSuffix", ()=>hasPrefixSuffix
);
parcelHelpers.export(exports, "resolveOnChange", ()=>resolveOnChange
);
parcelHelpers.export(exports, "triggerFocus", ()=>triggerFocus
);
parcelHelpers.export(exports, "fixControlledValue", ()=>fixControlledValue
);
function hasAddon(props) {
    return !!(props.addonBefore || props.addonAfter);
}
function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
}
function resolveOnChange(target, e, onChange, targetValue) {
    if (!onChange) return;
    var event = e;
    if (e.type === 'click') {
        // Clone a new target for event.
        // Avoid the following usage, the setQuery method gets the original value.
        //
        // const [query, setQuery] = React.useState('');
        // <Input
        //   allowClear
        //   value={query}
        //   onChange={(e)=> {
        //     setQuery((prevStatus) => e.target.value);
        //   }}
        // />
        var currentTarget = target.cloneNode(true); // click clear icon
        event = Object.create(e, {
            target: {
                value: currentTarget
            },
            currentTarget: {
                value: currentTarget
            }
        });
        currentTarget.value = '';
        onChange(event);
        return;
    } // Trigger by composition event, this means we need force change the input value
    if (targetValue !== undefined) {
        event = Object.create(e, {
            target: {
                value: target
            },
            currentTarget: {
                value: target
            }
        });
        target.value = targetValue;
        onChange(event);
        return;
    }
    onChange(event);
}
function triggerFocus(element, option) {
    if (!element) return;
    element.focus(option); // Selection content
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
        var len = element.value.length;
        switch(cursor){
            case 'start':
                element.setSelectionRange(0, 0);
                break;
            case 'end':
                element.setSelectionRange(len, len);
                break;
            default:
                element.setSelectionRange(0, len);
        }
    }
}
function fixControlledValue(value) {
    if (typeof value === 'undefined' || value === null) return '';
    return String(value);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"8LHVg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _baseInput = require("./BaseInput");
var _baseInputDefault = parcelHelpers.interopDefault(_baseInput);
var _omit = require("rc-util/es/omit");
var _omitDefault = parcelHelpers.interopDefault(_omit);
var _commonUtils = require("./utils/commonUtils");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useMergedState = require("rc-util/es/hooks/useMergedState");
var _useMergedStateDefault = parcelHelpers.interopDefault(_useMergedState);
var _excluded = [
    "autoComplete",
    "onChange",
    "onFocus",
    "onBlur",
    "onPressEnter",
    "onKeyDown",
    "prefixCls",
    "disabled",
    "htmlSize",
    "className",
    "maxLength",
    "suffix",
    "showCount",
    "type",
    "inputClassName"
];
var Input = /*#__PURE__*/ _react.forwardRef(function(props, ref) {
    var autoComplete = props.autoComplete, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown = props.onKeyDown, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? 'rc-input' : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, _props$type = props.type, type = _props$type === void 0 ? 'text' : _props$type, inputClassName = props.inputClassName, rest = _objectWithoutPropertiesDefault.default(props, _excluded);
    var _useMergedState1 = _useMergedStateDefault.default(props.defaultValue, {
        value: props.value
    }), _useMergedState2 = _slicedToArrayDefault.default(_useMergedState1, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var _useState = _react.useState(false), _useState2 = _slicedToArrayDefault.default(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
    var inputRef = _react.useRef(null);
    var focus = function focus(option) {
        if (inputRef.current) _commonUtils.triggerFocus(inputRef.current, option);
    };
    _react.useImperativeHandle(ref, function() {
        return {
            focus: focus,
            blur: function blur() {
                var _inputRef$current;
                (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.blur();
            },
            setSelectionRange: function setSelectionRange(start, end, direction) {
                var _inputRef$current2;
                (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.setSelectionRange(start, end, direction);
            },
            select: function select() {
                var _inputRef$current3;
                (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.select();
            },
            input: inputRef.current
        };
    });
    _react.useEffect(function() {
        setFocused(function(prev) {
            return prev && disabled ? false : prev;
        });
    }, [
        disabled
    ]);
    var handleChange = function handleChange(e) {
        if (props.value === undefined) setValue(e.target.value);
        if (inputRef.current) _commonUtils.resolveOnChange(inputRef.current, e, onChange);
    };
    var handleKeyDown = function handleKeyDown(e) {
        if (onPressEnter && e.key === 'Enter') onPressEnter(e);
        onKeyDown === null || onKeyDown === void 0 || onKeyDown(e);
    };
    var handleFocus = function handleFocus(e) {
        setFocused(true);
        onFocus === null || onFocus === void 0 || onFocus(e);
    };
    var handleBlur = function handleBlur(e) {
        setFocused(false);
        onBlur === null || onBlur === void 0 || onBlur(e);
    };
    var handleReset = function handleReset(e) {
        setValue('');
        focus();
        if (inputRef.current) _commonUtils.resolveOnChange(inputRef.current, e, onChange);
    };
    var getInputElement = function getInputElement() {
        // Fix https://fb.me/react-unknown-prop
        var otherProps = _omitDefault.default(props, [
            'prefixCls',
            'onPressEnter',
            'addonBefore',
            'addonAfter',
            'prefix',
            'suffix',
            'allowClear',
            // specify either the value prop, or the defaultValue prop, but not both.
            'defaultValue',
            'showCount',
            'affixWrapperClassName',
            'groupClassName',
            'inputClassName',
            'wrapperClassName',
            'htmlSize'
        ]);
        return /*#__PURE__*/ _reactDefault.default.createElement("input", _objectSpread2Default.default(_objectSpread2Default.default({
            autoComplete: autoComplete
        }, otherProps), {}, {
            onChange: handleChange,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onKeyDown: handleKeyDown,
            className: _classnamesDefault.default(prefixCls, _definePropertyDefault.default({}, "".concat(prefixCls, "-disabled"), disabled), inputClassName, !_commonUtils.hasAddon(props) && !_commonUtils.hasPrefixSuffix(props) && className),
            ref: inputRef,
            size: htmlSize,
            type: type
        }));
    };
    var getSuffix = function getSuffix() {
        // Max length value
        var hasMaxLength = Number(maxLength) > 0;
        if (suffix || showCount) {
            var valueLength = _toConsumableArrayDefault.default(_commonUtils.fixControlledValue(value)).length;
            var dataCount = _typeofDefault.default(showCount) === 'object' ? showCount.formatter({
                count: valueLength,
                maxLength: maxLength
            }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : '');
            return /*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, !!showCount && /*#__PURE__*/ _reactDefault.default.createElement("span", {
                className: _classnamesDefault.default("".concat(prefixCls, "-show-count-suffix"), _definePropertyDefault.default({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix))
            }, dataCount), suffix);
        }
        return null;
    };
    return /*#__PURE__*/ _reactDefault.default.createElement(_baseInputDefault.default, _objectSpread2Default.default(_objectSpread2Default.default({}, rest), {}, {
        prefixCls: prefixCls,
        className: className,
        inputElement: getInputElement(),
        handleReset: handleReset,
        value: _commonUtils.fixControlledValue(value),
        focused: focused,
        triggerFocus: focus,
        suffix: getSuffix(),
        disabled: disabled
    }));
});
exports.default = Input;

},{"@babel/runtime/helpers/esm/typeof":"bgxCq","@babel/runtime/helpers/esm/toConsumableArray":"3mFQ6","@babel/runtime/helpers/esm/defineProperty":"dIbZx","@babel/runtime/helpers/esm/objectSpread2":"aKBZs","@babel/runtime/helpers/esm/slicedToArray":"9WfMt","@babel/runtime/helpers/esm/objectWithoutProperties":"7L6i1","react":"b4tPL","./BaseInput":"jqTdx","rc-util/es/omit":"9TJfY","./utils/commonUtils":"kOCHt","classnames":"dFgpN","rc-util/es/hooks/useMergedState":"jUfJa","@parcel/transformer-js/src/esmodule-helpers.js":"4z6iA"}],"1YOSh":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _CloseCircleFilled = _interopRequireDefault(require('./lib/icons/CloseCircleFilled'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _CloseCircleFilled;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/CloseCircleFilled":"ehy1a"}],"ehy1a":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _CloseCircleFilled = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/CloseCircleFilled"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var CloseCircleFilled = function CloseCircleFilled(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _CloseCircleFilled.default
    }));
};
CloseCircleFilled.displayName = 'CloseCircleFilled';
var _default = /*#__PURE__*/ React.forwardRef(CloseCircleFilled);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/CloseCircleFilled":"lK6qc","../components/AntdIcon":"8J0Vz"}],"lK6qc":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var CloseCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                }
            }
        ]
    },
    "name": "close-circle",
    "theme": "filled"
};
exports.default = CloseCircleFilled;

},{}],"GlbV5":[function(require,module,exports) {
"use strict";
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = exports.SizeContextProvider = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var SizeContext = /*#__PURE__*/ React.createContext(undefined);
var SizeContextProvider = function SizeContextProvider(_ref) {
    var children = _ref.children, size = _ref.size;
    return /*#__PURE__*/ React.createElement(SizeContext.Consumer, null, function(originSize) {
        return /*#__PURE__*/ React.createElement(SizeContext.Provider, {
            value: size || originSize
        }, children);
    });
};
exports.SizeContextProvider = SizeContextProvider;
var _default = SizeContext;
exports["default"] = _default;

},{"@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL"}],"k5MjJ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getMergedStatus = exports.getFeedbackIcon = void 0;
exports.getStatusClassNames = getStatusClassNames;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _CheckCircleFilled = _interopRequireDefault(require("@ant-design/icons/CheckCircleFilled"));
var _ExclamationCircleFilled = _interopRequireDefault(require("@ant-design/icons/ExclamationCircleFilled"));
var _CloseCircleFilled = _interopRequireDefault(require("@ant-design/icons/CloseCircleFilled"));
var _LoadingOutlined = _interopRequireDefault(require("@ant-design/icons/LoadingOutlined"));
var _classnames = _interopRequireDefault(require("classnames"));
var _type = require("./type");
var InputStatuses = (0, _type.tuple)('warning', 'error', '');
var iconMap = {
    success: _CheckCircleFilled["default"],
    warning: _ExclamationCircleFilled["default"],
    error: _CloseCircleFilled["default"],
    validating: _LoadingOutlined["default"]
};
var getFeedbackIcon = function getFeedbackIcon(prefixCls, status) {
    var IconNode = status && iconMap[status];
    return IconNode ? /*#__PURE__*/ _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-feedback-icon")
    }, /*#__PURE__*/ _react["default"].createElement(IconNode, null)) : null;
};
exports.getFeedbackIcon = getFeedbackIcon;
function getStatusClassNames(prefixCls, status, hasFeedback) {
    var _classNames;
    return (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-success"), status === 'success'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-warning"), status === 'warning'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-error"), status === 'error'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-validating"), status === 'validating'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-feedback"), hasFeedback), _classNames));
}
var getMergedStatus = function getMergedStatus(contextStatus, customStatus) {
    return customStatus || contextStatus;
};
exports.getMergedStatus = getMergedStatus;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","@ant-design/icons/CheckCircleFilled":"45OtL","@ant-design/icons/ExclamationCircleFilled":"dpcKI","@ant-design/icons/CloseCircleFilled":"1YOSh","@ant-design/icons/LoadingOutlined":"iQ4mv","classnames":"dFgpN","./type":"jqcwP"}],"45OtL":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _CheckCircleFilled = _interopRequireDefault(require('./lib/icons/CheckCircleFilled'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _CheckCircleFilled;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/CheckCircleFilled":"cWget"}],"cWget":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _CheckCircleFilled = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/CheckCircleFilled"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var CheckCircleFilled = function CheckCircleFilled(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _CheckCircleFilled.default
    }));
};
CheckCircleFilled.displayName = 'CheckCircleFilled';
var _default = /*#__PURE__*/ React.forwardRef(CheckCircleFilled);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/CheckCircleFilled":"7x5vB","../components/AntdIcon":"8J0Vz"}],"7x5vB":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var CheckCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"
                }
            }
        ]
    },
    "name": "check-circle",
    "theme": "filled"
};
exports.default = CheckCircleFilled;

},{}],"dpcKI":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _ExclamationCircleFilled = _interopRequireDefault(require('./lib/icons/ExclamationCircleFilled'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _ExclamationCircleFilled;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/ExclamationCircleFilled":"k04pQ"}],"k04pQ":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _ExclamationCircleFilled = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/ExclamationCircleFilled"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var ExclamationCircleFilled = function ExclamationCircleFilled(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _ExclamationCircleFilled.default
    }));
};
ExclamationCircleFilled.displayName = 'ExclamationCircleFilled';
var _default = /*#__PURE__*/ React.forwardRef(ExclamationCircleFilled);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/ExclamationCircleFilled":"dctli","../components/AntdIcon":"8J0Vz"}],"dctli":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ExclamationCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                }
            }
        ]
    },
    "name": "exclamation-circle",
    "theme": "filled"
};
exports.default = ExclamationCircleFilled;

},{}],"iQ4mv":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _LoadingOutlined = _interopRequireDefault(require('./lib/icons/LoadingOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _LoadingOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/LoadingOutlined":"eDSYR"}],"eDSYR":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _LoadingOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/LoadingOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var LoadingOutlined = function LoadingOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _LoadingOutlined.default
    }));
};
LoadingOutlined.displayName = 'LoadingOutlined';
var _default = /*#__PURE__*/ React.forwardRef(LoadingOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/LoadingOutlined":"lKzo4","../components/AntdIcon":"8J0Vz"}],"lKzo4":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var LoadingOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "0 0 1024 1024",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                }
            }
        ]
    },
    "name": "loading",
    "theme": "outlined"
};
exports.default = LoadingOutlined;

},{}],"jqcwP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tupleNum = exports.tuple = void 0;
// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead
var tuple = function tuple() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return args;
};
exports.tuple = tuple;
var tupleNum = function tupleNum() {
    for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
    return args;
};
exports.tupleNum = tupleNum;

},{}],"en4XD":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConfigConsumer", {
    enumerable: true,
    get: function get() {
        return _context.ConfigConsumer;
    }
});
Object.defineProperty(exports, "ConfigContext", {
    enumerable: true,
    get: function get() {
        return _context.ConfigContext;
    }
});
exports.globalConfig = exports.defaultPrefixCls = exports.defaultIconPrefixCls = exports["default"] = exports.configConsumerProps = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _Context = _interopRequireDefault(require("@ant-design/icons/lib/components/Context"));
var _rcFieldForm = require("rc-field-form");
var _useMemo = _interopRequireDefault(require("rc-util/lib/hooks/useMemo"));
var _localeProvider = _interopRequireWildcard(require("../locale-provider"));
var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));
var _context = require("./context");
var _SizeContext = _interopRequireWildcard(require("./SizeContext"));
var _message = _interopRequireDefault(require("../message"));
var _notification = _interopRequireDefault(require("../notification"));
var _cssVariables = require("./cssVariables");
var _default2 = _interopRequireDefault(require("../locale/default"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var configConsumerProps = [
    'getTargetContainer',
    'getPopupContainer',
    'rootPrefixCls',
    'getPrefixCls',
    'renderEmpty',
    'csp',
    'autoInsertSpaceInButton',
    'locale',
    'pageHeader'
]; // These props is used by `useContext` directly in sub component
exports.configConsumerProps = configConsumerProps;
var PASSED_PROPS = [
    'getTargetContainer',
    'getPopupContainer',
    'renderEmpty',
    'pageHeader',
    'input',
    'form'
];
var defaultPrefixCls = 'ant';
exports.defaultPrefixCls = defaultPrefixCls;
var defaultIconPrefixCls = 'anticon';
exports.defaultIconPrefixCls = defaultIconPrefixCls;
var globalPrefixCls;
var globalIconPrefixCls;
function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls;
}
function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
}
var setGlobalConfig = function setGlobalConfig(_ref) {
    var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, theme = _ref.theme;
    if (prefixCls !== undefined) globalPrefixCls = prefixCls;
    if (iconPrefixCls !== undefined) globalIconPrefixCls = iconPrefixCls;
    if (theme) (0, _cssVariables.registerTheme)(getGlobalPrefixCls(), theme);
};
var globalConfig = function globalConfig() {
    return {
        getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
            if (customizePrefixCls) return customizePrefixCls;
            return suffixCls ? "".concat(getGlobalPrefixCls(), "-").concat(suffixCls) : getGlobalPrefixCls();
        },
        getIconPrefixCls: getGlobalIconPrefixCls,
        getRootPrefixCls: function getRootPrefixCls(rootPrefixCls, customizePrefixCls) {
            // Customize rootPrefixCls is first priority
            if (rootPrefixCls) return rootPrefixCls;
             // If Global prefixCls provided, use this
            if (globalPrefixCls) return globalPrefixCls;
             // [Legacy] If customize prefixCls provided, we cut it to get the prefixCls
            if (customizePrefixCls && customizePrefixCls.includes('-')) return customizePrefixCls.replace(/^(.*)-[^-]*$/, '$1');
             // Fallback to default prefixCls
            return getGlobalPrefixCls();
        }
    };
};
exports.globalConfig = globalConfig;
var ProviderChildren = function ProviderChildren(props) {
    var _a, _b;
    var children = props.children, csp = props.csp, autoInsertSpaceInButton = props.autoInsertSpaceInButton, form = props.form, locale = props.locale, componentSize = props.componentSize, direction = props.direction, space = props.space, virtual = props.virtual, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, legacyLocale = props.legacyLocale, parentContext = props.parentContext, iconPrefixCls = props.iconPrefixCls;
    var getPrefixCls = React.useCallback(function(suffixCls, customizePrefixCls) {
        var prefixCls = props.prefixCls;
        if (customizePrefixCls) return customizePrefixCls;
        var mergedPrefixCls = prefixCls || parentContext.getPrefixCls('');
        return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [
        parentContext.getPrefixCls,
        props.prefixCls
    ]);
    var config = (0, _extends2["default"])((0, _extends2["default"])({}, parentContext), {
        csp: csp,
        autoInsertSpaceInButton: autoInsertSpaceInButton,
        locale: locale || legacyLocale,
        direction: direction,
        space: space,
        virtual: virtual,
        dropdownMatchSelectWidth: dropdownMatchSelectWidth,
        getPrefixCls: getPrefixCls
    }); // Pass the props used by `useContext` directly with child component.
    // These props should merged into `config`.
    PASSED_PROPS.forEach(function(propName) {
        var propValue = props[propName];
        if (propValue) config[propName] = propValue;
    }); // https://github.com/ant-design/ant-design/issues/27617
    var memoedConfig = (0, _useMemo["default"])(function() {
        return config;
    }, config, function(prevConfig, currentConfig) {
        var prevKeys = Object.keys(prevConfig);
        var currentKeys = Object.keys(currentConfig);
        return prevKeys.length !== currentKeys.length || prevKeys.some(function(key) {
            return prevConfig[key] !== currentConfig[key];
        });
    });
    var memoIconContextValue = React.useMemo(function() {
        return {
            prefixCls: iconPrefixCls,
            csp: csp
        };
    }, [
        iconPrefixCls,
        csp
    ]);
    var childNode = children; // Additional Form provider
    var validateMessages = {};
    if (locale) validateMessages = ((_a = locale.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || ((_b = _default2["default"].Form) === null || _b === void 0 ? void 0 : _b.defaultValidateMessages) || {};
    if (form && form.validateMessages) validateMessages = (0, _extends2["default"])((0, _extends2["default"])({}, validateMessages), form.validateMessages);
    if (Object.keys(validateMessages).length > 0) childNode = /*#__PURE__*/ React.createElement(_rcFieldForm.FormProvider, {
        validateMessages: validateMessages
    }, children);
    if (locale) childNode = /*#__PURE__*/ React.createElement(_localeProvider["default"], {
        locale: locale,
        _ANT_MARK__: _localeProvider.ANT_MARK
    }, childNode);
    if (iconPrefixCls || csp) childNode = /*#__PURE__*/ React.createElement(_Context["default"].Provider, {
        value: memoIconContextValue
    }, childNode);
    if (componentSize) childNode = /*#__PURE__*/ React.createElement(_SizeContext.SizeContextProvider, {
        size: componentSize
    }, childNode);
    return /*#__PURE__*/ React.createElement(_context.ConfigContext.Provider, {
        value: memoedConfig
    }, childNode);
};
var ConfigProvider = function ConfigProvider(props) {
    React.useEffect(function() {
        if (props.direction) {
            _message["default"].config({
                rtl: props.direction === 'rtl'
            });
            _notification["default"].config({
                rtl: props.direction === 'rtl'
            });
        }
    }, [
        props.direction
    ]);
    return /*#__PURE__*/ React.createElement(_LocaleReceiver["default"], null, function(_, __, legacyLocale) {
        return /*#__PURE__*/ React.createElement(_context.ConfigConsumer, null, function(context) {
            return /*#__PURE__*/ React.createElement(ProviderChildren, (0, _extends2["default"])({
                parentContext: context,
                legacyLocale: legacyLocale
            }, props));
        });
    });
};
/** @private internal Usage. do not use in your production */ ConfigProvider.ConfigContext = _context.ConfigContext;
ConfigProvider.SizeContext = _SizeContext["default"];
ConfigProvider.config = setGlobalConfig;
var _default = ConfigProvider;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","react":"b4tPL","@ant-design/icons/lib/components/Context":"lH6SI","rc-field-form":"khw17","rc-util/lib/hooks/useMemo":"kuQ5b","../locale-provider":"5F2Wy","../locale-provider/LocaleReceiver":"5moik","./context":"30OS9","./SizeContext":"GlbV5","../message":"jvq7L","../notification":"a3k5i","./cssVariables":"9O4j0","../locale/default":"bSy01"}],"5F2Wy":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = exports.ANT_MARK = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var React = _interopRequireWildcard(require("react"));
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _devWarning = _interopRequireDefault(require("../_util/devWarning"));
var _locale = require("../modal/locale");
var _context = _interopRequireDefault(require("./context"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var ANT_MARK = 'internalMark';
exports.ANT_MARK = ANT_MARK;
var LocaleProvider = /*#__PURE__*/ function(_React$Component) {
    (0, _inherits2["default"])(LocaleProvider1, _React$Component);
    var _super = (0, _createSuper2["default"])(LocaleProvider1);
    function LocaleProvider1(props) {
        var _this;
        (0, _classCallCheck2["default"])(this, LocaleProvider1);
        _this = _super.call(this, props);
        _this.getMemoizedContextValue = (0, _memoizeOne["default"])(function(localeValue) {
            return (0, _extends2["default"])((0, _extends2["default"])({}, localeValue), {
                exist: true
            });
        });
        (0, _locale.changeConfirmLocale)(props.locale && props.locale.Modal);
        (0, _devWarning["default"])(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale');
        return _this;
    }
    (0, _createClass2["default"])(LocaleProvider1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                (0, _locale.changeConfirmLocale)(this.props.locale && this.props.locale.Modal);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var locale = this.props.locale;
                if (prevProps.locale !== locale) (0, _locale.changeConfirmLocale)(locale && locale.Modal);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                (0, _locale.changeConfirmLocale)();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, locale = _this$props.locale, children = _this$props.children;
                var contextValue = this.getMemoizedContextValue(locale);
                return /*#__PURE__*/ React.createElement(_context["default"].Provider, {
                    value: contextValue
                }, children);
            }
        }
    ]);
    return LocaleProvider1;
}(React.Component);
exports["default"] = LocaleProvider;
LocaleProvider.defaultProps = {
    locale: {}
};

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/classCallCheck":"geBdr","@babel/runtime/helpers/createClass":"4rGRg","@babel/runtime/helpers/inherits":"3JGw3","@babel/runtime/helpers/createSuper":"RJN6l","react":"b4tPL","memoize-one":"cdCRd","../_util/devWarning":"2ZcNH","../modal/locale":"8TEkg","./context":"fCZut"}],"geBdr":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"4rGRg":[function(require,module,exports) {
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"3JGw3":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) setPrototypeOf(subClass, superClass);
}
module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./setPrototypeOf.js":"ipDqu"}],"ipDqu":[function(require,module,exports) {
function _setPrototypeOf(o1, p1) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o1, p1);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"RJN6l":[function(require,module,exports) {
var getPrototypeOf = require("./getPrototypeOf.js");
var isNativeReflectConstruct = require("./isNativeReflectConstruct.js");
var possibleConstructorReturn = require("./possibleConstructorReturn.js");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return possibleConstructorReturn(this, result);
    };
}
module.exports = _createSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./getPrototypeOf.js":"bp6hI","./isNativeReflectConstruct.js":"hHf7m","./possibleConstructorReturn.js":"7raJD"}],"bp6hI":[function(require,module,exports) {
function _getPrototypeOf(o1) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _getPrototypeOf(o1);
}
module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"hHf7m":[function(require,module,exports) {
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"7raJD":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];
var assertThisInitialized = require("./assertThisInitialized.js");
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return assertThisInitialized(self);
}
module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./typeof.js":"ew9pR","./assertThisInitialized.js":"1ksKt"}],"1ksKt":[function(require,module,exports) {
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"2ZcNH":[function(require,module,exports) {
"use strict";
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
Object.defineProperty(exports, "resetWarned", {
    enumerable: true,
    get: function get() {
        return _warning.resetWarned;
    }
});
var _warning = _interopRequireWildcard(require("rc-util/lib/warning"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var _default = function _default(valid, component, message) {
    (0, _warning["default"])(valid, "[antd: ".concat(component, "] ").concat(message));
};
exports["default"] = _default;

},{"@babel/runtime/helpers/typeof":"ew9pR","rc-util/lib/warning":"6xW49"}],"8TEkg":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.changeConfirmLocale = changeConfirmLocale;
exports.getConfirmLocale = getConfirmLocale;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _default = _interopRequireDefault(require("../locale/default"));
var runtimeLocale = (0, _extends2["default"])({}, _default["default"].Modal);
function changeConfirmLocale(newLocale) {
    if (newLocale) runtimeLocale = (0, _extends2["default"])((0, _extends2["default"])({}, runtimeLocale), newLocale);
    else runtimeLocale = (0, _extends2["default"])({}, _default["default"].Modal);
}
function getConfirmLocale() {
    return runtimeLocale;
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/extends":"gGTxl","../locale/default":"bSy01"}],"bSy01":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _en_US = _interopRequireDefault(require("rc-pagination/lib/locale/en_US"));
var _en_US2 = _interopRequireDefault(require("../date-picker/locale/en_US"));
var _en_US3 = _interopRequireDefault(require("../time-picker/locale/en_US"));
var _en_US4 = _interopRequireDefault(require("../calendar/locale/en_US"));
/* eslint-disable no-template-curly-in-string */ var typeTemplate = '${label} is not a valid ${type}';
var localeValues = {
    locale: 'en',
    Pagination: _en_US["default"],
    DatePicker: _en_US2["default"],
    TimePicker: _en_US3["default"],
    Calendar: _en_US4["default"],
    global: {
        placeholder: 'Please select'
    },
    Table: {
        filterTitle: 'Filter menu',
        filterConfirm: 'OK',
        filterReset: 'Reset',
        filterEmptyText: 'No filters',
        filterCheckall: 'Select all items',
        filterSearchPlaceholder: 'Search in filters',
        emptyText: 'No data',
        selectAll: 'Select current page',
        selectInvert: 'Invert current page',
        selectNone: 'Clear all data',
        selectionAll: 'Select all data',
        sortTitle: 'Sort',
        expand: 'Expand row',
        collapse: 'Collapse row',
        triggerDesc: 'Click to sort descending',
        triggerAsc: 'Click to sort ascending',
        cancelSort: 'Click to cancel sorting'
    },
    Modal: {
        okText: 'OK',
        cancelText: 'Cancel',
        justOkText: 'OK'
    },
    Popconfirm: {
        okText: 'OK',
        cancelText: 'Cancel'
    },
    Transfer: {
        titles: [
            '',
            ''
        ],
        searchPlaceholder: 'Search here',
        itemUnit: 'item',
        itemsUnit: 'items',
        remove: 'Remove',
        selectCurrent: 'Select current page',
        removeCurrent: 'Remove current page',
        selectAll: 'Select all data',
        removeAll: 'Remove all data',
        selectInvert: 'Invert current page'
    },
    Upload: {
        uploading: 'Uploading...',
        removeFile: 'Remove file',
        uploadError: 'Upload error',
        previewFile: 'Preview file',
        downloadFile: 'Download file'
    },
    Empty: {
        description: 'No Data'
    },
    Icon: {
        icon: 'icon'
    },
    Text: {
        edit: 'Edit',
        copy: 'Copy',
        copied: 'Copied',
        expand: 'Expand'
    },
    PageHeader: {
        back: 'Back'
    },
    Form: {
        optional: '(optional)',
        defaultValidateMessages: {
            "default": 'Field validation error for ${label}',
            required: 'Please enter ${label}',
            "enum": '${label} must be one of [${enum}]',
            whitespace: '${label} cannot be a blank character',
            date: {
                format: '${label} date format is invalid',
                parse: '${label} cannot be converted to a date',
                invalid: '${label} is an invalid date'
            },
            types: {
                string: typeTemplate,
                method: typeTemplate,
                array: typeTemplate,
                object: typeTemplate,
                number: typeTemplate,
                date: typeTemplate,
                "boolean": typeTemplate,
                integer: typeTemplate,
                "float": typeTemplate,
                regexp: typeTemplate,
                email: typeTemplate,
                url: typeTemplate,
                hex: typeTemplate
            },
            string: {
                len: '${label} must be ${len} characters',
                min: '${label} must be at least ${min} characters',
                max: '${label} must be up to ${max} characters',
                range: '${label} must be between ${min}-${max} characters'
            },
            number: {
                len: '${label} must be equal to ${len}',
                min: '${label} must be minimum ${min}',
                max: '${label} must be maximum ${max}',
                range: '${label} must be between ${min}-${max}'
            },
            array: {
                len: 'Must be ${len} ${label}',
                min: 'At least ${min} ${label}',
                max: 'At most ${max} ${label}',
                range: 'The amount of ${label} must be between ${min}-${max}'
            },
            pattern: {
                mismatch: '${label} does not match the pattern ${pattern}'
            }
        }
    },
    Image: {
        preview: 'Preview'
    }
};
var _default = localeValues;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","rc-pagination/lib/locale/en_US":"2t307","../date-picker/locale/en_US":"2BDLI","../time-picker/locale/en_US":"3v75a","../calendar/locale/en_US":"dqWak"}],"2t307":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _default = {
    // Options.jsx
    items_per_page: '/ page',
    jump_to: 'Go to',
    jump_to_confirm: 'confirm',
    page: 'Page',
    // Pagination.jsx
    prev_page: 'Previous Page',
    next_page: 'Next Page',
    prev_5: 'Previous 5 Pages',
    next_5: 'Next 5 Pages',
    prev_3: 'Previous 3 Pages',
    next_3: 'Next 3 Pages',
    page_size: 'Page Size'
};
exports.default = _default;

},{}],"2BDLI":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _en_US = _interopRequireDefault(require("rc-picker/lib/locale/en_US"));
var _en_US2 = _interopRequireDefault(require("../../time-picker/locale/en_US"));
// Merge into a locale object
var locale = {
    lang: (0, _extends2["default"])({
        placeholder: 'Select date',
        yearPlaceholder: 'Select year',
        quarterPlaceholder: 'Select quarter',
        monthPlaceholder: 'Select month',
        weekPlaceholder: 'Select week',
        rangePlaceholder: [
            'Start date',
            'End date'
        ],
        rangeYearPlaceholder: [
            'Start year',
            'End year'
        ],
        rangeQuarterPlaceholder: [
            'Start quarter',
            'End quarter'
        ],
        rangeMonthPlaceholder: [
            'Start month',
            'End month'
        ],
        rangeWeekPlaceholder: [
            'Start week',
            'End week'
        ]
    }, _en_US["default"]),
    timePickerLocale: (0, _extends2["default"])({}, _en_US2["default"])
}; // All settings at:
// https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json
var _default = locale;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/extends":"gGTxl","rc-picker/lib/locale/en_US":"jWoOr","../../time-picker/locale/en_US":"3v75a"}],"jWoOr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var locale = {
    locale: 'en_US',
    today: 'Today',
    now: 'Now',
    backToToday: 'Back to today',
    ok: 'Ok',
    clear: 'Clear',
    month: 'Month',
    year: 'Year',
    timeSelect: 'select time',
    dateSelect: 'select date',
    weekSelect: 'Choose a week',
    monthSelect: 'Choose a month',
    yearSelect: 'Choose a year',
    decadeSelect: 'Choose a decade',
    yearFormat: 'YYYY',
    dateFormat: 'M/D/YYYY',
    dayFormat: 'D',
    dateTimeFormat: 'M/D/YYYY HH:mm:ss',
    monthBeforeYear: true,
    previousMonth: 'Previous month (PageUp)',
    nextMonth: 'Next month (PageDown)',
    previousYear: 'Last year (Control + left)',
    nextYear: 'Next year (Control + right)',
    previousDecade: 'Last decade',
    nextDecade: 'Next decade',
    previousCentury: 'Last century',
    nextCentury: 'Next century'
};
var _default = locale;
exports.default = _default;

},{}],"3v75a":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var locale = {
    placeholder: 'Select time',
    rangePlaceholder: [
        'Start time',
        'End time'
    ]
};
var _default = locale;
exports["default"] = _default;

},{}],"dqWak":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _en_US = _interopRequireDefault(require("../../date-picker/locale/en_US"));
var _default = _en_US["default"];
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","../../date-picker/locale/en_US":"2BDLI"}],"fCZut":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _react = require("react");
var LocaleContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
var _default = LocaleContext;
exports["default"] = _default;

},{"react":"b4tPL"}],"5moik":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
exports.useLocaleReceiver = useLocaleReceiver;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var React = _interopRequireWildcard(require("react"));
var _default = _interopRequireDefault(require("./default"));
var _context = _interopRequireDefault(require("./context"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var LocaleReceiver = /*#__PURE__*/ function(_React$Component) {
    (0, _inherits2["default"])(LocaleReceiver1, _React$Component);
    var _super = (0, _createSuper2["default"])(LocaleReceiver1);
    function LocaleReceiver1() {
        (0, _classCallCheck2["default"])(this, LocaleReceiver1);
        return _super.apply(this, arguments);
    }
    (0, _createClass2["default"])(LocaleReceiver1, [
        {
            key: "getLocale",
            value: function getLocale() {
                var _this$props = this.props, componentName = _this$props.componentName, defaultLocale = _this$props.defaultLocale;
                var locale = defaultLocale || _default["default"][componentName !== null && componentName !== void 0 ? componentName : 'global'];
                var antLocale = this.context;
                var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
                return (0, _extends2["default"])((0, _extends2["default"])({}, locale instanceof Function ? locale() : locale), localeFromContext || {});
            }
        },
        {
            key: "getLocaleCode",
            value: function getLocaleCode() {
                var antLocale = this.context;
                var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale
                if (antLocale && antLocale.exist && !localeCode) return _default["default"].locale;
                return localeCode;
            }
        },
        {
            key: "render",
            value: function render() {
                return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
            }
        }
    ]);
    return LocaleReceiver1;
}(React.Component);
exports["default"] = LocaleReceiver;
LocaleReceiver.defaultProps = {
    componentName: 'global'
};
LocaleReceiver.contextType = _context["default"];
function useLocaleReceiver(componentName, defaultLocale) {
    var antLocale = React.useContext(_context["default"]);
    var componentLocale = React.useMemo(function() {
        var locale = defaultLocale || _default["default"][componentName || 'global'];
        var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
        return (0, _extends2["default"])((0, _extends2["default"])({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
    }, [
        componentName,
        defaultLocale,
        antLocale
    ]);
    return [
        componentLocale
    ];
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/classCallCheck":"geBdr","@babel/runtime/helpers/createClass":"4rGRg","@babel/runtime/helpers/inherits":"3JGw3","@babel/runtime/helpers/createSuper":"RJN6l","react":"b4tPL","./default":"9LbfB","./context":"fCZut"}],"9LbfB":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _default2 = _interopRequireDefault(require("../locale/default"));
var _default = _default2["default"];
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","../locale/default":"bSy01"}],"30OS9":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConfigContext = exports.ConfigConsumer = void 0;
exports.withConfigConsumer = withConfigConsumer;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _renderEmpty = _interopRequireDefault(require("./renderEmpty"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var defaultGetPrefixCls = function defaultGetPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : 'ant';
};
var ConfigContext = /*#__PURE__*/ React.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls,
    renderEmpty: _renderEmpty["default"]
});
exports.ConfigContext = ConfigContext;
var ConfigConsumer = ConfigContext.Consumer;
/** @deprecated Use hooks instead. This is a legacy function */ exports.ConfigConsumer = ConfigConsumer;
function withConfigConsumer(config) {
    return function withConfigConsumerFunc(Component) {
        // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods
        var SFC = function SFC(props) {
            return /*#__PURE__*/ React.createElement(ConfigConsumer, null, function(configProps) {
                var basicPrefixCls = config.prefixCls;
                var getPrefixCls = configProps.getPrefixCls;
                var customizePrefixCls = props.prefixCls;
                var prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);
                return /*#__PURE__*/ React.createElement(Component, (0, _extends2["default"])({}, configProps, props, {
                    prefixCls: prefixCls
                }));
            });
        };
        var cons = Component.constructor;
        var name = cons && cons.displayName || Component.name || 'Component';
        SFC.displayName = "withConfigConsumer(".concat(name, ")");
        return SFC;
    };
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","react":"b4tPL","./renderEmpty":"1RhkF"}],"1RhkF":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var React = _interopRequireWildcard(require("react"));
var _empty = _interopRequireDefault(require("../empty"));
var _ = require(".");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var renderEmpty = function renderEmpty(componentName) {
    return /*#__PURE__*/ React.createElement(_.ConfigConsumer, null, function(_ref) {
        var getPrefixCls = _ref.getPrefixCls;
        var prefix = getPrefixCls('empty');
        switch(componentName){
            case 'Table':
            case 'List':
                return /*#__PURE__*/ React.createElement(_empty["default"], {
                    image: _empty["default"].PRESENTED_IMAGE_SIMPLE
                });
            case 'Select':
            case 'TreeSelect':
            case 'Cascader':
            case 'Transfer':
            case 'Mentions':
                return /*#__PURE__*/ React.createElement(_empty["default"], {
                    image: _empty["default"].PRESENTED_IMAGE_SIMPLE,
                    className: "".concat(prefix, "-small")
                });
            default:
                return /*#__PURE__*/ React.createElement(_empty["default"], null);
        }
    });
};
var _default = renderEmpty;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL","../empty":"iq6gw",".":"en4XD"}],"iq6gw":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _configProvider = require("../config-provider");
var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));
var _empty = _interopRequireDefault(require("./empty"));
var _simple = _interopRequireDefault(require("./simple"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __rest = function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultEmptyImg = /*#__PURE__*/ React.createElement(_empty["default"], null);
var simpleEmptyImg = /*#__PURE__*/ React.createElement(_simple["default"], null);
var Empty = function Empty(_a) {
    var className = _a.className, customizePrefixCls = _a.prefixCls, _a$image = _a.image, image = _a$image === void 0 ? defaultEmptyImg : _a$image, description = _a.description, children = _a.children, imageStyle = _a.imageStyle, restProps = __rest(_a, [
        "className",
        "prefixCls",
        "image",
        "description",
        "children",
        "imageStyle"
    ]);
    var _React$useContext = React.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
    return /*#__PURE__*/ React.createElement(_LocaleReceiver["default"], {
        componentName: "Empty"
    }, function(locale) {
        var _classNames;
        var prefixCls = getPrefixCls('empty', customizePrefixCls);
        var des = typeof description !== 'undefined' ? description : locale.description;
        var alt = typeof des === 'string' ? des : 'empty';
        var imageNode = null;
        if (typeof image === 'string') imageNode = /*#__PURE__*/ React.createElement("img", {
            alt: alt,
            src: image
        });
        else imageNode = image;
        return /*#__PURE__*/ React.createElement("div", (0, _extends2["default"])({
            className: (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className)
        }, restProps), /*#__PURE__*/ React.createElement("div", {
            className: "".concat(prefixCls, "-image"),
            style: imageStyle
        }, imageNode), des && /*#__PURE__*/ React.createElement("div", {
            className: "".concat(prefixCls, "-description")
        }, des), children && /*#__PURE__*/ React.createElement("div", {
            className: "".concat(prefixCls, "-footer")
        }, children));
    });
};
Empty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
var _default = Empty;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","classnames":"dFgpN","../config-provider":"en4XD","../locale-provider/LocaleReceiver":"5moik","./empty":"54G0M","./simple":"jJmpk"}],"54G0M":[function(require,module,exports) {
"use strict";
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var React = _interopRequireWildcard(require("react"));
var _configProvider = require("../config-provider");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var Empty = function Empty() {
    var _React$useContext = React.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('empty-img-default');
    return /*#__PURE__*/ React.createElement("svg", {
        className: prefixCls,
        width: "184",
        height: "152",
        viewBox: "0 0 184 152",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ React.createElement("g", {
        fill: "none",
        fillRule: "evenodd"
    }, /*#__PURE__*/ React.createElement("g", {
        transform: "translate(24 31.67)"
    }, /*#__PURE__*/ React.createElement("ellipse", {
        className: "".concat(prefixCls, "-ellipse"),
        cx: "67.797",
        cy: "106.89",
        rx: "67.797",
        ry: "12.668"
    }), /*#__PURE__*/ React.createElement("path", {
        className: "".concat(prefixCls, "-path-1"),
        d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
    }), /*#__PURE__*/ React.createElement("path", {
        className: "".concat(prefixCls, "-path-2"),
        d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
        transform: "translate(13.56)"
    }), /*#__PURE__*/ React.createElement("path", {
        className: "".concat(prefixCls, "-path-3"),
        d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
    }), /*#__PURE__*/ React.createElement("path", {
        className: "".concat(prefixCls, "-path-4"),
        d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
    })), /*#__PURE__*/ React.createElement("path", {
        className: "".concat(prefixCls, "-path-5"),
        d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
    }), /*#__PURE__*/ React.createElement("g", {
        className: "".concat(prefixCls, "-g"),
        transform: "translate(149.65 15.383)"
    }, /*#__PURE__*/ React.createElement("ellipse", {
        cx: "20.654",
        cy: "3.167",
        rx: "2.849",
        ry: "2.815"
    }), /*#__PURE__*/ React.createElement("path", {
        d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
};
var _default = Empty;
exports["default"] = _default;

},{"@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL","../config-provider":"en4XD"}],"jJmpk":[function(require,module,exports) {
"use strict";
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var React = _interopRequireWildcard(require("react"));
var _configProvider = require("../config-provider");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var Simple = function Simple() {
    var _React$useContext = React.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls;
    var prefixCls = getPrefixCls('empty-img-simple');
    return /*#__PURE__*/ React.createElement("svg", {
        className: prefixCls,
        width: "64",
        height: "41",
        viewBox: "0 0 64 41",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ React.createElement("g", {
        transform: "translate(0 1)",
        fill: "none",
        fillRule: "evenodd"
    }, /*#__PURE__*/ React.createElement("ellipse", {
        className: "".concat(prefixCls, "-ellipse"),
        cx: "32",
        cy: "33",
        rx: "32",
        ry: "7"
    }), /*#__PURE__*/ React.createElement("g", {
        className: "".concat(prefixCls, "-g"),
        fillRule: "nonzero"
    }, /*#__PURE__*/ React.createElement("path", {
        d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /*#__PURE__*/ React.createElement("path", {
        d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
        className: "".concat(prefixCls, "-path")
    }))));
};
var _default = Simple;
exports["default"] = _default;

},{"@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL","../config-provider":"en4XD"}],"jvq7L":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.attachTypeApi = attachTypeApi;
exports.getInstance = exports["default"] = void 0;
exports.getKeyThenIncreaseKey = getKeyThenIncreaseKey;
exports.typeList = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _rcNotification = _interopRequireDefault(require("rc-notification"));
var _LoadingOutlined = _interopRequireDefault(require("@ant-design/icons/LoadingOutlined"));
var _ExclamationCircleFilled = _interopRequireDefault(require("@ant-design/icons/ExclamationCircleFilled"));
var _CloseCircleFilled = _interopRequireDefault(require("@ant-design/icons/CloseCircleFilled"));
var _CheckCircleFilled = _interopRequireDefault(require("@ant-design/icons/CheckCircleFilled"));
var _InfoCircleFilled = _interopRequireDefault(require("@ant-design/icons/InfoCircleFilled"));
var _useMessage = _interopRequireDefault(require("./hooks/useMessage"));
var _configProvider = _interopRequireWildcard(require("../config-provider"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key1 in obj)if (key1 !== "default" && Object.prototype.hasOwnProperty.call(obj, key1)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key1) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key1, desc);
        else newObj[key1] = obj[key1];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var messageInstance;
var defaultDuration = 3;
var defaultTop;
var key = 1;
var localPrefixCls = '';
var transitionName = 'move-up';
var hasTransitionName = false;
var getContainer;
var maxCount;
var rtl = false;
function getKeyThenIncreaseKey() {
    return key++;
}
function setMessageConfig(options) {
    if (options.top !== undefined) {
        defaultTop = options.top;
        messageInstance = null; // delete messageInstance for new defaultTop
    }
    if (options.duration !== undefined) defaultDuration = options.duration;
    if (options.prefixCls !== undefined) localPrefixCls = options.prefixCls;
    if (options.getContainer !== undefined) {
        getContainer = options.getContainer;
        messageInstance = null; // delete messageInstance for new getContainer
    }
    if (options.transitionName !== undefined) {
        transitionName = options.transitionName;
        messageInstance = null; // delete messageInstance for new transitionName
        hasTransitionName = true;
    }
    if (options.maxCount !== undefined) {
        maxCount = options.maxCount;
        messageInstance = null;
    }
    if (options.rtl !== undefined) rtl = options.rtl;
}
function getRCNotificationInstance(args, callback) {
    var customizePrefixCls = args.prefixCls, getContextPopupContainer = args.getPopupContainer;
    var _globalConfig = (0, _configProvider.globalConfig)(), getPrefixCls = _globalConfig.getPrefixCls, getRootPrefixCls = _globalConfig.getRootPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls('message', customizePrefixCls || localPrefixCls);
    var rootPrefixCls = getRootPrefixCls(args.rootPrefixCls, prefixCls);
    var iconPrefixCls = getIconPrefixCls();
    if (messageInstance) {
        callback({
            prefixCls: prefixCls,
            rootPrefixCls: rootPrefixCls,
            iconPrefixCls: iconPrefixCls,
            instance: messageInstance
        });
        return;
    }
    var instanceConfig = {
        prefixCls: prefixCls,
        transitionName: hasTransitionName ? transitionName : "".concat(rootPrefixCls, "-").concat(transitionName),
        style: {
            top: defaultTop
        },
        getContainer: getContainer || getContextPopupContainer,
        maxCount: maxCount
    };
    _rcNotification["default"].newInstance(instanceConfig, function(instance) {
        if (messageInstance) {
            callback({
                prefixCls: prefixCls,
                rootPrefixCls: rootPrefixCls,
                iconPrefixCls: iconPrefixCls,
                instance: messageInstance
            });
            return;
        }
        messageInstance = instance;
        callback({
            prefixCls: prefixCls,
            rootPrefixCls: rootPrefixCls,
            iconPrefixCls: iconPrefixCls,
            instance: instance
        });
    });
}
var typeToIcon = {
    info: _InfoCircleFilled["default"],
    success: _CheckCircleFilled["default"],
    error: _CloseCircleFilled["default"],
    warning: _ExclamationCircleFilled["default"],
    loading: _LoadingOutlined["default"]
};
var typeList = Object.keys(typeToIcon);
exports.typeList = typeList;
function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var _classNames;
    var duration = args.duration !== undefined ? args.duration : defaultDuration;
    var IconComponent = typeToIcon[args.type];
    var messageClass = (0, _classnames["default"])("".concat(prefixCls, "-custom-content"), (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
    return {
        key: args.key,
        duration: duration,
        style: args.style || {},
        className: args.className,
        content: /*#__PURE__*/ React.createElement(_configProvider["default"], {
            iconPrefixCls: iconPrefixCls
        }, /*#__PURE__*/ React.createElement("div", {
            className: messageClass
        }, args.icon || IconComponent && /*#__PURE__*/ React.createElement(IconComponent, null), /*#__PURE__*/ React.createElement("span", null, args.content))),
        onClose: args.onClose,
        onClick: args.onClick
    };
}
function notice(args) {
    var target = args.key || getKeyThenIncreaseKey();
    var closePromise = new Promise(function(resolve) {
        var callback = function callback() {
            if (typeof args.onClose === 'function') args.onClose();
            return resolve(true);
        };
        getRCNotificationInstance(args, function(_ref) {
            var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
            instance.notice(getRCNoticeProps((0, _extends2["default"])((0, _extends2["default"])({}, args), {
                key: target,
                onClose: callback
            }), prefixCls, iconPrefixCls));
        });
    });
    var result = function result() {
        if (messageInstance) messageInstance.removeNotice(target);
    };
    result.then = function(filled, rejected) {
        return closePromise.then(filled, rejected);
    };
    result.promise = closePromise;
    return result;
}
function isArgsProps(content) {
    return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
}
var api = {
    open: notice,
    config: setMessageConfig,
    destroy: function destroy(messageKey) {
        if (messageInstance) {
            if (messageKey) {
                var _messageInstance = messageInstance, removeNotice = _messageInstance.removeNotice;
                removeNotice(messageKey);
            } else {
                var _messageInstance2 = messageInstance, destroy = _messageInstance2.destroy;
                destroy();
                messageInstance = null;
            }
        }
    }
};
function attachTypeApi(originalApi, type) {
    originalApi[type] = function(content, duration, onClose) {
        if (isArgsProps(content)) return originalApi.open((0, _extends2["default"])((0, _extends2["default"])({}, content), {
            type: type
        }));
        if (typeof duration === 'function') {
            onClose = duration;
            duration = undefined;
        }
        return originalApi.open({
            content: content,
            duration: duration,
            type: type,
            onClose: onClose
        });
    };
}
typeList.forEach(function(type) {
    return attachTypeApi(api, type);
});
api.warn = api.warning;
api.useMessage = (0, _useMessage["default"])(getRCNotificationInstance, getRCNoticeProps);
/** @private test Only function. Not work on production */ var getInstance = function getInstance() {
    return null;
};
exports.getInstance = getInstance;
var _default = api;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","classnames":"dFgpN","rc-notification":"gjTsj","@ant-design/icons/LoadingOutlined":"iQ4mv","@ant-design/icons/ExclamationCircleFilled":"dpcKI","@ant-design/icons/CloseCircleFilled":"1YOSh","@ant-design/icons/CheckCircleFilled":"45OtL","@ant-design/icons/InfoCircleFilled":"fSaWX","./hooks/useMessage":"1iUmn","../config-provider":"en4XD"}],"fSaWX":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _InfoCircleFilled = _interopRequireDefault(require('./lib/icons/InfoCircleFilled'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _InfoCircleFilled;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/InfoCircleFilled":"bMadv"}],"bMadv":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _InfoCircleFilled = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/InfoCircleFilled"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var InfoCircleFilled = function InfoCircleFilled(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _InfoCircleFilled.default
    }));
};
InfoCircleFilled.displayName = 'InfoCircleFilled';
var _default = /*#__PURE__*/ React.forwardRef(InfoCircleFilled);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/InfoCircleFilled":"2qHtv","../components/AntdIcon":"8J0Vz"}],"2qHtv":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var InfoCircleFilled = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                }
            }
        ]
    },
    "name": "info-circle",
    "theme": "filled"
};
exports.default = InfoCircleFilled;

},{}],"1iUmn":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = createUseMessage;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _useNotification = _interopRequireDefault(require("rc-notification/lib/useNotification"));
var _configProvider = require("../../config-provider");
var _ = require("..");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {
    var useMessage = function useMessage() {
        // We can only get content by render
        var getPrefixCls;
        var getPopupContainer; // We create a proxy to handle delay created instance
        var innerInstance = null;
        var proxy = {
            add: function add(noticeProps, holderCallback) {
                innerInstance === null || innerInstance === void 0 || innerInstance.component.add(noticeProps, holderCallback);
            }
        };
        var _useRCNotification = (0, _useNotification["default"])(proxy), _useRCNotification2 = (0, _slicedToArray2["default"])(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
        function notify(args) {
            var customizePrefixCls = args.prefixCls;
            var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);
            var rootPrefixCls = getPrefixCls();
            var target = args.key || (0, _.getKeyThenIncreaseKey)();
            var closePromise = new Promise(function(resolve) {
                var callback = function callback() {
                    if (typeof args.onClose === 'function') args.onClose();
                    return resolve(true);
                };
                getRcNotificationInstance((0, _extends2["default"])((0, _extends2["default"])({}, args), {
                    prefixCls: mergedPrefixCls,
                    rootPrefixCls: rootPrefixCls,
                    getPopupContainer: getPopupContainer
                }), function(_ref) {
                    var prefixCls = _ref.prefixCls, instance = _ref.instance;
                    innerInstance = instance;
                    hookNotify(getRCNoticeProps((0, _extends2["default"])((0, _extends2["default"])({}, args), {
                        key: target,
                        onClose: callback
                    }), prefixCls));
                });
            });
            var result = function result() {
                if (innerInstance) innerInstance.removeNotice(target);
            };
            result.then = function(filled, rejected) {
                return closePromise.then(filled, rejected);
            };
            result.promise = closePromise;
            return result;
        } // Fill functions
        var hookApiRef = React.useRef({});
        hookApiRef.current.open = notify;
        _.typeList.forEach(function(type) {
            return (0, _.attachTypeApi)(hookApiRef.current, type);
        });
        return [
            hookApiRef.current,
            /*#__PURE__*/ React.createElement(_configProvider.ConfigConsumer, {
                key: "holder"
            }, function(context) {
                getPrefixCls = context.getPrefixCls;
                getPopupContainer = context.getPopupContainer;
                return holder;
            })
        ];
    };
    return useMessage;
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/slicedToArray":"iAocj","react":"b4tPL","rc-notification/lib/useNotification":"lbgAD","../../config-provider":"en4XD","..":"jvq7L"}],"lbgAD":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useNotification;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _Notice = _interopRequireDefault(require("./Notice"));
function useNotification(notificationInstance) {
    var createdRef = React.useRef({});
    var _React$useState = React.useState([]), _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2), elements = _React$useState2[0], setElements = _React$useState2[1];
    function notify(noticeProps) {
        var firstMount = true;
        notificationInstance.add(noticeProps, function(div, props) {
            var key = props.key;
            if (div && (!createdRef.current[key] || firstMount)) {
                var noticeEle = /*#__PURE__*/ React.createElement(_Notice.default, (0, _extends2.default)({}, props, {
                    holder: div
                }));
                createdRef.current[key] = noticeEle;
                setElements(function(originElements) {
                    var index = originElements.findIndex(function(ele) {
                        return ele.key === props.key;
                    });
                    if (index === -1) return [].concat((0, _toConsumableArray2.default)(originElements), [
                        noticeEle
                    ]);
                    var cloneList = (0, _toConsumableArray2.default)(originElements);
                    cloneList[index] = noticeEle;
                    return cloneList;
                });
            }
            firstMount = false;
        });
    }
    return [
        notify,
        /*#__PURE__*/ React.createElement(React.Fragment, null, elements)
    ];
}

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/toConsumableArray":"755Eg","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/slicedToArray":"iAocj","react":"b4tPL","./Notice":"a3McI"}],"755Eg":[function(require,module,exports) {
var arrayWithoutHoles = require("./arrayWithoutHoles.js");
var iterableToArray = require("./iterableToArray.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableSpread = require("./nonIterableSpread.js");
function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./arrayWithoutHoles.js":"4XWdf","./iterableToArray.js":"6hSVA","./unsupportedIterableToArray.js":"idadU","./nonIterableSpread.js":"3khcg"}],"4XWdf":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"./arrayLikeToArray.js":"5rjYV"}],"6hSVA":[function(require,module,exports) {
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"3khcg":[function(require,module,exports) {
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"a3McI":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var React = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _classnames = _interopRequireDefault(require("classnames"));
var Notice = /*#__PURE__*/ function(_Component) {
    (0, _inherits2.default)(Notice1, _Component);
    var _super = (0, _createSuper2.default)(Notice1);
    function Notice1() {
        var _this;
        (0, _classCallCheck2.default)(this, Notice1);
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _super.call.apply(_super, [
            this
        ].concat(args));
        _this.closeTimer = null;
        _this.close = function(e) {
            if (e) e.stopPropagation();
            _this.clearCloseTimer();
            var _this$props = _this.props, onClose = _this$props.onClose, noticeKey = _this$props.noticeKey;
            if (onClose) onClose(noticeKey);
        };
        _this.startCloseTimer = function() {
            if (_this.props.duration) _this.closeTimer = window.setTimeout(function() {
                _this.close();
            }, _this.props.duration * 1000);
        };
        _this.clearCloseTimer = function() {
            if (_this.closeTimer) {
                clearTimeout(_this.closeTimer);
                _this.closeTimer = null;
            }
        };
        return _this;
    }
    (0, _createClass2.default)(Notice1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.startCloseTimer();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || this.props.visible !== prevProps.visible && this.props.visible) this.restartCloseTimer();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.clearCloseTimer();
            }
        },
        {
            key: "restartCloseTimer",
            value: function restartCloseTimer() {
                this.clearCloseTimer();
                this.startCloseTimer();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this2 = this;
                var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, closable = _this$props2.closable, closeIcon = _this$props2.closeIcon, style = _this$props2.style, onClick = _this$props2.onClick, children = _this$props2.children, holder = _this$props2.holder;
                var componentClass = "".concat(prefixCls, "-notice");
                var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function(acc, key) {
                    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') acc[key] = _this2.props[key];
                    return acc;
                }, {});
                var node = /*#__PURE__*/ React.createElement("div", (0, _extends2.default)({
                    className: (0, _classnames.default)(componentClass, className, (0, _defineProperty2.default)({}, "".concat(componentClass, "-closable"), closable)),
                    style: style,
                    onMouseEnter: this.clearCloseTimer,
                    onMouseLeave: this.startCloseTimer,
                    onClick: onClick
                }, dataOrAriaAttributeProps), /*#__PURE__*/ React.createElement("div", {
                    className: "".concat(componentClass, "-content")
                }, children), closable ? /*#__PURE__*/ React.createElement("a", {
                    tabIndex: 0,
                    onClick: this.close,
                    className: "".concat(componentClass, "-close")
                }, closeIcon || /*#__PURE__*/ React.createElement("span", {
                    className: "".concat(componentClass, "-close-x")
                })) : null);
                if (holder) return /*#__PURE__*/ _reactDom.default.createPortal(node, holder);
                return node;
            }
        }
    ]);
    return Notice1;
}(React.Component);
exports.default = Notice;
Notice.defaultProps = {
    onClose: function onClose() {},
    duration: 1.5
};

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","@babel/runtime/helpers/classCallCheck":"geBdr","@babel/runtime/helpers/createClass":"4rGRg","@babel/runtime/helpers/inherits":"3JGw3","@babel/runtime/helpers/createSuper":"RJN6l","react":"b4tPL","react-dom":"hKAbJ","classnames":"dFgpN"}],"a3k5i":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getInstance = exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _rcNotification = _interopRequireDefault(require("rc-notification"));
var _CloseOutlined = _interopRequireDefault(require("@ant-design/icons/CloseOutlined"));
var _classnames = _interopRequireDefault(require("classnames"));
var _CheckCircleOutlined = _interopRequireDefault(require("@ant-design/icons/CheckCircleOutlined"));
var _CloseCircleOutlined = _interopRequireDefault(require("@ant-design/icons/CloseCircleOutlined"));
var _ExclamationCircleOutlined = _interopRequireDefault(require("@ant-design/icons/ExclamationCircleOutlined"));
var _InfoCircleOutlined = _interopRequireDefault(require("@ant-design/icons/InfoCircleOutlined"));
var _useNotification = _interopRequireDefault(require("./hooks/useNotification"));
var _configProvider = _interopRequireWildcard(require("../config-provider"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPrefixCls = '';
var defaultPlacement = 'topRight';
var defaultGetContainer;
var defaultCloseIcon;
var rtl = false;
var maxCount;
function setNotificationConfig(options) {
    var duration = options.duration, placement = options.placement, bottom = options.bottom, top = options.top, getContainer = options.getContainer, closeIcon = options.closeIcon, prefixCls = options.prefixCls;
    if (prefixCls !== undefined) defaultPrefixCls = prefixCls;
    if (duration !== undefined) defaultDuration = duration;
    if (placement !== undefined) defaultPlacement = placement;
    else if (options.rtl) defaultPlacement = 'topLeft';
    if (bottom !== undefined) defaultBottom = bottom;
    if (top !== undefined) defaultTop = top;
    if (getContainer !== undefined) defaultGetContainer = getContainer;
    if (closeIcon !== undefined) defaultCloseIcon = closeIcon;
    if (options.rtl !== undefined) rtl = options.rtl;
    if (options.maxCount !== undefined) maxCount = options.maxCount;
}
function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;
    var style;
    switch(placement){
        case 'top':
            style = {
                left: '50%',
                transform: 'translateX(-50%)',
                right: 'auto',
                top: top,
                bottom: 'auto'
            };
            break;
        case 'topLeft':
            style = {
                left: 0,
                top: top,
                bottom: 'auto'
            };
            break;
        case 'topRight':
            style = {
                right: 0,
                top: top,
                bottom: 'auto'
            };
            break;
        case 'bottom':
            style = {
                left: '50%',
                transform: 'translateX(-50%)',
                right: 'auto',
                top: 'auto',
                bottom: bottom
            };
            break;
        case 'bottomLeft':
            style = {
                left: 0,
                top: 'auto',
                bottom: bottom
            };
            break;
        default:
            style = {
                right: 0,
                top: 'auto',
                bottom: bottom
            };
            break;
    }
    return style;
}
function getNotificationInstance(args, callback) {
    var _args$placement = args.placement, placement = _args$placement === void 0 ? defaultPlacement : _args$placement, top = args.top, bottom = args.bottom, _args$getContainer = args.getContainer, getContainer = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer, customizePrefixCls = args.prefixCls;
    var _globalConfig = (0, _configProvider.globalConfig)(), getPrefixCls = _globalConfig.getPrefixCls, getIconPrefixCls = _globalConfig.getIconPrefixCls;
    var prefixCls = getPrefixCls('notification', customizePrefixCls || defaultPrefixCls);
    var iconPrefixCls = getIconPrefixCls();
    var cacheKey = "".concat(prefixCls, "-").concat(placement);
    var cacheInstance = notificationInstance[cacheKey];
    if (cacheInstance) {
        Promise.resolve(cacheInstance).then(function(instance) {
            callback({
                prefixCls: "".concat(prefixCls, "-notice"),
                iconPrefixCls: iconPrefixCls,
                instance: instance
            });
        });
        return;
    }
    var notificationClass = (0, _classnames["default"])("".concat(prefixCls, "-").concat(placement), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-rtl"), rtl === true));
    notificationInstance[cacheKey] = new Promise(function(resolve) {
        _rcNotification["default"].newInstance({
            prefixCls: prefixCls,
            className: notificationClass,
            style: getPlacementStyle(placement, top, bottom),
            getContainer: getContainer,
            maxCount: maxCount
        }, function(notification) {
            resolve(notification);
            callback({
                prefixCls: "".concat(prefixCls, "-notice"),
                iconPrefixCls: iconPrefixCls,
                instance: notification
            });
        });
    });
}
var typeToIcon = {
    success: _CheckCircleOutlined["default"],
    info: _InfoCircleOutlined["default"],
    error: _CloseCircleOutlined["default"],
    warning: _ExclamationCircleOutlined["default"]
};
function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var durationArg = args.duration, icon = args.icon, type = args.type, description = args.description, message = args.message, btn = args.btn, onClose = args.onClose, onClick = args.onClick, key = args.key, style = args.style, className = args.className, _args$closeIcon = args.closeIcon, closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;
    var duration = durationArg === undefined ? defaultDuration : durationArg;
    var iconNode = null;
    if (icon) iconNode = /*#__PURE__*/ React.createElement("span", {
        className: "".concat(prefixCls, "-icon")
    }, args.icon);
    else if (type) iconNode = /*#__PURE__*/ React.createElement(typeToIcon[type] || null, {
        className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(type)
    });
    var closeIconToRender = /*#__PURE__*/ React.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /*#__PURE__*/ React.createElement(_CloseOutlined["default"], {
        className: "".concat(prefixCls, "-close-icon")
    }));
    var autoMarginTag = !description && iconNode ? /*#__PURE__*/ React.createElement("span", {
        className: "".concat(prefixCls, "-message-single-line-auto-margin")
    }) : null;
    return {
        content: /*#__PURE__*/ React.createElement(_configProvider["default"], {
            iconPrefixCls: iconPrefixCls
        }, /*#__PURE__*/ React.createElement("div", {
            className: iconNode ? "".concat(prefixCls, "-with-icon") : '',
            role: "alert"
        }, iconNode, /*#__PURE__*/ React.createElement("div", {
            className: "".concat(prefixCls, "-message")
        }, autoMarginTag, message), /*#__PURE__*/ React.createElement("div", {
            className: "".concat(prefixCls, "-description")
        }, description), btn ? /*#__PURE__*/ React.createElement("span", {
            className: "".concat(prefixCls, "-btn")
        }, btn) : null)),
        duration: duration,
        closable: true,
        closeIcon: closeIconToRender,
        onClose: onClose,
        onClick: onClick,
        key: key,
        style: style || {},
        className: (0, _classnames["default"])(className, (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-").concat(type), !!type))
    };
}
function notice(args) {
    getNotificationInstance(args, function(_ref) {
        var prefixCls = _ref.prefixCls, iconPrefixCls = _ref.iconPrefixCls, instance = _ref.instance;
        instance.notice(getRCNoticeProps(args, prefixCls, iconPrefixCls));
    });
}
var api = {
    open: notice,
    close: function close(key) {
        Object.keys(notificationInstance).forEach(function(cacheKey) {
            return Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
                instance.removeNotice(key);
            });
        });
    },
    config: setNotificationConfig,
    destroy: function destroy() {
        Object.keys(notificationInstance).forEach(function(cacheKey) {
            Promise.resolve(notificationInstance[cacheKey]).then(function(instance) {
                instance.destroy();
            });
            delete notificationInstance[cacheKey]; // lgtm[js/missing-await]
        });
    }
};
[
    'success',
    'info',
    'warning',
    'error'
].forEach(function(type) {
    api[type] = function(args) {
        return api.open((0, _extends2["default"])((0, _extends2["default"])({}, args), {
            type: type
        }));
    };
});
api.warn = api.warning;
api.useNotification = (0, _useNotification["default"])(getNotificationInstance, getRCNoticeProps);
/** @private test Only function. Not work on production */ var getInstance = function getInstance(cacheKey) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/ _regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
            while(true)switch(_context.prev = _context.next){
                case 0:
                    return _context.abrupt("return", null);
                case 1:
                case "end":
                    return _context.stop();
            }
        }, _callee);
    }));
};
exports.getInstance = getInstance;
var _default = api;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/regenerator":"hhhh4","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","rc-notification":"gjTsj","@ant-design/icons/CloseOutlined":"3MqKe","classnames":"dFgpN","@ant-design/icons/CheckCircleOutlined":"kdTDf","@ant-design/icons/CloseCircleOutlined":"jCGt8","@ant-design/icons/ExclamationCircleOutlined":"5NwVr","@ant-design/icons/InfoCircleOutlined":"77cDX","./hooks/useNotification":"813ZQ","../config-provider":"en4XD"}],"3MqKe":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _CloseOutlined = _interopRequireDefault(require('./lib/icons/CloseOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _CloseOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/CloseOutlined":"jw39E"}],"jw39E":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _CloseOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/CloseOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var CloseOutlined = function CloseOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _CloseOutlined.default
    }));
};
CloseOutlined.displayName = 'CloseOutlined';
var _default = /*#__PURE__*/ React.forwardRef(CloseOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/CloseOutlined":"hjTbG","../components/AntdIcon":"8J0Vz"}],"hjTbG":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var CloseOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                }
            }
        ]
    },
    "name": "close",
    "theme": "outlined"
};
exports.default = CloseOutlined;

},{}],"kdTDf":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _CheckCircleOutlined = _interopRequireDefault(require('./lib/icons/CheckCircleOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _CheckCircleOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/CheckCircleOutlined":"jgmUp"}],"jgmUp":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _CheckCircleOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/CheckCircleOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var CheckCircleOutlined = function CheckCircleOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _CheckCircleOutlined.default
    }));
};
CheckCircleOutlined.displayName = 'CheckCircleOutlined';
var _default = /*#__PURE__*/ React.forwardRef(CheckCircleOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/CheckCircleOutlined":"kOfIT","../components/AntdIcon":"8J0Vz"}],"kOfIT":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var CheckCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            }
        ]
    },
    "name": "check-circle",
    "theme": "outlined"
};
exports.default = CheckCircleOutlined;

},{}],"jCGt8":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _CloseCircleOutlined = _interopRequireDefault(require('./lib/icons/CloseCircleOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _CloseCircleOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/CloseCircleOutlined":"4bgFR"}],"4bgFR":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _CloseCircleOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/CloseCircleOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var CloseCircleOutlined = function CloseCircleOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _CloseCircleOutlined.default
    }));
};
CloseCircleOutlined.displayName = 'CloseCircleOutlined';
var _default = /*#__PURE__*/ React.forwardRef(CloseCircleOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/CloseCircleOutlined":"cYjBn","../components/AntdIcon":"8J0Vz"}],"cYjBn":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var CloseCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            }
        ]
    },
    "name": "close-circle",
    "theme": "outlined"
};
exports.default = CloseCircleOutlined;

},{}],"5NwVr":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _ExclamationCircleOutlined = _interopRequireDefault(require('./lib/icons/ExclamationCircleOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _ExclamationCircleOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/ExclamationCircleOutlined":"1fy6V"}],"1fy6V":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _ExclamationCircleOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/ExclamationCircleOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _ExclamationCircleOutlined.default
    }));
};
ExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';
var _default = /*#__PURE__*/ React.forwardRef(ExclamationCircleOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/ExclamationCircleOutlined":"8C0Vg","../components/AntdIcon":"8J0Vz"}],"8C0Vg":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ExclamationCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                }
            }
        ]
    },
    "name": "exclamation-circle",
    "theme": "outlined"
};
exports.default = ExclamationCircleOutlined;

},{}],"77cDX":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _InfoCircleOutlined = _interopRequireDefault(require('./lib/icons/InfoCircleOutlined'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        'default': obj
    };
}
var _default = _InfoCircleOutlined;
exports.default = _default;
module.exports = _default;

},{"./lib/icons/InfoCircleOutlined":"hhuOR"}],"hhuOR":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var React = _interopRequireWildcard(require("react"));
var _InfoCircleOutlined = _interopRequireDefault(require("@ant-design/icons-svg/lib/asn/InfoCircleOutlined"));
var _AntdIcon = _interopRequireDefault(require("../components/AntdIcon"));
// GENERATE BY ./scripts/generate.ts
// DON NOT EDIT IT MANUALLY
var InfoCircleOutlined = function InfoCircleOutlined(props, ref) {
    return /*#__PURE__*/ React.createElement(_AntdIcon.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
        ref: ref,
        icon: _InfoCircleOutlined.default
    }));
};
InfoCircleOutlined.displayName = 'InfoCircleOutlined';
var _default = /*#__PURE__*/ React.forwardRef(InfoCircleOutlined);
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"4WkBt","@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg","react":"b4tPL","@ant-design/icons-svg/lib/asn/InfoCircleOutlined":"cReGU","../components/AntdIcon":"8J0Vz"}],"cReGU":[function(require,module,exports) {
"use strict";
// This icon file is generated automatically.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var InfoCircleOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                }
            },
            {
                "tag": "path",
                "attrs": {
                    "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"
                }
            }
        ]
    },
    "name": "info-circle",
    "theme": "outlined"
};
exports.default = InfoCircleOutlined;

},{}],"813ZQ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = createUseNotification;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _useNotification = _interopRequireDefault(require("rc-notification/lib/useNotification"));
var _configProvider = require("../../config-provider");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function createUseNotification(getNotificationInstance, getRCNoticeProps) {
    var useNotification = function useNotification() {
        // We can only get content by render
        var getPrefixCls; // We create a proxy to handle delay created instance
        var innerInstance = null;
        var proxy = {
            add: function add(noticeProps, holderCallback) {
                innerInstance === null || innerInstance === void 0 || innerInstance.component.add(noticeProps, holderCallback);
            }
        };
        var _useRCNotification = (0, _useNotification["default"])(proxy), _useRCNotification2 = (0, _slicedToArray2["default"])(_useRCNotification, 2), hookNotify = _useRCNotification2[0], holder = _useRCNotification2[1];
        function notify(args) {
            var customizePrefixCls = args.prefixCls;
            var mergedPrefixCls = getPrefixCls('notification', customizePrefixCls);
            getNotificationInstance((0, _extends2["default"])((0, _extends2["default"])({}, args), {
                prefixCls: mergedPrefixCls
            }), function(_ref) {
                var prefixCls = _ref.prefixCls, instance = _ref.instance;
                innerInstance = instance;
                hookNotify(getRCNoticeProps(args, prefixCls));
            });
        } // Fill functions
        var hookApiRef = React.useRef({});
        hookApiRef.current.open = notify;
        [
            'success',
            'info',
            'warning',
            'error'
        ].forEach(function(type) {
            hookApiRef.current[type] = function(args) {
                return hookApiRef.current.open((0, _extends2["default"])((0, _extends2["default"])({}, args), {
                    type: type
                }));
            };
        });
        return [
            hookApiRef.current,
            /*#__PURE__*/ React.createElement(_configProvider.ConfigConsumer, {
                key: "holder"
            }, function(context) {
                getPrefixCls = context.getPrefixCls;
                return holder;
            })
        ];
    };
    return useNotification;
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/slicedToArray":"iAocj","react":"b4tPL","rc-notification/lib/useNotification":"lbgAD","../../config-provider":"en4XD"}],"9O4j0":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getStyle = getStyle;
exports.registerTheme = registerTheme;
var _dynamicCSS = require("rc-util/lib/Dom/dynamicCSS");
var _canUseDom = _interopRequireDefault(require("rc-util/lib/Dom/canUseDom"));
var _tinycolor = require("@ctrl/tinycolor");
var _colors = require("@ant-design/colors");
var _devWarning = _interopRequireDefault(require("../_util/devWarning"));
/* eslint-disable import/prefer-default-export, prefer-destructuring */ var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
function getStyle(globalPrefixCls, theme) {
    var variables = {};
    var formatColor = function formatColor(color, updater) {
        var clone = color.clone();
        clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;
        return clone.toRgbString();
    };
    var fillColor = function fillColor(colorVal, type) {
        var baseColor = new _tinycolor.TinyColor(colorVal);
        var colorPalettes = (0, _colors.generate)(baseColor.toRgbString());
        variables["".concat(type, "-color")] = formatColor(baseColor);
        variables["".concat(type, "-color-disabled")] = colorPalettes[1];
        variables["".concat(type, "-color-hover")] = colorPalettes[4];
        variables["".concat(type, "-color-active")] = colorPalettes[7];
        variables["".concat(type, "-color-outline")] = baseColor.clone().setAlpha(0.2).toRgbString();
        variables["".concat(type, "-color-deprecated-bg")] = colorPalettes[1];
        variables["".concat(type, "-color-deprecated-border")] = colorPalettes[3];
    }; // ================ Primary Color ================
    if (theme.primaryColor) {
        fillColor(theme.primaryColor, 'primary');
        var primaryColor = new _tinycolor.TinyColor(theme.primaryColor);
        var primaryColors = (0, _colors.generate)(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard
        primaryColors.forEach(function(color, index) {
            variables["primary-".concat(index + 1)] = color;
        }); // Deprecated
        variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function(c) {
            return c.lighten(35);
        });
        variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function(c) {
            return c.lighten(20);
        });
        variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function(c) {
            return c.tint(20);
        });
        variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function(c) {
            return c.tint(50);
        });
        variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function(c) {
            return c.setAlpha(c.getAlpha() * 0.12);
        });
        var primaryActiveColor = new _tinycolor.TinyColor(primaryColors[0]);
        variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function(c) {
            return c.setAlpha(c.getAlpha() * 0.3);
        });
        variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function(c) {
            return c.darken(2);
        });
    } // ================ Success Color ================
    if (theme.successColor) fillColor(theme.successColor, 'success');
     // ================ Warning Color ================
    if (theme.warningColor) fillColor(theme.warningColor, 'warning');
     // ================= Error Color =================
    if (theme.errorColor) fillColor(theme.errorColor, 'error');
     // ================= Info Color ==================
    if (theme.infoColor) fillColor(theme.infoColor, 'info');
     // Convert to css variables
    var cssList = Object.keys(variables).map(function(key) {
        return "--".concat(globalPrefixCls, "-").concat(key, ": ").concat(variables[key], ";");
    });
    return "\n  :root {\n    ".concat(cssList.join('\n'), "\n  }\n  ").trim();
}
function registerTheme(globalPrefixCls, theme) {
    var style = getStyle(globalPrefixCls, theme);
    if ((0, _canUseDom["default"])()) (0, _dynamicCSS.updateCSS)(style, "".concat(dynamicStyleMark, "-dynamic-theme"));
    else (0, _devWarning["default"])(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.');
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","rc-util/lib/Dom/dynamicCSS":"2jczC","rc-util/lib/Dom/canUseDom":"10TIB","@ctrl/tinycolor":"3OnV7","@ant-design/colors":"51wCJ","../_util/devWarning":"2ZcNH"}],"1hyJO":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NoStyleItemContext = exports.NoFormStatus = exports.FormProvider = exports.FormItemStatusContext = exports.FormItemPrefixContext = exports.FormContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _omit = _interopRequireDefault(require("rc-util/lib/omit"));
var _rcFieldForm = require("rc-field-form");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var FormContext = /*#__PURE__*/ React.createContext({
    labelAlign: 'right',
    vertical: false,
    itemRef: function itemRef() {}
});
exports.FormContext = FormContext;
var NoStyleItemContext = /*#__PURE__*/ React.createContext(null);
exports.NoStyleItemContext = NoStyleItemContext;
var FormProvider = function FormProvider(props) {
    var providerProps = (0, _omit["default"])(props, [
        'prefixCls'
    ]);
    return /*#__PURE__*/ React.createElement(_rcFieldForm.FormProvider, providerProps);
};
exports.FormProvider = FormProvider;
var FormItemPrefixContext = /*#__PURE__*/ React.createContext({
    prefixCls: ''
});
exports.FormItemPrefixContext = FormItemPrefixContext;
var FormItemStatusContext = /*#__PURE__*/ React.createContext({});
exports.FormItemStatusContext = FormItemStatusContext;
var NoFormStatus = function NoFormStatus(_ref) {
    var children = _ref.children;
    var emptyContext = (0, React.useMemo)(function() {
        return {};
    }, []);
    return /*#__PURE__*/ React.createElement(FormItemStatusContext.Provider, {
        value: emptyContext
    }, children);
};
exports.NoFormStatus = NoFormStatus;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL","rc-util/lib/omit":"gYb9N","rc-field-form":"khw17"}],"gYb9N":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = omit;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
function omit(obj, fields) {
    var clone = (0, _objectSpread2.default)({}, obj);
    if (Array.isArray(fields)) fields.forEach(function(key) {
        delete clone[key];
    });
    return clone;
}

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/objectSpread2":"50HAg"}],"5Ex80":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasPrefixSuffix = hasPrefixSuffix;
// eslint-disable-next-line import/prefer-default-export
function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
}

},{}],"89yUa":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _button = _interopRequireDefault(require("./button"));
var _default = _button["default"];
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","./button":"f3SHh"}],"f3SHh":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertLegacyProps = convertLegacyProps;
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _omit = _interopRequireDefault(require("rc-util/lib/omit"));
var _buttonGroup = _interopRequireDefault(require("./button-group"));
var _configProvider = require("../config-provider");
var _wave = _interopRequireDefault(require("../_util/wave"));
var _type = require("../_util/type");
var _devWarning = _interopRequireDefault(require("../_util/devWarning"));
var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));
var _LoadingIcon = _interopRequireDefault(require("./LoadingIcon"));
var _reactNode = require("../_util/reactNode");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __rest = function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
/* eslint-disable react/button-has-type */ var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
function isString(str) {
    return typeof str === 'string';
}
function isUnborderedButtonType(type) {
    return type === 'text' || type === 'link';
}
function isReactFragment(node) {
    return /*#__PURE__*/ React.isValidElement(node) && node.type === React.Fragment;
} // Insert one space between two chinese characters automatically.
function insertSpace(child, needInserted) {
    // Check the child if is undefined or null.
    if (child == null) return;
    var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.
    if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) return (0, _reactNode.cloneElement)(child, {
        children: child.props.children.split('').join(SPACE)
    });
    if (typeof child === 'string') return isTwoCNChar(child) ? /*#__PURE__*/ React.createElement("span", null, child.split('').join(SPACE)) : /*#__PURE__*/ React.createElement("span", null, child);
    if (isReactFragment(child)) return /*#__PURE__*/ React.createElement("span", null, child);
    return child;
}
function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    React.Children.forEach(children, function(child) {
        var type = (0, _typeof2["default"])(child);
        var isCurrentChildPure = type === 'string' || type === 'number';
        if (isPrevChildPure && isCurrentChildPure) {
            var lastIndex = childList.length - 1;
            var lastChild = childList[lastIndex];
            childList[lastIndex] = "".concat(lastChild).concat(child);
        } else childList.push(child);
        isPrevChildPure = isCurrentChildPure;
    }); // Pass to React.Children.map to auto fill key
    return React.Children.map(childList, function(child) {
        return insertSpace(child, needInserted);
    });
}
var ButtonTypes = (0, _type.tuple)('default', 'primary', 'ghost', 'dashed', 'link', 'text');
var ButtonShapes = (0, _type.tuple)('default', 'circle', 'round');
var ButtonHTMLTypes = (0, _type.tuple)('submit', 'button', 'reset');
function convertLegacyProps(type) {
    if (type === 'danger') return {
        danger: true
    };
    return {
        type: type
    };
}
var InternalButton = function InternalButton(props, ref) {
    var _classNames;
    var _props$loading = props.loading, loading = _props$loading === void 0 ? false : _props$loading, customizePrefixCls = props.prefixCls, _props$type = props.type, type = _props$type === void 0 ? 'default' : _props$type, danger = props.danger, _props$shape = props.shape, shape = _props$shape === void 0 ? 'default' : _props$shape, customizeSize = props.size, className = props.className, children = props.children, icon = props.icon, _props$ghost = props.ghost, ghost = _props$ghost === void 0 ? false : _props$ghost, _props$block = props.block, block = _props$block === void 0 ? false : _props$block, _props$htmlType = props.htmlType, htmlType = _props$htmlType === void 0 ? 'button' : _props$htmlType, rest = __rest(props, [
        "loading",
        "prefixCls",
        "type",
        "danger",
        "shape",
        "size",
        "className",
        "children",
        "icon",
        "ghost",
        "block",
        "htmlType"
    ]);
    var size = React.useContext(_SizeContext["default"]);
    var _React$useState = React.useState(!!loading), _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2), innerLoading = _React$useState2[0], setLoading = _React$useState2[1];
    var _React$useState3 = React.useState(false), _React$useState4 = (0, _slicedToArray2["default"])(_React$useState3, 2), hasTwoCNChar = _React$useState4[0], setHasTwoCNChar = _React$useState4[1];
    var _React$useContext = React.useContext(_configProvider.ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton, direction = _React$useContext.direction;
    var buttonRef = ref || /*#__PURE__*/ React.createRef();
    var isNeedInserted = function isNeedInserted() {
        return React.Children.count(children) === 1 && !icon && !isUnborderedButtonType(type);
    };
    var fixTwoCNChar = function fixTwoCNChar() {
        // Fix for HOC usage like <FormatMessage />
        if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) return;
        var buttonText = buttonRef.current.textContent;
        if (isNeedInserted() && isTwoCNChar(buttonText)) {
            if (!hasTwoCNChar) setHasTwoCNChar(true);
        } else if (hasTwoCNChar) setHasTwoCNChar(false);
    }; // =============== Update Loading ===============
    var loadingOrDelay = (0, _typeof2["default"])(loading) === 'object' && loading.delay ? loading.delay || true : !!loading;
    React.useEffect(function() {
        var delayTimer = null;
        if (typeof loadingOrDelay === 'number') delayTimer = window.setTimeout(function() {
            delayTimer = null;
            setLoading(loadingOrDelay);
        }, loadingOrDelay);
        else setLoading(loadingOrDelay);
        return function() {
            if (delayTimer) {
                // in order to not perform a React state update on an unmounted component
                // and clear timer after 'loadingOrDelay' updated.
                window.clearTimeout(delayTimer);
                delayTimer = null;
            }
        };
    }, [
        loadingOrDelay
    ]);
    React.useEffect(fixTwoCNChar, [
        buttonRef
    ]);
    var handleClick = function handleClick(e) {
        var onClick = props.onClick, disabled = props.disabled; // https://github.com/ant-design/ant-design/issues/30207
        if (innerLoading || disabled) {
            e.preventDefault();
            return;
        }
        onClick === null || onClick === void 0 || onClick(e);
    };
    (0, _devWarning["default"])(!(typeof icon === 'string' && icon.length > 2), 'Button', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon"));
    (0, _devWarning["default"])(!(ghost && isUnborderedButtonType(type)), 'Button', "`link` or `text` button can't be a `ghost` button.");
    var prefixCls = getPrefixCls('btn', customizePrefixCls);
    var autoInsertSpace = autoInsertSpaceInButton !== false;
    var sizeClassNameMap = {
        large: 'lg',
        small: 'sm',
        middle: undefined
    };
    var sizeFullname = customizeSize || size;
    var sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || '' : '';
    var iconType = innerLoading ? 'loading' : icon;
    var classes = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(shape), shape !== 'default' && shape), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type), type), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnborderedButtonType(type)), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-loading"), innerLoading), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-block"), block), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
    var iconNode = icon && !innerLoading ? icon : /*#__PURE__*/ React.createElement(_LoadingIcon["default"], {
        existIcon: !!icon,
        prefixCls: prefixCls,
        loading: !!innerLoading
    });
    var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
    var linkButtonRestProps = (0, _omit["default"])(rest, [
        'navigate'
    ]);
    if (linkButtonRestProps.href !== undefined) return /*#__PURE__*/ React.createElement("a", (0, _extends2["default"])({}, linkButtonRestProps, {
        className: classes,
        onClick: handleClick,
        ref: buttonRef
    }), iconNode, kids);
    var buttonNode = /*#__PURE__*/ React.createElement("button", (0, _extends2["default"])({}, rest, {
        type: htmlType,
        className: classes,
        onClick: handleClick,
        ref: buttonRef
    }), iconNode, kids);
    if (isUnborderedButtonType(type)) return buttonNode;
    return /*#__PURE__*/ React.createElement(_wave["default"], {
        disabled: !!innerLoading
    }, buttonNode);
};
var Button = /*#__PURE__*/ React.forwardRef(InternalButton);
Button.displayName = 'Button';
Button.Group = _buttonGroup["default"];
Button.__ANT_BUTTON = true;
var _default = Button;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","@babel/runtime/helpers/slicedToArray":"iAocj","react":"b4tPL","classnames":"dFgpN","rc-util/lib/omit":"gYb9N","./button-group":"3GMDL","../config-provider":"en4XD","../_util/wave":"2tQmR","../_util/type":"jqcwP","../_util/devWarning":"2ZcNH","../config-provider/SizeContext":"GlbV5","./LoadingIcon":"gmmDX","../_util/reactNode":"jJTgh"}],"3GMDL":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _configProvider = require("../config-provider");
var _unreachableException = _interopRequireDefault(require("../_util/unreachableException"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var __rest = function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var ButtonGroup = function ButtonGroup(props) {
    return /*#__PURE__*/ React.createElement(_configProvider.ConfigConsumer, null, function(_ref) {
        var _classNames;
        var getPrefixCls = _ref.getPrefixCls, direction = _ref.direction;
        var customizePrefixCls = props.prefixCls, size = props.size, className = props.className, others = __rest(props, [
            "prefixCls",
            "size",
            "className"
        ]);
        var prefixCls = getPrefixCls('btn-group', customizePrefixCls); // large => lg
        // small => sm
        var sizeCls = '';
        switch(size){
            case 'large':
                sizeCls = 'lg';
                break;
            case 'small':
                sizeCls = 'sm';
                break;
            case 'middle':
            case undefined:
                break;
            default:
                // eslint-disable-next-line no-console
                console.warn(new _unreachableException["default"](size).error);
        }
        var classes = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
        return /*#__PURE__*/ React.createElement("div", (0, _extends2["default"])({}, others, {
            className: classes
        }));
    });
};
var _default = ButtonGroup;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/extends":"gGTxl","@babel/runtime/helpers/defineProperty":"f7qFM","react":"b4tPL","classnames":"dFgpN","../config-provider":"en4XD","../_util/unreachableException":"62mwI"}],"62mwI":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var UnreachableException = /*#__PURE__*/ (0, _createClass2["default"])(function UnreachableException1(value) {
    (0, _classCallCheck2["default"])(this, UnreachableException1);
    this.error = new Error("unreachable case: ".concat(JSON.stringify(value)));
});
exports["default"] = UnreachableException;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/createClass":"4rGRg","@babel/runtime/helpers/classCallCheck":"geBdr"}],"2tQmR":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var React = _interopRequireWildcard(require("react"));
var _dynamicCSS = require("rc-util/lib/Dom/dynamicCSS");
var _ref2 = require("rc-util/lib/ref");
var _raf = _interopRequireDefault(require("./raf"));
var _configProvider = require("../config-provider");
var _reactNode = require("./reactNode");
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var styleForPseudo; // Where el is the DOM element you'd like to test for visibility
function isHidden(element) {
    return !element || element.offsetParent === null || element.hidden;
}
function isNotGrey(color) {
    // eslint-disable-next-line no-useless-escape
    var match = (color || '').match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
    if (match && match[1] && match[2] && match[3]) return !(match[1] === match[2] && match[2] === match[3]);
    return true;
}
var Wave = /*#__PURE__*/ function(_React$Component) {
    (0, _inherits2["default"])(Wave1, _React$Component);
    var _super = (0, _createSuper2["default"])(Wave1);
    function Wave1() {
        var _this;
        (0, _classCallCheck2["default"])(this, Wave1);
        _this = _super.apply(this, arguments);
        _this.containerRef = /*#__PURE__*/ React.createRef();
        _this.animationStart = false;
        _this.destroyed = false;
        _this.onClick = function(node, waveColor) {
            var _a, _b;
            var _this$props = _this.props, insertExtraNode = _this$props.insertExtraNode, disabled = _this$props.disabled;
            if (disabled || !node || isHidden(node) || node.className.indexOf('-leave') >= 0) return;
            _this.extraNode = document.createElement('div');
            var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this), extraNode = _assertThisInitialize.extraNode;
            var getPrefixCls = _this.context.getPrefixCls;
            extraNode.className = "".concat(getPrefixCls(''), "-click-animating-node");
            var attributeName = _this.getAttributeName();
            node.setAttribute(attributeName, 'true'); // Not white or transparent or grey
            if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && waveColor !== 'transparent') {
                extraNode.style.borderColor = waveColor;
                var nodeRoot = ((_a = node.getRootNode) === null || _a === void 0 ? void 0 : _a.call(node)) || node.ownerDocument;
                var nodeBody = nodeRoot instanceof Document ? nodeRoot.body : (_b = nodeRoot.firstChild) !== null && _b !== void 0 ? _b : nodeRoot;
                styleForPseudo = (0, _dynamicCSS.updateCSS)("\n      [".concat(getPrefixCls(''), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(''), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }"), 'antd-wave', {
                    csp: _this.csp,
                    attachTo: nodeBody
                });
            }
            if (insertExtraNode) node.appendChild(extraNode);
            [
                'transition',
                'animation'
            ].forEach(function(name) {
                node.addEventListener("".concat(name, "start"), _this.onTransitionStart);
                node.addEventListener("".concat(name, "end"), _this.onTransitionEnd);
            });
        };
        _this.onTransitionStart = function(e) {
            if (_this.destroyed) return;
            var node = _this.containerRef.current;
            if (!e || e.target !== node || _this.animationStart) return;
            _this.resetEffect(node);
        };
        _this.onTransitionEnd = function(e) {
            if (!e || e.animationName !== 'fadeEffect') return;
            _this.resetEffect(e.target);
        };
        _this.bindAnimationEvent = function(node) {
            if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) return;
            var onClick = function onClick(e) {
                // Fix radio button click twice
                if (e.target.tagName === 'INPUT' || isHidden(e.target)) return;
                _this.resetEffect(node); // Get wave color from target
                var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
                _this.clickWaveTimeoutId = window.setTimeout(function() {
                    return _this.onClick(node, waveColor);
                }, 0);
                _raf["default"].cancel(_this.animationStartId);
                _this.animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.
                _this.animationStartId = (0, _raf["default"])(function() {
                    _this.animationStart = false;
                }, 10);
            };
            node.addEventListener('click', onClick, true);
            return {
                cancel: function cancel() {
                    node.removeEventListener('click', onClick, true);
                }
            };
        };
        _this.renderWave = function(_ref) {
            var csp = _ref.csp;
            var children = _this.props.children;
            _this.csp = csp;
            if (!/*#__PURE__*/ React.isValidElement(children)) return children;
            var ref = _this.containerRef;
            if ((0, _ref2.supportRef)(children)) ref = (0, _ref2.composeRef)(children.ref, _this.containerRef);
            return (0, _reactNode.cloneElement)(children, {
                ref: ref
            });
        };
        return _this;
    }
    (0, _createClass2["default"])(Wave1, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var node = this.containerRef.current;
                if (!node || node.nodeType !== 1) return;
                this.instance = this.bindAnimationEvent(node);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this.instance) this.instance.cancel();
                if (this.clickWaveTimeoutId) clearTimeout(this.clickWaveTimeoutId);
                this.destroyed = true;
            }
        },
        {
            key: "getAttributeName",
            value: function getAttributeName() {
                var getPrefixCls = this.context.getPrefixCls;
                var insertExtraNode = this.props.insertExtraNode;
                return insertExtraNode ? "".concat(getPrefixCls(''), "-click-animating") : "".concat(getPrefixCls(''), "-click-animating-without-extra-node");
            }
        },
        {
            key: "resetEffect",
            value: function resetEffect(node) {
                var _this2 = this;
                if (!node || node === this.extraNode || !(node instanceof Element)) return;
                var insertExtraNode = this.props.insertExtraNode;
                var attributeName = this.getAttributeName();
                node.setAttribute(attributeName, 'false'); // edge has bug on `removeAttribute` #14466
                if (styleForPseudo) styleForPseudo.innerHTML = '';
                if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) node.removeChild(this.extraNode);
                [
                    'transition',
                    'animation'
                ].forEach(function(name) {
                    node.removeEventListener("".concat(name, "start"), _this2.onTransitionStart);
                    node.removeEventListener("".concat(name, "end"), _this2.onTransitionEnd);
                });
            }
        },
        {
            key: "render",
            value: function render() {
                return /*#__PURE__*/ React.createElement(_configProvider.ConfigConsumer, null, this.renderWave);
            }
        }
    ]);
    return Wave1;
}(React.Component);
exports["default"] = Wave;
Wave.contextType = _configProvider.ConfigContext;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","@babel/runtime/helpers/typeof":"ew9pR","@babel/runtime/helpers/classCallCheck":"geBdr","@babel/runtime/helpers/createClass":"4rGRg","@babel/runtime/helpers/assertThisInitialized":"1ksKt","@babel/runtime/helpers/inherits":"3JGw3","@babel/runtime/helpers/createSuper":"RJN6l","react":"b4tPL","rc-util/lib/Dom/dynamicCSS":"2jczC","rc-util/lib/ref":"3r6Bz","./raf":"ew0Jc","../config-provider":"en4XD","./reactNode":"jJTgh"}],"ew0Jc":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = wrapperRaf;
var _raf = _interopRequireDefault(require("rc-util/lib/raf"));
var id = 0;
var ids = {}; // Support call raf with delay specified frame
function wrapperRaf(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var myId = id++;
    var restFrames = delayFrames;
    function internalCallback() {
        restFrames -= 1;
        if (restFrames <= 0) {
            callback();
            delete ids[myId];
        } else ids[myId] = (0, _raf["default"])(internalCallback);
    }
    ids[myId] = (0, _raf["default"])(internalCallback);
    return myId;
}
wrapperRaf.cancel = function cancel(pid) {
    if (pid === undefined) return;
    _raf["default"].cancel(ids[pid]);
    delete ids[pid];
};
wrapperRaf.ids = ids; // export this for test usage

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","rc-util/lib/raf":"bsBxN"}],"bsBxN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = wrapperRaf;
var raf = function raf(callback) {
    return +setTimeout(callback, 16);
};
var caf = function caf(num) {
    return clearTimeout(num);
};
if (typeof window !== 'undefined' && 'requestAnimationFrame' in window) {
    raf = function raf(callback) {
        return window.requestAnimationFrame(callback);
    };
    caf = function caf(handle) {
        return window.cancelAnimationFrame(handle);
    };
}
var rafUUID = 0;
var rafIds = new Map();
function cleanup(id) {
    rafIds.delete(id);
}
function wrapperRaf(callback) {
    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    rafUUID += 1;
    var id = rafUUID;
    function callRef(leftTimes) {
        if (leftTimes === 0) {
            // Clean up
            cleanup(id); // Trigger
            callback();
        } else {
            // Next raf
            var realId = raf(function() {
                callRef(leftTimes - 1);
            }); // Bind real raf id
            rafIds.set(id, realId);
        }
    }
    callRef(times);
    return id;
}
wrapperRaf.cancel = function(id) {
    var realId = rafIds.get(id);
    cleanup(realId);
    return caf(realId);
};

},{}],"jJTgh":[function(require,module,exports) {
"use strict";
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneElement = cloneElement;
exports.isValidElement = void 0;
exports.replaceElement = replaceElement;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop1) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop1);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var isValidElement = React.isValidElement;
exports.isValidElement = isValidElement;
function replaceElement(element, replacement, props) {
    if (!isValidElement(element)) return replacement;
    return /*#__PURE__*/ React.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);
}
function cloneElement(element, props) {
    return replaceElement(element, element, props);
}

},{"@babel/runtime/helpers/typeof":"ew9pR","react":"b4tPL"}],"gmmDX":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _rcMotion = _interopRequireDefault(require("rc-motion"));
var _LoadingOutlined = _interopRequireDefault(require("@ant-design/icons/LoadingOutlined"));
var getCollapsedWidth = function getCollapsedWidth() {
    return {
        width: 0,
        opacity: 0,
        transform: 'scale(0)'
    };
};
var getRealWidth = function getRealWidth(node) {
    return {
        width: node.scrollWidth,
        opacity: 1,
        transform: 'scale(1)'
    };
};
var LoadingIcon = function LoadingIcon(_ref) {
    var prefixCls = _ref.prefixCls, loading = _ref.loading, existIcon = _ref.existIcon;
    var visible = !!loading;
    if (existIcon) return /*#__PURE__*/ _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-loading-icon")
    }, /*#__PURE__*/ _react["default"].createElement(_LoadingOutlined["default"], null));
    return /*#__PURE__*/ _react["default"].createElement(_rcMotion["default"], {
        visible: visible // We do not really use this motionName
        ,
        motionName: "".concat(prefixCls, "-loading-icon-motion"),
        removeOnLeave: true,
        onAppearStart: getCollapsedWidth,
        onAppearActive: getRealWidth,
        onEnterStart: getCollapsedWidth,
        onEnterActive: getRealWidth,
        onLeaveStart: getRealWidth,
        onLeaveActive: getCollapsedWidth
    }, function(_ref2, ref) {
        var className = _ref2.className, style = _ref2.style;
        return /*#__PURE__*/ _react["default"].createElement("span", {
            className: "".concat(prefixCls, "-loading-icon"),
            style: style,
            ref: ref
        }, /*#__PURE__*/ _react["default"].createElement(_LoadingOutlined["default"], {
            className: className
        }));
    });
};
var _default = LoadingIcon;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"8WoZp","react":"b4tPL","rc-motion":"01wSt","@ant-design/icons/LoadingOutlined":"iQ4mv"}],"gCa2M":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args1;
    var timeout = undefined;
    return function(args) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"39hwX"}]},["gtw6U","jN7un","jvaAX"], "jvaAX", "parcelRequire94c2")

